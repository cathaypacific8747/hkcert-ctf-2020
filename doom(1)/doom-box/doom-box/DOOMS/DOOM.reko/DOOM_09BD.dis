// fn09BD_016C
// Return size: 2
define fn09BD_016C
fn09BD_016C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_016C
l09BD_016C:
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = 0<16>
	cx = 0x100<16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_0176
l09BD_0176:
	Mem0[ds:bx + 0xC6<16>:word16] = ax
	Mem0[ds:bx + 0xC4<16>:word16] = 0x8E00<16>
	Mem0[ds:bx + 0xC2<16>:word16] = 0x70<16>
	Mem0[ds:bx + 0xC0<16>:word16] = dx
	dx = dx + 4<16>
	SCZO = cond(dx)
	bx = bx + 8<16>
	SCZO = cond(bx)
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_0176
	// succ:  l09BD_0192 l09BD_0176
l09BD_0192:
	cx = 0x11<16>
	dx = 0x41F1<16>
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	// succ:  l09BD_019A
l09BD_019A:
	Mem0[ds:bx + 0xC0<16>:word16] = dx
	dx = dx + 0x1C<16>
	SCZO = cond(dx)
	bx = bx + 8<16>
	SCZO = cond(bx)
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_019A
	// succ:  l09BD_01A7 l09BD_019A
l09BD_01A7:
	Mem0[ds:0x128<16>:word16] = 0x1F96<16>
	Mem0[ds:0x1B8<16>:word16] = 0x84<16>
	Mem0[ds:0x1C0<16>:word16] = 0xC80<16>
	Mem0[ds:0x1C2<16>:word16] = 0x18<16>
	Mem0[ds:0x1C8<16>:word16] = 0xC9E<16>
	Mem0[ds:0x1D8<16>:word16] = 0x5EB<16>
	Mem0[ds:0x248<16>:word16] = 0x448E<16>
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(NE,Z) l09BD_01E4
	// succ:  l09BD_01D8 l09BD_01E4
l09BD_01D8:
	Mem0[ds:0x3F8<16>:word16] = 0x2C6F<16>
	Mem0[ds:0x3FA<16>:word16] = 0x18<16>
	// succ:  l09BD_01E4
l09BD_01E4:
	call fn09BD_2071 (retsize: 2;)
	SZO = cond(Mem0[ds:0x47<16>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l09BD_0216
	// succ:  l09BD_01EE l09BD_0216
l09BD_01EE:
	Mem0[ds:0x170<16>:word16] = 0x4FA<16>
	Mem0[ds:0x1B0<16>:word16] = 0xC7C<16>
	Mem0[ds:0x1B2<16>:word16] = 0x18<16>
	bl = Mem0[ds:0x51<16>:byte]
	bl = bl | bl
	SZO = cond(bl)
	C = false
	branch Test(EQ,Z) l09BD_0216
	// succ:  l09BD_0208 l09BD_0216
l09BD_0208:
	bl = bl + 5<8>
	SCZO = cond(bl)
	bh = bh ^ bh
	SZO = cond(bh)
	C = false
	bx = bx << 3<16>
	SCZO = cond(bx)
	Mem0[ds:bx + 0xC0<16>:word16] = 0x556<16>
	// succ:  l09BD_0216
l09BD_0216:
	SCZO = cond(Mem0[ds:0x3E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_0245
	// succ:  l09BD_021D l09BD_0245
l09BD_021D:
	__fninit()
	bx = Mem0[ds:0xF82<16>:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l09BD_0229
	// succ:  l09BD_0227 l09BD_0229
l09BD_0227:
	__fsave(Mem0[ds:bx:word16])
	// succ:  l09BD_0229
l09BD_0229:
	Mem0[0x9BD<16>:0x92C<16>:byte] = 0x9B<8>
	Mem0[0x9BD<16>:0x931<16>:byte] = 0x9B<8>
	al = Mem0[ds:0x2E<16>:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_0242
	// succ:  l09BD_023C l09BD_0242
l09BD_023C:
	SCZO = cond(al - 0xB<8>)
	branch Test(EQ,Z) l09BD_0242
	// succ:  l09BD_0240 l09BD_0242
l09BD_0240:
	cr0 = __clts(cr0)
	// succ:  l09BD_0242
l09BD_0242:
	__wait()
	// succ:  l09BD_0245
l09BD_0245:
	return
	// succ:  fn09BD_016C_exit
fn09BD_016C_exit:


// fn09BD_0246
// Return size: 2
define fn09BD_0246
fn09BD_0246_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0246
l09BD_0246:
	call fn09BD_0D15 (retsize: 2;)
	call SEQ(0x9BD<16>, Mem0[ds:0x97A<16>:word16]) (retsize: 2;)
	call fn09BD_0D0C (retsize: 2;)
	return
	// succ:  fn09BD_0246_exit
fn09BD_0246_exit:


// fn09BD_0290
// Return size: 0
define fn09BD_0290
fn09BD_0290_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0290
l09BD_0290:
	dx = 0x20<16>
	v4 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v4
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call SEQ(0x9BD<16>, Mem0[ds:0x9C0<16>:word16]) (retsize: 2;)
	ss = dx
	dx = 0x20<16>
	ds = dx
	es = dx
	ax = 0x68<16>
	__lldt(ax)
	ax = __smsw()
	ax = ax | Mem0[ds:0x40<16>:word16]
	SZO = cond(ax)
	C = false
	__lmsw(ax)
	call Mem0[ds:0x9C2<16>:word16] (retsize: 0;)
	return
	// succ:  fn09BD_0290_exit
fn09BD_0290_exit:


// fn09BD_0733
// Return size: 2
define fn09BD_0733
fn09BD_0733_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0733
l09BD_0733:
	__outb(0x22<8>, al)
	ah = al
	// succ:  l09BD_0739
l09BD_0739:
	al = __inb(0x23<8>)
	return
	// succ:  fn09BD_0733_exit
fn09BD_0733_exit:


// fn09BD_0929
// Return size: 0
define fn09BD_0929
fn09BD_0929_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0929
l09BD_0929:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x20<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l09BD_092B_thunk_fn09BD_092C
l09BD_092B_thunk_fn09BD_092C:
	call fn09BD_092C (retsize: 0;)
	return
	// succ:  fn09BD_0929_exit
fn09BD_0929_exit:


// fn09BD_092C
// Return size: 0
define fn09BD_092C
fn09BD_092C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_092C
l09BD_092C:
	call Mem0[ds:0x9BC<16>:word16] (retsize: 0;)
	return
	// succ:  fn09BD_092C_exit
fn09BD_092C_exit:


// fn09BD_0BD1
// Return size: 2
define fn09BD_0BD1
fn09BD_0BD1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0BD1
l09BD_0BD1:
	call fn09BD_0C28 (retsize: 2;)
	al = 0xD1<8>
	__outb(0x64<8>, al)
	call fn09BD_0C28 (retsize: 2;)
	v4 = ah
	ah = al
	al = v4
	__outb(0x60<8>, al)
	call fn09BD_0C28 (retsize: 2;)
	return
	// succ:  fn09BD_0BD1_exit
fn09BD_0BD1_exit:


// fn09BD_0BE9
// Return size: 2
define fn09BD_0BE9
fn09BD_0BE9_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_0BE9
	// succ:  l09BD_0BE9
l09BD_0BE3:
	al = 0xFF<8>
	__outb(0x64<8>, al)
	// succ:  l09BD_0BE7_thunk_fn09BD_0C28
l09BD_0BE7_thunk_fn09BD_0C28:
	call fn09BD_0C28 (retsize: 0;)
	return
	// succ:  fn09BD_0BE9_exit
l09BD_0BE9:
	ah = 0xDF<8>
	call fn09BD_0BD1 (retsize: 2;)
	SZO = cond(Mem0[ds:0x14<16>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l09BD_0BE3
	// succ:  l09BD_0BF5 l09BD_0BE3
l09BD_0BF5:
	call fn09BD_0C0D (retsize: 2;)
	branch Test(EQ,Z) l09BD_0BF5
	// succ:  l09BD_0BFA l09BD_0BF5
l09BD_0BFA:
	return
	// succ:  fn09BD_0BE9_exit
fn09BD_0BE9_exit:


// fn09BD_0C0D
// Return size: 2
define fn09BD_0C0D
fn09BD_0C0D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C0D
l09BD_0C0D:
	__cli()
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ds = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = 0x20<16>
	cx = cx - 1<16>
	SZO = cond(cx)
	es = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = 0x30<16>
	D = false
	cx = 4<16>
	// succ:  l09BD_0C22
l09BD_0C22:
	branch cx == 0<16> l09BD_0C24
	// succ:  l09BD_0C22_1 l09BD_0C24
l09BD_0C22_1:
	SCZO = cond(Mem0[ds:si:word16] - Mem0[es:di:word16])
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	branch Test(NE,Z) l09BD_0C22
	// succ:  l09BD_0C24 l09BD_0C22
l09BD_0C24:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_0C0D_exit
fn09BD_0C0D_exit:


// fn09BD_0C28
// Return size: 2
define fn09BD_0C28
fn09BD_0C28_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C28
l09BD_0C28:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_0C2B
l09BD_0C2B:
	al = __inb(0x64<8>)
	SZO = cond(al & 2<8>)
	C = false
	branch Test(NE,Z) l09BD_0C33
	// succ:  l09BD_0C31 l09BD_0C33
l09BD_0C31:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_0C28_exit
l09BD_0C33:
	cx = cx - 1<16>
	branch Test(NE,Z) && cx != 0<16> l09BD_0C2B
	// succ:  l09BD_0C35 l09BD_0C2B
l09BD_0C35:
	branch Test(EQ,Z) l09BD_0C31
	// succ:  l09BD_0C37 l09BD_0C31
l09BD_0C37:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1A<16>
	call fn09BD_229D (retsize: 2;)
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	al = al + ch
	SCZO = cond(al)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v15 = Mem0[ds:bx + di:byte] + al
	Mem0[ds:bx + di:byte] = v15
	SCZO = cond(v15)
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	ch = ch + al
	SCZO = cond(ch)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v17 = Mem0[ss:bp + di:byte] + al
	Mem0[ss:bp + di:byte] = v17
	SCZO = cond(v17)
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	al = al + 0xE8<8>
	SCZO = cond(al)
	ax = ax - 1<16>
	SZO = cond(ax)
	v18 = Mem0[ds:di:byte] + al
	Mem0[ds:di:byte] = v18
	SCZO = cond(v18)
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	call fn09BD_0C9F (retsize: 2;)
	al = al | ch
	SZO = cond(al)
	C = false
	SCZO = cond(Mem0[ds:bx + si:byte] - al)
	ax = ax | bp
	SZO = cond(ax)
	C = false
	SCZO = cond(Mem0[ds:bx + si:byte] - al)
	ch = ch | al
	SZO = cond(ch)
	C = false
	al = al ^ 0<8>
	SZO = cond(al)
	C = false
	bp = bp | ax
	SZO = cond(bp)
	C = false
	v21 = Mem0[ds:bx + si:byte] ^ al
	Mem0[ds:bx + si:byte] = v21
	SZO = cond(Mem0[ds:bx + si:byte])
	C = false
	al = al | 0xE8<8>
	SZO = cond(al)
	C = false
	al = al - 0<8>
	SCZO = cond(al)
	ax = ax | 0x28E8<16>
	SZO = cond(ax)
	C = false
	v23 = Mem0[ds:0x20E8<16>:byte] + cl
	Mem0[ds:0x20E8<16>:byte] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:bx:byte] + cl
	Mem0[ds:bx:byte] = v24
	SCZO = cond(v24)
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	call fn09BD_0C9B (retsize: 2;)
	sp = sp + 4<16>
	v26 = Mem0[ds:bx:byte] & bl
	Mem0[ds:bx:byte] = v26
	SZO = cond(Mem0[ds:bx:byte])
	C = false
	// succ:  l09BD_0C83_thunk_fn09BD_0C85
l09BD_0C83_thunk_fn09BD_0C85:
	call fn09BD_0C85 (retsize: 0;)
	return
	// succ:  fn09BD_0C28_exit
fn09BD_0C28_exit:


// fn09BD_0C84
// Return size: 0
define fn09BD_0C84
fn09BD_0C84_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C84
l09BD_0C84:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	goto l09BD_0C84_thunk_fn09BD_0C85
	// succ:  l09BD_0C84_thunk_fn09BD_0C85
l09BD_0C84:
l09BD_0C84_thunk_fn09BD_0C85:
	call fn09BD_0C85 (retsize: 0;)
	return
	// succ:  fn09BD_0C84_exit
fn09BD_0C84_exit:


// fn09BD_0C85
// Return size: 0
define fn09BD_0C85
fn09BD_0C85_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C85
l09BD_0C85:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v5 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v5
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ax = 0x20<16>
	ds = ax
	v14 = Mem0[ds:0x996<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	bp = sp
	v15 = Mem0[ss:bp + 0xE<16>:word16] + 6<16>
	Mem0[ss:bp + 0xE<16>:word16] = v15
	SCZO = cond(v15)
	goto l09BD_0C99_thunk_fn09BD_0CEC
	// succ:  l09BD_0C99_thunk_fn09BD_0CEC
l09BD_0C85:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v18 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ax = 0x20<16>
	ds = ax
	v14 = Mem0[ds:0x996<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	bp = sp
	v15 = Mem0[ss:bp + 0xE<16>:word16] + 6<16>
	Mem0[ss:bp + 0xE<16>:word16] = v15
	SCZO = cond(v15)
	goto l09BD_0C99_thunk_fn09BD_0CEC
	// succ:  l09BD_0C99_thunk_fn09BD_0CEC
l09BD_0C99_thunk_fn09BD_0CEC:
	call fn09BD_0CEC (retsize: 0;)
	return
	// succ:  fn09BD_0C85_exit
l09BD_0C99_thunk_fn09BD_0CEC:
	call fn09BD_0CEC (retsize: 0;)
	return
	// succ:  fn09BD_0C85_exit
fn09BD_0C85_exit:


// fn09BD_0C9B
// Return size: 0
define fn09BD_0C9B
fn09BD_0C9B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C9B
l09BD_0C9B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	__cli()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ax = 0x20<16>
	ds = ax
	Mem0[ds:0xF7C<16>:word16] = ss
	Mem0[ds:0xF7A<16>:word16] = sp
	SCZO = cond(Mem0[ds:0xF7C<16>:word16] - ax)
	branch Test(EQ,Z) l09BD_0CB3_thunk_fn09BD_0C84
	goto l09BD_0CB3_thunk_fn09BD_0CB5
	// succ:  l09BD_0CB3_thunk_fn09BD_0CB5 l09BD_0CB3_thunk_fn09BD_0C84
l09BD_0CB3_thunk_fn09BD_0C84:
	call fn09BD_0C84 (retsize: 0;)
	return
	// succ:  fn09BD_0C9B_exit
l09BD_0CB3_thunk_fn09BD_0CB5:
	call fn09BD_0CB5 (retsize: 0;)
	return
	// succ:  fn09BD_0C9B_exit
fn09BD_0C9B_exit:


// fn09BD_0C9F
// Return size: 0
define fn09BD_0C9F
fn09BD_0C9F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0C9F
l09BD_0C9F:
	__cli()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ax = 0x20<16>
	ds = ax
	Mem0[ds:0xF7C<16>:word16] = ss
	Mem0[ds:0xF7A<16>:word16] = sp
	SCZO = cond(Mem0[ds:0xF7C<16>:word16] - ax)
	branch Test(EQ,Z) l09BD_0CB3_thunk_fn09BD_0C84
	goto l09BD_0CB3_thunk_fn09BD_0CB5
	// succ:  l09BD_0CB3_thunk_fn09BD_0CB5 l09BD_0CB3_thunk_fn09BD_0C84
l09BD_0CB3_thunk_fn09BD_0C84:
	call fn09BD_0C84 (retsize: 0;)
	return
	// succ:  fn09BD_0C9F_exit
l09BD_0CB3_thunk_fn09BD_0CB5:
	call fn09BD_0CB5 (retsize: 0;)
	return
	// succ:  fn09BD_0C9F_exit
fn09BD_0C9F_exit:


// fn09BD_0CB5
// Return size: 0
define fn09BD_0CB5
fn09BD_0CB5_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0CB5
l09BD_0CB5:
	ss = ax
	sp = Mem0[ds:0x996<16>:word16]
	sp = sp - 0x180<16>
	SCZO = cond(sp)
	v8 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v8
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	v16 = Mem0[ds:0xF7C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	v17 = Mem0[ds:0x996<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v17
	bp = sp
	es = ax
	ds_si = Mem0[ds:0xF7A<16>:segptr32]
	D = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	Mem0[ss:bp + 4<16>:word16] = ax
	di = bp + 0x16<16>
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 2<i16>
	di = di + 2<i16>
	v21 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v21
	si = si + 2<i16>
	di = di + 2<i16>
	v22 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v22
	si = si + 4<i16>
	di = di + 4<i16>
	Mem0[ss:bp + 0xE<16>:word16] = si
	v23 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v23
	si = si + 4<i16>
	di = di + 4<i16>
	v24 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v24
	si = si + 4<i16>
	di = di + 4<i16>
	v25 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v25
	si = si + 4<i16>
	di = di + 4<i16>
	ax = 0x20<16>
	ds = ax
	// succ:  l09BD_0CEA_thunk_fn09BD_0CEC
l09BD_0CEA_thunk_fn09BD_0CEC:
	call fn09BD_0CEC (retsize: 0;)
	return
	// succ:  fn09BD_0CB5_exit
fn09BD_0CB5_exit:


// fn09BD_0CEC
// Return size: 0
define fn09BD_0CEC
fn09BD_0CEC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0CEC
l09BD_0CEC:
	Mem0[ds:0x996<16>:word16] = bp
	sp = Mem0[ds:0xF50<16>:word16]
	call fn09BD_092C (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bx = Mem0[ss:bp + 0x18<16>:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l09BD_0CFE_thunk_fn09BD_0D03
	goto l09BD_0CFE_thunk_fn09BD_0D00
	// succ:  l09BD_0CFE_thunk_fn09BD_0D00 l09BD_0CFE_thunk_fn09BD_0D03
l09BD_0CEC:
	Mem0[ds:0x996<16>:word16] = bp
	sp = Mem0[ds:0xF50<16>:word16]
	call fn09BD_092C (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bx = Mem0[ss:bp + 0x18<16>:word16]
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l09BD_0D03
	goto l09BD_0CFE_thunk_fn09BD_0D00
	// succ:  l09BD_0CFE_thunk_fn09BD_0D00 l09BD_0CFE_thunk_fn09BD_0D03
l09BD_0CFE_thunk_fn09BD_0D00:
	call fn09BD_0D00 (retsize: 0;)
	return
	// succ:  fn09BD_0CEC_exit
l09BD_0CFE_thunk_fn09BD_0D00:
	call fn09BD_0D00 (retsize: 0;)
	return
	// succ:  fn09BD_0CEC_exit
l09BD_0CFE_thunk_fn09BD_0D03:
	call fn09BD_0D03 (retsize: 0;)
	return
	// succ:  fn09BD_0CEC_exit
l09BD_0CFE_thunk_fn09BD_0D03:
	call fn09BD_0D03 (retsize: 0;)
	return
	// succ:  fn09BD_0CEC_exit
fn09BD_0CEC_exit:


// fn09BD_0D00
// Return size: 0
define fn09BD_0D00
fn09BD_0D00_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0D00
l09BD_0D00:
	v6 = Mem0[ss:bp + 0x1C<16>:word16]
	Mem0[ss:bp + 0x1C<16>:word16] = bx
	bx = v6
	// succ:  l09BD_0D00_thunk_fn09BD_0D03
l09BD_0D00_thunk_fn09BD_0D03:
	call fn09BD_0D03 (retsize: 0;)
	return
	// succ:  fn09BD_0D00_exit
fn09BD_0D00_exit:


// fn09BD_0D03
// Return size: 0
define fn09BD_0D03
fn09BD_0D03_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_0D03
	// succ:  l09BD_0D03
l09BD_0251:
	call fn09BD_0246 (retsize: 2;)
	sp = Mem0[ds:0x996<16>:word16]
	bp = sp
	di = Mem0[ss:bp + 0xE<16>:word16]
	Mem0[0x9BD<16>:0xC<16>:word16] = di
	ax = Mem0[ss:bp + 2<16>:word16]
	Mem0[0x9BD<16>:0xE<16>:word16] = ax
	call fn09BD_0290 (retsize: 2;)
	si = bp + 0x1E<16>
	D = false
	es_di = Mem0[0x9BD<16>:0xC<16>:segptr32]
	v14 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v14
	si = si + 4<i16>
	di = di + 4<i16>
	v16 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v16
	si = si + 4<i16>
	di = di + 4<i16>
	v17 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v17
	si = si + 4<i16>
	di = di + 4<i16>
	Mem0[ds:0x996<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp + 1<16>
	SZO = cond(sp)
	sp = sp + 1<16>
	SZO = cond(sp)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	sp = sp + 2<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ss = Mem0[0x9BD<16>:0xE<16>:selector]
	sp = Mem0[0x9BD<16>:0xC<16>:word16]
	SCZO = Mem0[ss:sp:word32]
	sp = sp + 4<16>
	return
	// succ:  fn09BD_0D03_exit
l09BD_0D03:
	al = Mem0[0x9BD<16>:bx:byte]
	Mem0[ss:bp + 0x18<16>:word16] = ax
	goto l09BD_0251
	// succ:  l09BD_0251
fn09BD_0D03_exit:


// fn09BD_0D0C
// Return size: 2
define fn09BD_0D0C
fn09BD_0D0C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0D0C
l09BD_0D0C:
	__cli()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1026<16>
	call fn09BD_1298 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_0D0C_exit
fn09BD_0D0C_exit:


// fn09BD_0D15
// Return size: 2
define fn09BD_0D15
fn09BD_0D15_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0D15
l09BD_0D15:
	__cli()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1026<16>
	call fn09BD_1280 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xF8A<16>
	call fn09BD_1298 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	__sti()
	return
	// succ:  fn09BD_0D15_exit
fn09BD_0D15_exit:


// fn09BD_0EF4
// Return size: 2
define fn09BD_0EF4
fn09BD_0EF4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_0EF4
l09BD_0EF4:
	__syscall(0x15<8>)
	return
	// succ:  fn09BD_0EF4_exit
fn09BD_0EF4_exit:


// fn09BD_11ED
// Return size: 2
define fn09BD_11ED
fn09BD_11ED_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_11ED
l09BD_11ED:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_0290 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 8<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ds:0x62<16>:word16] = ax
	ax = Mem0[ss:bp + 6<16>:word16]
	Mem0[ds:0x64<16>:byte] = al
	Mem0[ds:0x67<16>:byte] = ah
	cx = Mem0[ss:bp + 0xA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x60<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	si = si ^ si
	SZO = cond(si)
	C = false
	di = Mem0[ss:bp + 8<16>:word16]
	D = false
	// succ:  l09BD_1214
l09BD_1214:
	branch cx == 0<16> l09BD_1216
	// succ:  l09BD_1214_1 l09BD_1216
l09BD_1214_1:
	v15 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v15
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_1214
	// succ:  l09BD_1214
l09BD_1216:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	call fn09BD_0929 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	__sti()
	return
	// succ:  fn09BD_11ED_exit
fn09BD_11ED_exit:


// fn09BD_1222
// Return size: 2
define fn09BD_1222
fn09BD_1222_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1222
l09BD_1222:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_0290 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x60<16>
	ax = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 8<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[es:0x62<16>:word16] = ax
	ax = Mem0[ss:bp + 6<16>:word16]
	Mem0[es:0x64<16>:byte] = al
	Mem0[es:0x67<16>:byte] = ah
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = di ^ di
	SZO = cond(di)
	C = false
	si = Mem0[ss:bp + 8<16>:word16]
	cx = Mem0[ss:bp + 0xA<16>:word16]
	D = false
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_124E
l09BD_124E:
	branch cx == 0<16> l09BD_1250
	// succ:  l09BD_124E_1 l09BD_1250
l09BD_124E_1:
	v16 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v16
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_124E
	// succ:  l09BD_124E
l09BD_1250:
	v18 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl(cx, 1<8>, C)
	C = v18
	// succ:  l09BD_1252
l09BD_1252:
	branch cx == 0<16> l09BD_1254
	// succ:  l09BD_1252_1 l09BD_1254
l09BD_1252_1:
	v19 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v19
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_1252
	// succ:  l09BD_1252
l09BD_1254:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 8<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[es:0x66<16>:word16] = cx
	call fn09BD_0929 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	__sti()
	return
	// succ:  fn09BD_1222_exit
fn09BD_1222_exit:


// fn09BD_1280
// Return size: 2
define fn09BD_1280
fn09BD_1280_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1280
l09BD_1280:
	bx = sp
	di = Mem0[ds:bx + 2<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ds = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	si = 0x20<16>
	D = false
	cx = 0x4E<16>
	__cli()
	// succ:  l09BD_1293
l09BD_1293:
	branch cx == 0<16> l09BD_1295
	// succ:  l09BD_1293_1 l09BD_1295
l09BD_1293_1:
	v14 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v14
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_1293
	// succ:  l09BD_1293
l09BD_1295:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_1280_exit
fn09BD_1280_exit:


// fn09BD_1298
// Return size: 0
define fn09BD_1298
fn09BD_1298_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_1298
	// succ:  l09BD_1298
l09BD_1295_in_fn09BD_1298:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_1298_exit
l09BD_1298:
	bx = sp
	si = Mem0[ds:bx + 2<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	bx = 8<16>
	D = false
	__cli()
	di = 0x20<16>
	// succ:  l09BD_12A9
l09BD_12A9:
	SCZO = cond(Mem0[ds:bx + 0x10BE<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_12BA
	// succ:  l09BD_12B0 l09BD_12BA
l09BD_12B0:
	SCZO = cond(Mem0[ds:si:word16] - Mem0[es:di:word16])
	si = si + 2<i16>
	di = di + 2<i16>
	SCZO = cond(Mem0[ds:si:word16] - Mem0[es:di:word16])
	si = si + 2<i16>
	di = di + 2<i16>
	// succ:  l09BD_12B2
l09BD_12B2:
	bx = bx + 1<16>
	SZO = cond(bx)
	SCZO = cond(bl - 0x2E<8>)
	branch Test(ULE,CZ) l09BD_12A9
	// succ:  l09BD_12B8 l09BD_12A9
l09BD_12B8:
	goto l09BD_1295_in_fn09BD_1298
	// succ:  l09BD_1295_in_fn09BD_1298
l09BD_12BA:
	SCZO = cond(bl - Mem0[ds:0x34<16>:byte])
	branch Test(EQ,Z) l09BD_12B0
	// succ:  l09BD_12C0 l09BD_12B0
l09BD_12C0:
	v17 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v17
	si = si + 2<i16>
	di = di + 2<i16>
	v18 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v18
	si = si + 2<i16>
	di = di + 2<i16>
	goto l09BD_12B2
	// succ:  l09BD_12B2
fn09BD_1298_exit:


// fn09BD_13AD
// Return size: 2
define fn09BD_13AD
fn09BD_13AD_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_13AD
l09BD_13AD:
	call fn09BD_166B (retsize: 2;)
	branch Test(NE,Z) l09BD_1427
	// succ:  l09BD_13B2 l09BD_1427
l09BD_13B2:
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	es = bx
	bl = Mem0[ds:0x34<16>:byte]
	bx = bx << 2<16>
	SCZO = cond(bx)
	dx = cs
	SCZO = cond(dx - Mem0[es:bx + 2<16>:word16])
	branch Test(NE,Z) l09BD_13E4
	// succ:  l09BD_13C5 l09BD_13E4
l09BD_13C5:
	ah = 0x25<8>
	SCZO = cond(Mem0[ds:0x34<16>:byte] - 0x15<8>)
	ds_dx = Mem0[0x9BD<16>:0x12C4<16>:segptr32]
	branch Test(EQ,Z) l09BD_13D8
	// succ:  l09BD_13D3 l09BD_13D8
l09BD_13D3:
	ds_dx = Mem0[ss:0xF84<16>:segptr32]
	// succ:  l09BD_13D8
l09BD_13D8:
	__cli()
	Mem0[es:bx:word16] = dx
	Mem0[es:bx + 2<16>:word16] = ds
	__sti()
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_13AD_exit
l09BD_13E4:
	v17 = cx
	cx = ax
	ax = v17
	// succ:  l09BD_13E5
l09BD_13E5:
	ds = ax
	SCZO = cond(ax - Mem0[ds:bx - 2<16>:word16])
	branch Test(NE,Z) l09BD_1427
	// succ:  l09BD_13EC l09BD_1427
l09BD_13EC:
	SCZO = cond(bx - Mem0[ds:bx - 4<16>:word16])
	branch Test(NE,Z) l09BD_1427
	// succ:  l09BD_13F1 l09BD_1427
l09BD_13F1:
	ax = Mem0[ds:bx - 6<16>:word16]
	SCZO = cond(dx - ax)
	branch Test(EQ,Z) l09BD_13FD
	// succ:  l09BD_13F8 l09BD_13FD
l09BD_13F8:
	bx = Mem0[ds:bx - 8<16>:word16]
	goto l09BD_13E5
	// succ:  l09BD_13E5
l09BD_13FD:
	ax = Mem0[0x9BD<16>:0x12C4<16>:word16]
	__cli()
	Mem0[ds:bx - 8<16>:word16] = ax
	ax = Mem0[0x9BD<16>:0x12C6<16>:word16]
	Mem0[ds:bx - 6<16>:word16] = ax
	__sti()
	ax = Mem0[ds:0<16>:word16]
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_1417
	// succ:  l09BD_1414 l09BD_1417
l09BD_1414:
	ax = Mem0[ds:0x10<16>:word16]
	// succ:  l09BD_1417
l09BD_1417:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_1427
	// succ:  l09BD_141B l09BD_1427
l09BD_141B:
	ax = ax - 0x11<16>
	SCZO = cond(ax)
	ds = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	SCZO = cond(Mem0[ds:1<16>:word16] - ax)
	branch Test(EQ,Z) l09BD_142A
	// succ:  l09BD_1427 l09BD_142A
l09BD_1427:
	ax = 0xFFFF<16>
	// succ:  l09BD_142A
l09BD_142A:
	bx = Mem0[ss:0xCEA<16>:word16]
	bx = bx - 1<16>
	SZO = cond(bx)
	ds = bx
	Mem0[ds:1<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_13AD_exit
fn09BD_13AD_exit:


// fn09BD_1497
// Return size: 2
define fn09BD_1497
fn09BD_1497_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1497
l09BD_1497:
	bx = sp
	ax = Mem0[ds:bx + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2610 (retsize: 2;)
	v7 = cx
	cx = ax
	ax = v7
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = 2<16>
	ah = 0x40<8>
	C = msdos_write_file(bx, cx, ds_dx, out ax)
	return
	// succ:  fn09BD_1497_exit
fn09BD_1497_exit:


// fn09BD_14AC
// Return size: 2
define fn09BD_14AC
fn09BD_14AC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_14AC
l09BD_14AC:
	bx = sp
	v5 = Mem0[ds:0xAC2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v5
	Mem0[ds:0xAC2<16>:word16] = 0x14C4<16>
	v7 = Mem0[ss:bx + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn09BD_229D (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0xAC2<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_14AC_exit
fn09BD_14AC_exit:


// fn09BD_166B
// Return size: 2
define fn09BD_166B
fn09BD_166B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_166B
l09BD_166B:
	v3 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v3
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	dx = Mem0[0x9BD<16>:0x14D4<16>:word16]
	cx = Mem0[0x9BD<16>:0x14D6<16>:word16]
	ds = cx
	cx = cx | dx
	SZO = cond(cx)
	C = false
	branch Test(EQ,Z) l09BD_16B4
	// succ:  l09BD_167E l09BD_16B4
l09BD_167E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = Mem0[es:0xBE<16>:word16]
	cx = cs
	cx = cx - bx
	SCZO = cond(cx)
	branch Test(ULT,C) l09BD_168F
	// succ:  l09BD_168C l09BD_168F
l09BD_168C:
	cx = 0<16>
	// succ:  l09BD_168F
l09BD_168F:
	branch Test(NE,Z) l09BD_169B
	// succ:  l09BD_1691 l09BD_169B
l09BD_1691:
	Mem0[es:0xBC<16>:word16] = dx
	Mem0[es:0xBE<16>:word16] = ds
	// succ:  l09BD_169B
l09BD_169B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	SZO = cond(Mem0[ds:0x1582<16>:word16] & 1<16>)
	C = false
	branch Test(EQ,Z) l09BD_16B4
	// succ:  l09BD_16A5 l09BD_16B4
l09BD_16A5:
	ax = 0x1706<16>
	Mem0[ds:0x9C0<16>:word16] = ax
	ax = 2<16>
	call Mem0[ds:0x155C<16>:ptr32] (retsize: 4;)
	v19 = (cx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	cx = __rcl(cx, 1<8>, C)
	C = v19
	// succ:  l09BD_16B4
l09BD_16B4:
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[0x9BD<16>:0x14D4<16>:word16] = ax
	Mem0[0x9BD<16>:0x14D6<16>:word16] = ax
	SZO = cond(cx & cx)
	C = false
	di = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	sp = sp + 2<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	return
	// succ:  fn09BD_166B_exit
fn09BD_166B_exit:


// fn09BD_17D8
// Return size: 2
define fn09BD_17D8
fn09BD_17D8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_17D8
l09BD_17D8:
	ax = 0xAAC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1497 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_17D8_exit
fn09BD_17D8_exit:


// fn09BD_18A4
// Return size: 2
define fn09BD_18A4
fn09BD_18A4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_18A4
l09BD_18A4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	v5 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v5
	ax = Mem0[ds:0x11F8<16>:word16]
	ax = ax + 0x1190<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_25DE (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_18A4_exit
fn09BD_18A4_exit:


// fn09BD_18BA
// Return size: 2
define fn09BD_18BA
fn09BD_18BA_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_18BA
l09BD_18BA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2610 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(ax - Mem0[ds:0x11F8<16>:word16])
	branch Test(NE,Z) l09BD_18D2
	// succ:  l09BD_18CB l09BD_18D2
l09BD_18CB:
	v10 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn09BD_18A4 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_18D2
l09BD_18D2:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_18BA_exit
fn09BD_18BA_exit:


// fn09BD_18D6
// Return size: 2
define fn09BD_18D6
fn09BD_18D6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_18D6
l09BD_18D6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	ax = Mem0[ss:bp + 4<16>:word16]
	ax = ax - 0x61<16>
	SCZO = cond(ax)
	SCZO = cond(ax - 0x19<16>)
	branch Test(UGT,CZ) l09BD_18EC
	// succ:  l09BD_18E4 l09BD_18EC
l09BD_18E4:
	ax = Mem0[ss:bp + 4<16>:word16]
	ax = ax - 0x20<16>
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_18D6_exit
l09BD_18EC:
	ax = Mem0[ss:bp + 4<16>:word16]
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_18D6_exit
fn09BD_18D6_exit:


// fn09BD_18F1
// Return size: 2
define fn09BD_18F1
fn09BD_18F1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_18F1
l09BD_18F1:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	goto l09BD_1906
	// succ:  l09BD_1906
l09BD_18F9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_18D6 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:bp + 4<16>:word16]
	v14 = Mem0[ss:bp + 4<16>:word16] + 1<16>
	Mem0[ss:bp + 4<16>:word16] = v14
	SZO = cond(v14)
	Mem0[ds:bx:byte] = al
	// succ:  l09BD_1906
l09BD_1906:
	bx = Mem0[ss:bp + 6<16>:word16]
	v7 = Mem0[ss:bp + 6<16>:word16] + 1<16>
	Mem0[ss:bp + 6<16>:word16] = v7
	SZO = cond(v7)
	al = Mem0[ds:bx:byte]
	ax = CONVERT(al, int8, int16)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_18F9
	// succ:  l09BD_1913 l09BD_18F9
l09BD_1913:
	bx = Mem0[ss:bp + 4<16>:word16]
	Mem0[ds:bx:byte] = 0<8>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_18F1_exit
fn09BD_18F1_exit:


// fn09BD_191D
// Return size: 2
define fn09BD_191D
fn09BD_191D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_191D
l09BD_191D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_18F1 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2610 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 2<16>:word16] = ax
	Mem0[ds:0x11F8<16>:word16] = ax
	goto l09BD_1954
	// succ:  l09BD_1954
l09BD_193F:
	bx = Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(Mem0[ds:bx + 0x1190<16>:byte] - 0x5C<8>)
	branch Test(EQ,Z) l09BD_1959
	// succ:  l09BD_1949 l09BD_1959
l09BD_1949:
	SCZO = cond(Mem0[ds:bx + 0x1190<16>:byte] - 0x2E<8>)
	branch Test(NE,Z) l09BD_1954
	// succ:  l09BD_1950 l09BD_1954
l09BD_1950:
	Mem0[ds:0x11F8<16>:word16] = bx
	// succ:  l09BD_1954
l09BD_1954:
	v10 = Mem0[ss:bp - 2<16>:word16] - 1<16>
	Mem0[ss:bp - 2<16>:word16] = v10
	SZO = cond(v10)
	branch Test(NS,S) l09BD_193F
	// succ:  l09BD_1959 l09BD_193F
l09BD_1959:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_191D_exit
fn09BD_191D_exit:


// fn09BD_195D
// Return size: 2
define fn09BD_195D
fn09BD_195D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_195D
l09BD_195D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<16>
	SCZO = cond(sp)
	goto l09BD_197B
	// succ:  l09BD_197B
l09BD_1965:
	Mem0[ss:bp - 4<16>:word16] = bx
	v10 = Mem0[ss:bp + 6<16>:word16] + 1<16>
	Mem0[ss:bp + 6<16>:word16] = v10
	SZO = cond(v10)
	al = Mem0[ds:bx:byte]
	bx = Mem0[ss:bp + 4<16>:word16]
	v13 = Mem0[ss:bp + 4<16>:word16] + 1<16>
	Mem0[ss:bp + 4<16>:word16] = v13
	SZO = cond(v13)
	SCZO = cond(Mem0[ds:bx:byte] - al)
	branch Test(EQ,Z) l09BD_197B
	// succ:  l09BD_1977 l09BD_197B
l09BD_1977:
	ax = ax - ax
	SCZO = cond(ax)
	goto l09BD_1986
	// succ:  l09BD_1986
l09BD_197B:
	bx = Mem0[ss:bp + 6<16>:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0<8>)
	branch Test(NE,Z) l09BD_1965
	// succ:  l09BD_1983 l09BD_1965
l09BD_1983:
	ax = 1<16>
	// succ:  l09BD_1986
l09BD_1986:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_195D_exit
fn09BD_195D_exit:


// fn09BD_199A
// Return size: 2
define fn09BD_199A
fn09BD_199A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_199A
l09BD_199A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 16<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x9B4<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	bx = dx
	Mem0[ds:0x8E2<16>:word16] = ax
	dx = ax
	si = bx
	Mem0[ds:0x8E4<16>:byte] = bl
	Mem0[ss:bp - 8<16>:word16] = dx
	Mem0[ss:bp - 6<16>:word16] = si
	dx = dx + 0x8C0<16>
	SCZO = cond(dx)
	si = si + 0<16> + C
	SCZO = cond(si)
	Mem0[ds:0x976<16>:word16] = dx
	Mem0[ds:0x978<16>:word16] = si
	Mem0[ds:0x8C8<16>:word16] = 0x9F<16>
	Mem0[ss:bp - 0xC<16>:word16] = dx
	Mem0[ss:bp - 0xA<16>:word16] = si
	Mem0[ds:0x8CA<16>:word16] = dx
	al = Mem0[ss:bp - 0xA<16>:byte]
	Mem0[ds:0x8CC<16>:byte] = al
	ax = 0x960<16>
	ax = ax - 0x8C0<16>
	SCZO = cond(ax)
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 0xC<16>:word16]
	SCZO = cond(ax)
	dx = dx + si + C
	SCZO = cond(dx)
	cx = ax
	bx = dx
	Mem0[ds:0x912<16>:word16] = ax
	dx = ax
	si = bx
	Mem0[ds:0x914<16>:byte] = bl
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x8CE<16>:word16] = ax
	Mem0[ds:0x916<16>:word16] = ax
	ax = 0x960<16>
	ax = ax - 0xC0<16>
	SCZO = cond(ax)
	dx = dx - ax
	SCZO = cond(dx)
	si = si - 0<16> - C
	SCZO = cond(si)
	Mem0[ss:bp - 0xE<16>:word16] = si
	Mem0[ds:0x8D2<16>:word16] = dx
	al = Mem0[ss:bp - 0xE<16>:byte]
	Mem0[ds:0x8D4<16>:byte] = al
	ax = Mem0[ds:0x9B6<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	bx = dx
	Mem0[ds:0x90A<16>:word16] = ax
	Mem0[ds:0x8DA<16>:word16] = ax
	Mem0[ds:0x90C<16>:byte] = bl
	Mem0[ds:0x8DC<16>:byte] = bl
	ax = 0xD74<16>
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax + Mem0[ss:bp - 8<16>:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 6<16>:word16] + C
	SCZO = cond(dx)
	cx = ax
	bx = dx
	Mem0[ds:0x91A<16>:word16] = ax
	Mem0[ds:0x91C<16>:byte] = bl
	ax = Mem0[ds:0xA10<16>:word16]
	dx = Mem0[ds:0xA12<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	Mem0[ss:bp - 2<16>:word16] = dx
	Mem0[ds:0x932<16>:word16] = ax
	al = Mem0[ss:bp - 2<16>:byte]
	Mem0[ds:0x934<16>:byte] = al
	Mem0[ds:0xD70<16>:word16] = 0x80<16>
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(LT,SO) l09BD_1A78
	// succ:  l09BD_1A72 l09BD_1A78
l09BD_1A72:
	Mem0[ds:0x8FE<16>:word16] = 0x8F<16>
	// succ:  l09BD_1A78
l09BD_1A78:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_199A_exit
fn09BD_199A_exit:


// fn09BD_1D06
// Return size: 2
define fn09BD_1D06
fn09BD_1D06_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1D06
l09BD_1D06:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 86<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_1D16
	// succ:  l09BD_1D11 l09BD_1D16
l09BD_1D11:
	ax = ax - ax
	SCZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_1D06_exit
l09BD_1D16:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x30<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	ax = bp - 0x56<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2766 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = bp - 0x1E<16>
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = ss
	ax = ss
	dx = dx - dx
	SCZO = cond(dx)
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	ax = ax + Mem0[ss:bp - 0x1A<16>:word16]
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	bx = dx
	Mem0[ss:bp - 0x44<16>:word16] = ax
	Mem0[ss:bp - 0x42<16>:byte] = bl
	Mem0[ss:bp - 0x3A<16>:byte] = 0xC0<8>
	Mem0[ss:bp - 0x38<16>:word16] = 0x8000<16>
	al = 0xF2<8>
	Mem0[ss:bp - 0x39<16>:byte] = al
	Mem0[ss:bp - 0x41<16>:byte] = al
	Mem0[ss:bp - 0x11<16>:byte] = 0x87<8>
	ax = 1<16>
	Mem0[ss:bp - 0x46<16>:word16] = ax
	Mem0[ss:bp - 0x3E<16>:word16] = ax
	Mem0[ss:bp - 0xE<16>:word16] = ax
	ax = bp - 0x56<16>
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = ss
	Mem0[ss:bp - 0xA<16>:word16] = ax
	ax = ss
	Mem0[ss:bp - 0x26<16>:word16] = ax
	Mem0[ss:bp - 0x1E<16>:word16] = 0xFE<16>
	ax = bp - 0x26<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x12<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x15<16>
	call fn09BD_262C (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0x11EC<16>:word16]
	dx = 0xF000<16>
	Mem0[ss:bp - 0x16<16>:word16] = ax
	Mem0[ss:bp - 0x14<16>:word16] = dx
	es = dx
	bx = ax
	cx = Mem0[ss:bp + 4<16>:word16]
	v18 = Mem0[es:bx + 4<16>:word16] - cx
	Mem0[es:bx + 4<16>:word16] = v18
	SCZO = cond(v18)
	si = Mem0[es:bx + 6<16>:word16]
	Mem0[ss:bp - 0x1C<16>:word16] = si
	v19 = Mem0[es:bx + 6<16>:word16] - cx
	Mem0[es:bx + 6<16>:word16] = v19
	SCZO = cond(v19)
	Mem0[ss:bp - 0x1E<16>:word16] = 0xFC<16>
	Mem0[ss:bp - 0x11<16>:byte] = 0x87<8>
	Mem0[ss:bp - 0xE<16>:word16] = 1<16>
	ax = bp - 0x26<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x12<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x15<16>
	call fn09BD_262C (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x1C<16>:word16]
	es_bx = Mem0[ss:bp - 0x16<16>:segptr32]
	ax = ax - Mem0[es:bx + 6<16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp + 4<16>:word16] = ax
	v21 = Mem0[ds:0x120A<16>:word16] - ax
	Mem0[ds:0x120A<16>:word16] = v21
	SCZO = cond(v21)
	ax = Mem0[ds:0x120A<16>:word16]
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_1D06_exit
fn09BD_1D06_exit:


// fn09BD_1DEC
// Return size: 2
define fn09BD_1DEC
fn09BD_1DEC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1DEC
l09BD_1DEC:
	bx = 0x10<16>
	// succ:  l09BD_1DEF
l09BD_1DEF:
	bx = bx - 1<16>
	SZO = cond(bx)
	bx = bx - 1<16>
	SZO = cond(bx)
	branch Test(SG,S) l09BD_1E11
	// succ:  l09BD_1DF3 l09BD_1E11
l09BD_1DF3:
	dx = Mem0[ds:bx + 0xADC<16>:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_1DEF
	// succ:  l09BD_1DFB l09BD_1DEF
l09BD_1DFB:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	ah = 0xD<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ah = 0xA<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:bx + 0xADC<16>:word16] = 0<16>
	goto l09BD_1DEF
	// succ:  l09BD_1DEF
l09BD_1E11:
	return
	// succ:  fn09BD_1DEC_exit
fn09BD_1DEC_exit:


// fn09BD_1F19
// Return size: 2
define fn09BD_1F19
fn09BD_1F19_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_1F19
l09BD_1F19:
	ax = 0x170B<16>
	ax = ax - 0x118E<16>
	SCZO = cond(ax)
	ax = ax << 4<16>
	SCZO = cond(ax)
	return
	// succ:  fn09BD_1F19_exit
fn09BD_1F19_exit:


// fn09BD_2071
// Return size: 0
define fn09BD_2071
fn09BD_2071_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2071
l09BD_2071:
	call fn09BD_0290 (retsize: 2;)
	call fn0070_5401 (retsize: 0;)
	return
	// succ:  fn09BD_2071_exit
fn09BD_2071_exit:


// fn09BD_229D
// Return size: 2
define fn09BD_229D
fn09BD_229D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_229D
l09BD_229D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x9C<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<16>:word16] = 0<16>
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_22B9
	// succ:  l09BD_22B1 l09BD_22B9
l09BD_22B1:
	Mem0[ss:bp - 2<16>:word16] = 1<16>
	v9 = -Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp + 4<16>:word16] = v9
	SCZO = cond(v9)
	C = v9 == 0<16>
	// succ:  l09BD_22B9
l09BD_22B9:
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp - 0x9A<16>:word16] = ax
	si = bp - 0x98<16>
	SCZO = cond(Mem0[ds:0xF21<16>:byte] - 1<8>)
	branch Test(EQ,Z) l09BD_231D
	// succ:  l09BD_22CB l09BD_231D
l09BD_22CB:
	Mem0[ss:bp - 0x98<16>:byte] = 0x5B<8>
	si = bp - 0x97<16>
	// succ:  l09BD_22D4
l09BD_22D4:
	si = si + 1<16>
	SZO = cond(si)
	cx = 0xA<16>
	ax = Mem0[ss:bp - 0x9A<16>:word16]
	dx_ax = CONVERT(ax, int16, int32)
	v18 = dx_ax
	dx = CONVERT(v18 % cx, int32, int16)
	ax = CONVERT(v18 / cx, word16, int16)
	SCZO = cond(ax)
	Mem0[ss:bp - 0x9A<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_22D4
	// succ:  l09BD_22E7 l09BD_22D4
l09BD_22E7:
	di = si
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp - 0x9A<16>:word16] = ax
	// succ:  l09BD_22F0
l09BD_22F0:
	dx_ax = CONVERT(ax, int16, int32)
	v19 = dx_ax
	dx = CONVERT(v19 % cx, int32, int16)
	ax = CONVERT(v19 / cx, word16, int16)
	SCZO = cond(ax)
	bx = dx
	al = Mem0[ds:bx + 0xAB0<16>:byte]
	di = di - 1<16>
	SZO = cond(di)
	Mem0[ds:di:byte] = al
	ax = Mem0[ss:bp - 0x9A<16>:word16]
	dx_ax = CONVERT(ax, int16, int32)
	v22 = dx_ax
	dx = CONVERT(v22 % cx, int32, int16)
	ax = CONVERT(v22 / cx, word16, int16)
	SCZO = cond(ax)
	Mem0[ss:bp - 0x9A<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_22F0
	// succ:  l09BD_230B l09BD_22F0
l09BD_230B:
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si - 1<16>:byte] = 0x5D<8>
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si - 1<16>:byte] = 0x20<8>
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si - 1<16>:byte] = 0x20<8>
	Mem0[ds:si:byte] = 0<8>
	// succ:  l09BD_231D
l09BD_231D:
	di = 0x15E8<16>
	goto l09BD_233D
	// succ:  l09BD_233D
l09BD_2322:
	SCZO = cond(Mem0[ds:0xF22<16>:word16] - di)
	branch Test(ULE,CZ) l09BD_2349
	// succ:  l09BD_2328 l09BD_2349
l09BD_2328:
	SCZO = cond(ax - Mem0[ss:bp + 4<16>:word16])
	branch Test(NE,Z) l09BD_2336
	// succ:  l09BD_232D l09BD_2336
l09BD_232D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_25DE (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	goto l09BD_2349
	// succ:  l09BD_2349
l09BD_2336:
	di = di + 1<16>
	SZO = cond(di)
	SCZO = cond(Mem0[ds:di - 1<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_2336
	// succ:  l09BD_233D l09BD_2336
l09BD_233D:
	ax = Mem0[ds:di:word16]
	di = di + 1<16>
	SZO = cond(di)
	di = di + 1<16>
	SZO = cond(di)
	Mem0[ss:bp - 0x9A<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l09BD_2322
	// succ:  l09BD_2349 l09BD_2322
l09BD_2349:
	SCZO = cond(Mem0[ss:bp - 2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_235E
	// succ:  l09BD_234F l09BD_235E
l09BD_234F:
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x98<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call SEQ(0x9BD<16>, Mem0[ds:0xE6C<16>:word16]) (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_235E
l09BD_235E:
	ax = ax - ax
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x98<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call SEQ(0x9BD<16>, Mem0[ds:0xE6C<16>:word16]) (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_229D_exit
fn09BD_229D_exit:


// fn09BD_2372
// Return size: 2
define fn09BD_2372
fn09BD_2372_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2372
l09BD_2372:
	di = 0x800<16>
	ss = di
	sp = sp + 0x120E<16>
	SCZO = cond(sp)
	si = 0x9BD<16>
	si = si - di
	SCZO = cond(si)
	ax = si
	cl = 4<8>
	ax = ax << cl
	SCZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[ss:0xCE4<16>:word16] = ax
	Mem0[ss:0xCDA<16>:word16] = sp
	si = 0x170B<16>
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:2<16>:word16] = si
	bx = es
	bx = bx - si
	SCZO = cond(bx)
	bx = -bx
	SCZO = cond(bx)
	C = bx == 0<16>
	ah = 0x4A<8>
	C = msdos_resize_memory_block(es, bx, out bx)
	Mem0[ss:0xCEA<16>:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	D = false
	di = 0x1186<16>
	cx = 0x1210<16>
	cx = cx - di
	SCZO = cond(cx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_23B4
l09BD_23B4:
	branch cx == 0<16> l09BD_23B6
	// succ:  l09BD_23B4_1 l09BD_23B6
l09BD_23B4_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_23B4
	// succ:  l09BD_23B4
l09BD_23B6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ah = 0x30<8>
	al = msdos_get_dos_version(out ah)
	Mem0[ds:0xCEC<16>:word16] = ax
	bx = 4<16>
	// succ:  l09BD_23C2
l09BD_23C2:
	ax = 0x4400<16>
	C = msdos_ioctl_get_device_info(bx, out dx)
	branch Test(ULT,C) l09BD_23D3
	// succ:  l09BD_23C9 l09BD_23D3
l09BD_23C9:
	SZO = cond(dl & 0x80<8>)
	C = false
	branch Test(EQ,Z) l09BD_23D3
	// succ:  l09BD_23CE l09BD_23D3
l09BD_23CE:
	v21 = Mem0[ds:bx + 0xCF8<16>:byte] | 0x40<8>
	Mem0[ds:bx + 0xCF8<16>:byte] = v21
	SZO = cond(Mem0[ds:bx + 0xCF8<16>:byte])
	C = false
	// succ:  l09BD_23D3
l09BD_23D3:
	bx = bx - 1<16>
	SZO = cond(bx)
	branch Test(NS,S) l09BD_23C2
	// succ:  l09BD_23D6 l09BD_23C2
l09BD_23D6:
	call fn09BD_2450 (retsize: 2;)
	bp = bp ^ bp
	SZO = cond(bp)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	v24 = Mem0[ds:0xCF4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	v25 = Mem0[ds:0xCF2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	v26 = Mem0[ds:0xCF0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn09BD_2D88 (retsize: 2;)
	return
	// succ:  fn09BD_2372_exit
fn09BD_2372_exit:


// fn09BD_242E
// Return size: 2
define fn09BD_242E
fn09BD_242E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_242E
l09BD_242E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	v6 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	call fn09BD_65A3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 2<16>:word16] = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	branch Test(EQ,Z) l09BD_2446
	// succ:  l09BD_2441 l09BD_2446
l09BD_2441:
	ax = Mem0[ss:bp - 2<16>:word16]
	goto l09BD_2448
	// succ:  l09BD_2448
l09BD_2446:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l09BD_2448
l09BD_2448:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_242E_exit
fn09BD_242E_exit:


// fn09BD_2450
// Return size: 0
define fn09BD_2450
fn09BD_2450_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2450
l09BD_2450:
	Mem0[ds:0xD0E<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ah = 0x30<8>
	al = msdos_get_dos_version(out ah)
	Mem0[ds:0xCEC<16>:word16] = ax
	dx = 1<16>
	SCZO = cond(al - 2<8>)
	branch Test(EQ,Z) l09BD_248B
	// succ:  l09BD_2462 l09BD_248B
l09BD_2462:
	es = Mem0[ds:0xCEA<16>:selector]
	es = Mem0[es:0x2C<16>:selector]
	Mem0[ds:0xCF8<16>:word16] = es
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	cx = 0x8000<16>
	di = di ^ di
	SZO = cond(di)
	C = false
	// succ:  l09BD_2477
l09BD_2477:
	branch cx == 0<16> l09BD_2479
	// succ:  l09BD_2477_1 l09BD_2479
l09BD_2477_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_2477
	// succ:  l09BD_2479 l09BD_2477
l09BD_2479:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	branch Test(NE,Z) l09BD_2477
	// succ:  l09BD_247C l09BD_2477
l09BD_247C:
	di = di + 1<16>
	SZO = cond(di)
	di = di + 1<16>
	SZO = cond(di)
	Mem0[ds:0xCF6<16>:word16] = di
	cx = 0xFFFF<16>
	// succ:  l09BD_2485
l09BD_2485:
	branch cx == 0<16> l09BD_2487
	// succ:  l09BD_2485_2 l09BD_2487
l09BD_2485_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_2485
	// succ:  l09BD_2487 l09BD_2485
l09BD_2487:
	cx = ~cx
	dx = cx
	// succ:  l09BD_248B
l09BD_248B:
	di = 1<16>
	si = 0x81<16>
	ds = Mem0[ds:0xCEA<16>:selector]
	// succ:  l09BD_2495
l09BD_2495:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l09BD_2495
	// succ:  l09BD_249A l09BD_2495
l09BD_249A:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l09BD_2495
	// succ:  l09BD_249E l09BD_2495
l09BD_249E:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24A2 l09BD_2511
l09BD_24A2:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24A6 l09BD_2511
l09BD_24A6:
	di = di + 1<16>
	SZO = cond(di)
	// succ:  l09BD_24A7
l09BD_24A7:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_24A8
l09BD_24A8:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l09BD_2495
	// succ:  l09BD_24AD l09BD_2495
l09BD_24AD:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l09BD_2495
	// succ:  l09BD_24B1 l09BD_2495
l09BD_24B1:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24B5 l09BD_2511
l09BD_24B5:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24B9 l09BD_2511
l09BD_24B9:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_24E1
	// succ:  l09BD_24BD l09BD_24E1
l09BD_24BD:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_24C4
	// succ:  l09BD_24C1 l09BD_24C4
l09BD_24C1:
	dx = dx + 1<16>
	SZO = cond(dx)
	goto l09BD_24A8
	// succ:  l09BD_24A8
l09BD_24C4:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_24C6
l09BD_24C6:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_24C6
	// succ:  l09BD_24CC l09BD_24C6
l09BD_24CC:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_24D4
	// succ:  l09BD_24D0 l09BD_24D4
l09BD_24D0:
	dx = dx + cx
	SCZO = cond(dx)
	goto l09BD_24A7
	// succ:  l09BD_24A7
l09BD_24D4:
	ax = cx
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZO = cond(al & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_24A8
	// succ:  l09BD_24DE l09BD_24A8
l09BD_24DE:
	goto l09BD_24E1
	// succ:  l09BD_24E1
l09BD_24E0:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_24E1
l09BD_24E1:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24E6 l09BD_2511
l09BD_24E6:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_2511
	// succ:  l09BD_24EA l09BD_2511
l09BD_24EA:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_24A8
	// succ:  l09BD_24EE l09BD_24A8
l09BD_24EE:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_24F5
	// succ:  l09BD_24F2 l09BD_24F5
l09BD_24F2:
	dx = dx + 1<16>
	SZO = cond(dx)
	goto l09BD_24E1
	// succ:  l09BD_24E1
l09BD_24F5:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_24F7
l09BD_24F7:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_24F7
	// succ:  l09BD_24FD l09BD_24F7
l09BD_24FD:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_2505
	// succ:  l09BD_2501 l09BD_2505
l09BD_2501:
	dx = dx + cx
	SCZO = cond(dx)
	goto l09BD_24E0
	// succ:  l09BD_24E0
l09BD_2505:
	ax = cx
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	dx = dx + cx + C
	SCZO = cond(dx)
	SZO = cond(al & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_24E1
	// succ:  l09BD_250F l09BD_24E1
l09BD_250F:
	goto l09BD_24A8
	// succ:  l09BD_24A8
l09BD_2511:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0xCF0<16>:word16] = di
	dx = dx + di
	SCZO = cond(dx)
	di = di + 1<16>
	SZO = cond(di)
	di = di << 1<16>
	SCZO = cond(di)
	dx = dx + di
	SCZO = cond(dx)
	dx = dx + 1<16>
	SZO = cond(dx)
	dl = dl & 0xFE<8>
	SZO = cond(dl)
	C = false
	sp = sp - dx
	SCZO = cond(sp)
	ax = sp
	Mem0[ds:0xCF2<16>:word16] = ax
	bx = ax
	di = di + bx
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ss:bx:word16] = di
	bx = bx + 1<16>
	SZO = cond(bx)
	bx = bx + 1<16>
	SZO = cond(bx)
	ds_si = Mem0[ds:0xCF6<16>:segptr32]
	// succ:  l09BD_2538
l09BD_2538:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l09BD_2538
	// succ:  l09BD_253E l09BD_2538
l09BD_253E:
	ds = Mem0[ss:0xCEA<16>:selector]
	si = 0x81<16>
	goto l09BD_254B
	// succ:  l09BD_254B
l09BD_2548:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l09BD_254B
l09BD_254B:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l09BD_254B
	// succ:  l09BD_2550 l09BD_254B
l09BD_2550:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l09BD_254B
	// succ:  l09BD_2554 l09BD_254B
l09BD_2554:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_25D4
	// succ:  l09BD_2558 l09BD_25D4
l09BD_2558:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_25D4
	// succ:  l09BD_255C l09BD_25D4
l09BD_255C:
	Mem0[ss:bx:word16] = di
	bx = bx + 1<16>
	SZO = cond(bx)
	bx = bx + 1<16>
	SZO = cond(bx)
	// succ:  l09BD_2561
l09BD_2561:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_2562
l09BD_2562:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l09BD_2548
	// succ:  l09BD_2567 l09BD_2548
l09BD_2567:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l09BD_2548
	// succ:  l09BD_256B l09BD_2548
l09BD_256B:
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_25D1
	// succ:  l09BD_256F l09BD_25D1
l09BD_256F:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_25D1
	// succ:  l09BD_2573 l09BD_25D1
l09BD_2573:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_259E
	// succ:  l09BD_2577 l09BD_259E
l09BD_2577:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_257E
	// succ:  l09BD_257B l09BD_257E
l09BD_257B:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l09BD_2562
	// succ:  l09BD_2562
l09BD_257E:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_2580
l09BD_2580:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_2580
	// succ:  l09BD_2586 l09BD_2580
l09BD_2586:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_2590
	// succ:  l09BD_258A l09BD_2590
l09BD_258A:
	al = 0x5C<8>
	// succ:  l09BD_258C
l09BD_258C:
	branch cx == 0<16> l09BD_258E
	// succ:  l09BD_258C_1 l09BD_258E
l09BD_258C_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_258C
	// succ:  l09BD_258C
l09BD_258E:
	goto l09BD_2561
	// succ:  l09BD_2561
l09BD_2590:
	al = 0x5C<8>
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_2594
l09BD_2594:
	branch cx == 0<16> l09BD_2596
	// succ:  l09BD_2594_1 l09BD_2596
l09BD_2594_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_2594
	// succ:  l09BD_2594
l09BD_2596:
	branch Test(UGE,C) l09BD_259E
	// succ:  l09BD_2598 l09BD_259E
l09BD_2598:
	al = 0x22<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l09BD_2562
	// succ:  l09BD_2562
l09BD_259D:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_259E
l09BD_259E:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0xD<8>)
	branch Test(EQ,Z) l09BD_25D1
	// succ:  l09BD_25A3 l09BD_25D1
l09BD_25A3:
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_25D1
	// succ:  l09BD_25A7 l09BD_25D1
l09BD_25A7:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_2562
	// succ:  l09BD_25AB l09BD_2562
l09BD_25AB:
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_25B2
	// succ:  l09BD_25AF l09BD_25B2
l09BD_25AF:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l09BD_259E
	// succ:  l09BD_259E
l09BD_25B2:
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_25B4
l09BD_25B4:
	cx = cx + 1<16>
	SZO = cond(cx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(EQ,Z) l09BD_25B4
	// succ:  l09BD_25BA l09BD_25B4
l09BD_25BA:
	SCZO = cond(al - 0x22<8>)
	branch Test(EQ,Z) l09BD_25C4
	// succ:  l09BD_25BE l09BD_25C4
l09BD_25BE:
	al = 0x5C<8>
	// succ:  l09BD_25C0
l09BD_25C0:
	branch cx == 0<16> l09BD_25C2
	// succ:  l09BD_25C0_1 l09BD_25C2
l09BD_25C0_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_25C0
	// succ:  l09BD_25C0
l09BD_25C2:
	goto l09BD_259D
	// succ:  l09BD_259D
l09BD_25C4:
	al = 0x5C<8>
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_25C8
l09BD_25C8:
	branch cx == 0<16> l09BD_25CA
	// succ:  l09BD_25C8_1 l09BD_25CA
l09BD_25C8_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_25C8
	// succ:  l09BD_25C8
l09BD_25CA:
	branch Test(UGE,C) l09BD_2562
	// succ:  l09BD_25CC l09BD_2562
l09BD_25CC:
	al = 0x22<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	goto l09BD_259E
	// succ:  l09BD_259E
l09BD_25D1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	// succ:  l09BD_25D4
l09BD_25D4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:bx:word16] = 0<16>
	call Mem0[ds:0xD0E<16>:word16] (retsize: 0;)
	return
	// succ:  fn09BD_2450_exit
fn09BD_2450_exit:


// fn09BD_25DE
// Return size: 2
define fn09BD_25DE
fn09BD_25DE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_25DE
l09BD_25DE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	si = Mem0[ss:bp + 6<16>:word16]
	di = si
	ax = ds
	es = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_25F3
l09BD_25F3:
	branch cx == 0<16> l09BD_25F5
	// succ:  l09BD_25F3_1 l09BD_25F5
l09BD_25F3_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_25F3
	// succ:  l09BD_25F5 l09BD_25F3
l09BD_25F5:
	cx = ~cx
	di = Mem0[ss:bp + 4<16>:word16]
	ax = di
	SZO = cond(al & 1<8>)
	C = false
	branch Test(EQ,Z) l09BD_2602
	// succ:  l09BD_2600 l09BD_2602
l09BD_2600:
	v18 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v18
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	SZO = cond(cx)
	// succ:  l09BD_2602
l09BD_2602:
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_2604
l09BD_2604:
	branch cx == 0<16> l09BD_2606
	// succ:  l09BD_2604_1 l09BD_2606
l09BD_2604_1:
	v19 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v19
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_2604
	// succ:  l09BD_2604
l09BD_2606:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l09BD_2608
l09BD_2608:
	branch cx == 0<16> l09BD_260A
	// succ:  l09BD_2608_1 l09BD_260A
l09BD_2608_1:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_2608
	// succ:  l09BD_2608
l09BD_260A:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_25DE_exit
fn09BD_25DE_exit:


// fn09BD_2610
// Return size: 2
define fn09BD_2610
fn09BD_2610_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2610
l09BD_2610:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	ax = ds
	es = ax
	di = Mem0[ss:bp + 4<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_2621
l09BD_2621:
	branch cx == 0<16> l09BD_2623
	// succ:  l09BD_2621_1 l09BD_2623
l09BD_2621_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_2621
	// succ:  l09BD_2623 l09BD_2621
l09BD_2623:
	cx = ~cx
	cx = cx - 1<16>
	SZO = cond(cx)
	v16 = cx
	cx = ax
	ax = v16
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2610_exit
fn09BD_2610_exit:


// fn09BD_262C
// Return size: 2
define fn09BD_262C
fn09BD_262C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_262C
l09BD_262C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 0xC<16>:byte] = 0xCD<8>
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp - 0xB<16>:byte] = al
	SCZO = cond(al - 0x25<8>)
	branch Test(EQ,Z) l09BD_264D
	// succ:  l09BD_2643 l09BD_264D
l09BD_2643:
	SCZO = cond(al - 0x26<8>)
	branch Test(EQ,Z) l09BD_264D
	// succ:  l09BD_2647 l09BD_264D
l09BD_2647:
	Mem0[ss:bp - 0xA<16>:byte] = 0xCB<8>
	goto l09BD_2659
	// succ:  l09BD_2659
l09BD_264D:
	Mem0[ss:bp - 8<16>:byte] = 0xCB<8>
	Mem0[ss:bp - 9<16>:byte] = 0x44<8>
	Mem0[ss:bp - 0xA<16>:byte] = 0x44<8>
	// succ:  l09BD_2659
l09BD_2659:
	Mem0[ss:bp - 0xE<16>:word16] = ss
	ax = bp - 0xC<16>
	Mem0[ss:bp - 0x10<16>:word16] = ax
	di = Mem0[ss:bp + 6<16>:word16]
	ax = Mem0[ds:di:word16]
	bx = Mem0[ds:di + 2<16>:word16]
	cx = Mem0[ds:di + 4<16>:word16]
	dx = Mem0[ds:di + 6<16>:word16]
	si = Mem0[ds:di + 8<16>:word16]
	v15 = Mem0[ds:di + 0xA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	di = Mem0[ss:bp + 0xA<16>:word16]
	es = Mem0[ds:di:selector]
	ds = Mem0[ds:di + 6<16>:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	call Mem0[ss:bp - 0x10<16>:ptr32] (retsize: 4;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	D = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:bp + 0xA<16>:word16]
	Mem0[ds:di:word16] = es
	Mem0[ds:di + 6<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:bp + 8<16>:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 2<16>:word16] = bx
	Mem0[ds:di + 4<16>:word16] = cx
	Mem0[ds:di + 6<16>:word16] = dx
	Mem0[ds:di + 8<16>:word16] = si
	Mem0[ds:di + 0xA<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l09BD_26AB
	// succ:  l09BD_26A7 l09BD_26AB
l09BD_26A7:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l09BD_26B3
	// succ:  l09BD_26B3
l09BD_26AB:
	call fn09BD_27CE (retsize: 2;)
	si = 1<16>
	ax = Mem0[ds:di:word16]
	// succ:  l09BD_26B3
l09BD_26B3:
	Mem0[ds:di + 0xC<16>:word16] = si
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_262C_exit
fn09BD_262C_exit:


// fn09BD_26C0
// Return size: 2
define fn09BD_26C0
fn09BD_26C0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_26C0
l09BD_26C0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 4<16>:word16]
	ax = Mem0[ds:di:word16]
	bx = Mem0[ds:di + 2<16>:word16]
	cx = Mem0[ds:di + 4<16>:word16]
	dx = Mem0[ds:di + 6<16>:word16]
	si = Mem0[ds:di + 8<16>:word16]
	di = Mem0[ds:di + 0xA<16>:word16]
	__syscall(0x21<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 6<16>:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 2<16>:word16] = bx
	Mem0[ds:di + 4<16>:word16] = cx
	Mem0[ds:di + 6<16>:word16] = dx
	Mem0[ds:di + 8<16>:word16] = si
	Mem0[ds:di + 0xA<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l09BD_26F6
	// succ:  l09BD_26F2 l09BD_26F6
l09BD_26F2:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l09BD_26FE
	// succ:  l09BD_26FE
l09BD_26F6:
	call fn09BD_27CE (retsize: 2;)
	si = 1<16>
	ax = Mem0[ds:di:word16]
	// succ:  l09BD_26FE
l09BD_26FE:
	Mem0[ds:di + 0xC<16>:word16] = si
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_26C0_exit
fn09BD_26C0_exit:


// fn09BD_2708
// Return size: 2
define fn09BD_2708
fn09BD_2708_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2708
l09BD_2708:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 4<16>:word16]
	ax = Mem0[ds:di:word16]
	bx = Mem0[ds:di + 2<16>:word16]
	cx = Mem0[ds:di + 4<16>:word16]
	dx = Mem0[ds:di + 6<16>:word16]
	si = Mem0[ds:di + 8<16>:word16]
	v12 = Mem0[ds:di + 0xA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	di = Mem0[ss:bp + 8<16>:word16]
	es = Mem0[ds:di:selector]
	ds = Mem0[ds:di + 6<16>:selector]
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	__syscall(0x21<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	di = ss
	ds = di
	di = Mem0[ss:bp + 8<16>:word16]
	Mem0[ds:di:word16] = es
	Mem0[ds:di + 6<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:bp + 6<16>:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 2<16>:word16] = bx
	Mem0[ds:di + 4<16>:word16] = cx
	Mem0[ds:di + 6<16>:word16] = dx
	Mem0[ds:di + 8<16>:word16] = si
	Mem0[ds:di + 0xA<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l09BD_2754
	// succ:  l09BD_2750 l09BD_2754
l09BD_2750:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l09BD_275C
	// succ:  l09BD_275C
l09BD_2754:
	call fn09BD_27CE (retsize: 2;)
	si = 1<16>
	ax = Mem0[ds:di:word16]
	// succ:  l09BD_275C
l09BD_275C:
	Mem0[ds:di + 0xC<16>:word16] = si
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2708_exit
fn09BD_2708_exit:


// fn09BD_2766
// Return size: 2
define fn09BD_2766
fn09BD_2766_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2766
l09BD_2766:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	ax = ds
	es = ax
	di = Mem0[ss:bp + 4<16>:word16]
	bx = di
	cx = Mem0[ss:bp + 8<16>:word16]
	branch cx == 0<16> l09BD_278E
	// succ:  l09BD_2779 l09BD_278E
l09BD_2779:
	al = Mem0[ss:bp + 6<16>:byte]
	ah = al
	SZO = cond(di & 1<16>)
	C = false
	branch Test(EQ,Z) l09BD_2786
	// succ:  l09BD_2784 l09BD_2786
l09BD_2784:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	SZO = cond(cx)
	// succ:  l09BD_2786
l09BD_2786:
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_2788
l09BD_2788:
	branch cx == 0<16> l09BD_278A
	// succ:  l09BD_2788_1 l09BD_278A
l09BD_2788_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_2788
	// succ:  l09BD_2788
l09BD_278A:
	cx = cx + cx + C
	SCZO = cond(cx)
	// succ:  l09BD_278C
l09BD_278C:
	branch cx == 0<16> l09BD_278E
	// succ:  l09BD_278C_1 l09BD_278E
l09BD_278C_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_278C
	// succ:  l09BD_278C
l09BD_278E:
	di = dx
	v17 = bx
	bx = ax
	ax = v17
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2766_exit
fn09BD_2766_exit:


// fn09BD_2794
// Return size: 2
define fn09BD_2794
fn09BD_2794_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2794
l09BD_2794:
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	branch cx == 0<16> l09BD_279E
	// succ:  l09BD_2798 l09BD_279E
l09BD_2798:
	ax = ax << 1<16>
	SCZO = cond(ax)
	v9 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl(dx, 1<8>, C)
	C = v9
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_2798
	// succ:  l09BD_279E l09BD_2798
l09BD_279E:
	return
	// succ:  fn09BD_2794_exit
fn09BD_2794_exit:


// fn09BD_27A0
// Return size: 2
define fn09BD_27A0
fn09BD_27A0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_27A0
l09BD_27A0:
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	branch cx == 0<16> l09BD_27AA
	// succ:  l09BD_27A4 l09BD_27AA
l09BD_27A4:
	dx = dx >> 1<16>
	SCZO = cond(dx)
	v9 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr(ax, 1<8>, C)
	C = v9
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_27A4
	// succ:  l09BD_27AA l09BD_27A4
l09BD_27AA:
	return
	// succ:  fn09BD_27A0_exit
fn09BD_27A0_exit:


// fn09BD_27CE
// Return size: 2
define fn09BD_27CE
fn09BD_27CE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_27CE
l09BD_27CE:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	call fn09BD_27D4 (retsize: 2;)
	return
	// succ:  fn09BD_27CE_exit
fn09BD_27CE_exit:


// fn09BD_27D4
// Return size: 2
define fn09BD_27D4
fn09BD_27D4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_27D4
l09BD_27D4:
	Mem0[ds:0xCEE<16>:byte] = al
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l09BD_27FD
	// succ:  l09BD_27DB l09BD_27FD
l09BD_27DB:
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 3<8>)
	branch Test(ULT,C) l09BD_27EE
	// succ:  l09BD_27E2 l09BD_27EE
l09BD_27E2:
	SCZO = cond(al - 0x22<8>)
	branch Test(UGE,C) l09BD_27F2
	// succ:  l09BD_27E6 l09BD_27F2
l09BD_27E6:
	SCZO = cond(al - 0x20<8>)
	branch Test(ULT,C) l09BD_27EE
	// succ:  l09BD_27EA l09BD_27EE
l09BD_27EA:
	al = 5<8>
	goto l09BD_27F4
	// succ:  l09BD_27F4
l09BD_27EE:
	SCZO = cond(al - 0x13<8>)
	branch Test(ULE,CZ) l09BD_27F4
	// succ:  l09BD_27F2 l09BD_27F4
l09BD_27F2:
	al = 0x13<8>
	// succ:  l09BD_27F4
l09BD_27F4:
	bx = 0xD10<16>
	al = Mem0[ds:bx + CONVERT(al, uint8, uint16):byte]
	// succ:  l09BD_27F8
l09BD_27F8:
	ax = CONVERT(al, int8, int16)
	Mem0[ds:0xCE6<16>:word16] = ax
	return
	// succ:  fn09BD_27D4_exit
l09BD_27FD:
	al = ah
	goto l09BD_27F8
	// succ:  l09BD_27F8
fn09BD_27D4_exit:


// fn09BD_2AC7
// Return size: 2
define fn09BD_2AC7
fn09BD_2AC7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2AC7
l09BD_2AC7:
	dx = Mem0[0x9BD<16>:0x2AC5<16>:word16]
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_2AD4
	// succ:  l09BD_2AD0 l09BD_2AD4
l09BD_2AD0:
	ah = 0x45<8>
	ah = ems_release_memory(dx)
	// succ:  l09BD_2AD4
l09BD_2AD4:
	return
	// succ:  fn09BD_2AC7_exit
fn09BD_2AC7_exit:


// fn09BD_2D2C
// Return size: 2
define fn09BD_2D2C
fn09BD_2D2C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D2C
l09BD_2D2C:
	ax = ax - ax
	SCZO = cond(ax)
	return
	// succ:  fn09BD_2D2C_exit
fn09BD_2D2C_exit:


// fn09BD_2D2F
// Return size: 2
define fn09BD_2D2F
fn09BD_2D2F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D2F
l09BD_2D2F:
	Mem0[ds:0x11D4<16>:word16] = 7<16>
	ax = 0x15<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2D2F_exit
fn09BD_2D2F_exit:


// fn09BD_2D3E
// Return size: 2
define fn09BD_2D3E
fn09BD_2D3E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D3E
l09BD_2D3E:
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6635 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x1186<16>:byte] = al
	SCZO = cond(Mem0[ds:0x26<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_2D6E
	// succ:  l09BD_2D50 l09BD_2D6E
l09BD_2D50:
	ax = 0xE20<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1497 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0xAD6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1497 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	call fn09BD_17D8 (retsize: 2;)
	v10 = Mem0[ds:0x30<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn09BD_1497 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	call fn09BD_17D8 (retsize: 2;)
	// succ:  l09BD_2D6E
l09BD_2D6E:
	Mem0[ds:0xE<16>:word16] = 0x2000<16>
	// succ:  l09BD_6529
l09BD_6529:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l09BD_6537
	// succ:  l09BD_6530 l09BD_6537
l09BD_6530:
	ah = 0xF<8>
	al = bios_video_get_current_video_mode(out ah, out bh)
	Mem0[ds:0xA17<16>:byte] = al
	// succ:  l09BD_6537
l09BD_6537:
	return
	// succ:  fn09BD_2D3E_exit
fn09BD_2D3E_exit:


// fn09BD_2D77
// Return size: 2
define fn09BD_2D77
fn09BD_2D77_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D77
l09BD_2D77:
	al = Mem0[ds:0x1186<16>:byte]
	ax = CONVERT(al, int8, int16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6635 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2D77_exit
fn09BD_2D77_exit:


// fn09BD_2D81
// Return size: 2
define fn09BD_2D81
fn09BD_2D81_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D81
l09BD_2D81:
	ax = 0xFFFF<16>
	return
	// succ:  fn09BD_2D81_exit
fn09BD_2D81_exit:


// fn09BD_2D85
// Return size: 2
define fn09BD_2D85
fn09BD_2D85_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D85
l09BD_2D85:
	ax = ax - ax
	SCZO = cond(ax)
	return
	// succ:  fn09BD_2D85_exit
fn09BD_2D85_exit:


// fn09BD_2D88
// Return size: 2
define fn09BD_2D88
fn09BD_2D88_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2D88
l09BD_2D88:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	call fn09BD_65C1 (retsize: 2;)
	Mem0[ds:0x2F<16>:byte] = al
	ax = 2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x9B8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v9 = Mem0[ds:0xCEA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	call fn09BD_66C1 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 6<16>:word16]
	v11 = Mem0[ds:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn09BD_191D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0xE4E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6130 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_2DD8
	// succ:  l09BD_2DC4 l09BD_2DD8
l09BD_2DC4:
	ax = 0xE56<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6130 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_2DD8
	// succ:  l09BD_2DD5 l09BD_2DD8
l09BD_2DD5:
	goto l09BD_2E6C
	// succ:  l09BD_2E6C
l09BD_2DD8:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 1<16>)
	branch Test(GT,SZO) l09BD_2DE1
	// succ:  l09BD_2DDE l09BD_2DE1
l09BD_2DDE:
	goto l09BD_2E6C
	// succ:  l09BD_2E6C
l09BD_2DE1:
	bx = Mem0[ss:bp + 6<16>:word16]
	v16 = Mem0[ds:bx + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn09BD_191D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0xE62<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_18BA (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x80<16>
	dx = Mem0[ds:0xCEA<16>:word16]
	Mem0[ss:bp - 8<16>:word16] = ax
	Mem0[ss:bp - 6<16>:word16] = dx
	es = dx
	bx = ax
	cl = Mem0[es:bx:byte]
	ch = ch - ch
	SCZO = cond(ch)
	Mem0[ss:bp - 0xA<16>:word16] = cx
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	goto l09BD_2E1D
	// succ:  l09BD_2E1D
l09BD_2E15:
	v26 = Mem0[ss:bp - 0xA<16>:word16] - 1<16>
	Mem0[ss:bp - 0xA<16>:word16] = v26
	SZO = cond(v26)
	branch Test(SG,S) l09BD_2E38
	// succ:  l09BD_2E1A l09BD_2E38
l09BD_2E1A:
	v28 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v28
	SZO = cond(v28)
	// succ:  l09BD_2E1D
l09BD_2E1D:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	al = Mem0[es:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2F6B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_2E15
	// succ:  l09BD_2E2E l09BD_2E15
l09BD_2E2E:
	goto l09BD_2E38
	// succ:  l09BD_2E38
l09BD_2E30:
	v32 = Mem0[ss:bp - 0xA<16>:word16] - 1<16>
	Mem0[ss:bp - 0xA<16>:word16] = v32
	SZO = cond(v32)
	branch Test(SG,S) l09BD_2E49
	// succ:  l09BD_2E35 l09BD_2E49
l09BD_2E35:
	v33 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v33
	SZO = cond(v33)
	// succ:  l09BD_2E38
l09BD_2E38:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	al = Mem0[es:bx:byte]
	ah = ah - ah
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2F6B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_2E30
	// succ:  l09BD_2E49 l09BD_2E30
l09BD_2E49:
	al = Mem0[ss:bp - 0xA<16>:byte]
	es_bx = Mem0[ss:bp - 8<16>:segptr32]
	Mem0[es:bx:byte] = al
	// succ:  l09BD_2E52
l09BD_2E52:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	v29 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v29
	SZO = cond(v29)
	al = Mem0[es:bx:byte]
	v30 = Mem0[ss:bp - 8<16>:word16] + 1<16>
	Mem0[ss:bp - 8<16>:word16] = v30
	SZO = cond(v30)
	es_bx = Mem0[ss:bp - 8<16>:segptr32]
	Mem0[es:bx:byte] = al
	v31 = Mem0[ss:bp - 0xA<16>:word16] - 1<16>
	Mem0[ss:bp - 0xA<16>:word16] = v31
	SZO = cond(v31)
	branch Test(NS,S) l09BD_2E52
	// succ:  l09BD_2E69 l09BD_2E52
l09BD_2E69:
	call fn09BD_2F91 (retsize: 2;)
	// succ:  l09BD_2E6C
l09BD_2E6C:
	call fn09BD_5978 (retsize: 2;)
	ax = 0xE67<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 6<16>:word16]
	v15 = Mem0[ds:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn09BD_600E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_2E87
	// succ:  l09BD_2E81 l09BD_2E87
l09BD_2E81:
	call fn09BD_2D2F (retsize: 2;)
	call fn09BD_5978 (retsize: 2;)
	// succ:  l09BD_2E87
l09BD_2E87:
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(GE,SO) l09BD_2E96
	// succ:  l09BD_2E8E l09BD_2E96
l09BD_2E8E:
	ax = 0xF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_2E96
l09BD_2E96:
	call fn09BD_3EBE (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(LT,SO) l09BD_2EAE
	// succ:  l09BD_2EA0 l09BD_2EAE
l09BD_2EA0:
	call fn09BD_2D85 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	bx = Mem0[ss:bp + 6<16>:word16]
	v25 = Mem0[ds:bx:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn09BD_6A0D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_2EAE
l09BD_2EAE:
	call fn09BD_625F (retsize: 2;)
	sp = sp + 0xFFFE<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2D88_exit
fn09BD_2D88_exit:


// fn09BD_2F6B
// Return size: 2
define fn09BD_2F6B
fn09BD_2F6B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2F6B
l09BD_2F6B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0x20<16>)
	branch Test(EQ,Z) l09BD_2F86
	// succ:  l09BD_2F74 l09BD_2F86
l09BD_2F74:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 9<16>)
	branch Test(EQ,Z) l09BD_2F86
	// succ:  l09BD_2F7A l09BD_2F86
l09BD_2F7A:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0xA<16>)
	branch Test(EQ,Z) l09BD_2F86
	// succ:  l09BD_2F80 l09BD_2F86
l09BD_2F80:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0xD<16>)
	branch Test(NE,Z) l09BD_2F8B
	// succ:  l09BD_2F86 l09BD_2F8B
l09BD_2F86:
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2F6B_exit
l09BD_2F8B:
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2F6B_exit
fn09BD_2F6B_exit:


// fn09BD_2F8F
// Return size: 2
define fn09BD_2F8F
fn09BD_2F8F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2F8F
l09BD_2F8F:
	return
	// succ:  fn09BD_2F8F_exit
fn09BD_2F8F_exit:


// fn09BD_2F91
// Return size: 2
define fn09BD_2F91
fn09BD_2F91_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2F91
l09BD_2F91:
	return
	// succ:  fn09BD_2F91_exit
fn09BD_2F91_exit:


// fn09BD_2FF7
// Return size: 2
define fn09BD_2FF7
fn09BD_2FF7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_2FF7
l09BD_2FF7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<i16>
	bx = Mem0[ss:bp + 4<16>:word16]
	ax = Mem0[ds:bx + 4<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cl = 9<8>
	call fn09BD_2794 (retsize: 2;)
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	Mem0[ss:bp - 6<16>:word16] = 0<16>
	bx = Mem0[ss:bp + 4<16>:word16]
	SCZO = cond(Mem0[ds:bx + 2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_3033
	// succ:  l09BD_301C l09BD_3033
l09BD_301C:
	SCZO = cond(Mem0[ds:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_3026
	// succ:  l09BD_3021 l09BD_3026
l09BD_3021:
	Mem0[ss:bp - 6<16>:word16] = 0x200<16>
	// succ:  l09BD_3026
l09BD_3026:
	ax = Mem0[ds:bx + 2<16>:word16]
	ax = ax - Mem0[ss:bp - 6<16>:word16]
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	v13 = Mem0[ss:bp - 4<16>:word16] + ax
	Mem0[ss:bp - 4<16>:word16] = v13
	SCZO = cond(v13)
	v15 = Mem0[ss:bp - 2<16>:word16] + dx + C
	Mem0[ss:bp - 2<16>:word16] = v15
	SCZO = cond(v15)
	// succ:  l09BD_3033
l09BD_3033:
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_2FF7_exit
fn09BD_2FF7_exit:


// fn09BD_303B
// Return size: 2
define fn09BD_303B
fn09BD_303B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_303B
l09BD_303B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:bp - 2<16>:word16] = 2<16>
	// succ:  l09BD_3044
l09BD_3044:
	v6 = Mem0[ds:0x11DC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ds:0x11DA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn09BD_5FB0 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v9 = Mem0[ss:bp + 8<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(ax - Mem0[ss:bp + 8<16>:word16])
	branch Test(NE,Z) l09BD_30AE
	// succ:  l09BD_3061 l09BD_30AE
l09BD_3061:
	bx = Mem0[ss:bp + 4<16>:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_307F
	// succ:  l09BD_3069 l09BD_307F
l09BD_3069:
	SCZO = cond(Mem0[ds:bx + 1<16>:byte] - 0x46<8>)
	branch Test(NE,Z) l09BD_307F
	// succ:  l09BD_306F l09BD_307F
l09BD_306F:
	ax = Mem0[ds:bx + 2<16>:word16]
	dx = Mem0[ds:bx + 4<16>:word16]
	// succ:  l09BD_3075
l09BD_3075:
	v15 = Mem0[ds:0x11DA<16>:word16] + ax
	Mem0[ds:0x11DA<16>:word16] = v15
	SCZO = cond(v15)
	v17 = Mem0[ds:0x11DC<16>:word16] + dx + C
	Mem0[ds:0x11DC<16>:word16] = v17
	SCZO = cond(v17)
	goto l09BD_30A8
	// succ:  l09BD_30A8
l09BD_307F:
	SCZO = cond(Mem0[ds:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_3091
	// succ:  l09BD_3084 l09BD_3091
l09BD_3084:
	SCZO = cond(Mem0[ds:bx + 1<16>:byte] - 0x5A<8>)
	branch Test(NE,Z) l09BD_3091
	// succ:  l09BD_308A l09BD_3091
l09BD_308A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	call fn09BD_2FF7 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	goto l09BD_3075
	// succ:  l09BD_3075
l09BD_3091:
	SCZO = cond(Mem0[ds:bx:byte] - 0x42<8>)
	branch Test(NE,Z) l09BD_30A1
	// succ:  l09BD_3096 l09BD_30A1
l09BD_3096:
	SCZO = cond(Mem0[ds:bx + 1<16>:byte] - 0x57<8>)
	branch Test(NE,Z) l09BD_30A1
	// succ:  l09BD_309C l09BD_30A1
l09BD_309C:
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_303B_exit
l09BD_30A1:
	ah = 0xD<8>
	__syscall(0x21<8>)
	v20 = Mem0[ss:bp - 2<16>:word16] - 1<16>
	Mem0[ss:bp - 2<16>:word16] = v20
	SZO = cond(v20)
	// succ:  l09BD_30A8
l09BD_30A8:
	SCZO = cond(Mem0[ss:bp - 2<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_3044
	// succ:  l09BD_30AE l09BD_3044
l09BD_30AE:
	SCZO = cond(Mem0[ss:bp + 6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_30BA
	// succ:  l09BD_30B4 l09BD_30BA
l09BD_30B4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xFFFE<16>
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_30BA
l09BD_30BA:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x11DC<16>:word16] = ax
	Mem0[ds:0x11DA<16>:word16] = ax
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_303B_exit
fn09BD_303B_exit:


// fn09BD_30C4
// Return size: 2
define fn09BD_30C4
fn09BD_30C4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_30C4
l09BD_30C4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 188<i16>
	al = Mem0[ds:0xE72<16>:byte]
	v7 = Mem0[ds:0xE72<16>:byte] + 1<8>
	Mem0[ds:0xE72<16>:byte] = v7
	SZO = cond(v7)
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_30D6
	// succ:  l09BD_30D3 l09BD_30D6
l09BD_30D3:
	goto l09BD_3256
	// succ:  l09BD_3256
l09BD_30D6:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_30E4
	// succ:  l09BD_30DD l09BD_30E4
l09BD_30DD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1190<16>
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_30E4
l09BD_30E4:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_30EE
	// succ:  l09BD_30EB l09BD_30EE
l09BD_30EB:
	goto l09BD_3256
	// succ:  l09BD_3256
l09BD_30EE:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0xBA<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = ax
	Mem0[ss:bp - 0xB8<16>:word16] = ax
	Mem0[ss:bp - 0xB6<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xB0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0xB2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_303B (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_3115
	// succ:  l09BD_3112 l09BD_3115
l09BD_3112:
	goto l09BD_319F
	// succ:  l09BD_319F
l09BD_3115:
	SCZO = cond(Mem0[ss:bp - 0xB2<16>:byte] - 0x42<8>)
	branch Test(NE,Z) l09BD_3123
	// succ:  l09BD_311C l09BD_3123
l09BD_311C:
	SCZO = cond(Mem0[ss:bp - 0xB1<16>:byte] - 0x57<8>)
	branch Test(EQ,Z) l09BD_3125
	// succ:  l09BD_3123 l09BD_3125
l09BD_3123:
	goto l09BD_319F
	// succ:  l09BD_319F
l09BD_3125:
	ax = Mem0[ss:bp - 0x82<16>:word16]
	v16 = Mem0[ds:0x14<16>:word16] | ax
	Mem0[ds:0x14<16>:word16] = v16
	SZO = cond(Mem0[ds:0x14<16>:word16])
	C = false
	ax = Mem0[ss:bp - 0xB6<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0xA8<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_313F
	// succ:  l09BD_3137 l09BD_313F
l09BD_3137:
	ax = Mem0[ss:bp - 0xA8<16>:word16]
	Mem0[ss:bp - 0xB6<16>:word16] = ax
	// succ:  l09BD_313F
l09BD_313F:
	ax = Mem0[ss:bp - 0xB8<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0xA6<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_3151
	// succ:  l09BD_3149 l09BD_3151
l09BD_3149:
	ax = Mem0[ss:bp - 0xA6<16>:word16]
	Mem0[ss:bp - 0xB8<16>:word16] = ax
	// succ:  l09BD_3151
l09BD_3151:
	ax = Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0x8A<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_3161
	// succ:  l09BD_315A l09BD_3161
l09BD_315A:
	ax = Mem0[ss:bp - 0x8A<16>:word16]
	Mem0[ss:bp - 2<16>:word16] = ax
	// succ:  l09BD_3161
l09BD_3161:
	ax = Mem0[ss:bp - 0xBA<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0x8C<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_3173
	// succ:  l09BD_316B l09BD_3173
l09BD_316B:
	ax = Mem0[ss:bp - 0x8C<16>:word16]
	Mem0[ss:bp - 0xBA<16>:word16] = ax
	// succ:  l09BD_3173
l09BD_3173:
	ax = Mem0[ss:bp - 0x94<16>:word16]
	ax = ax | Mem0[ss:bp - 0x96<16>:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_319F
	// succ:  l09BD_317D l09BD_319F
l09BD_317D:
	v18 = Mem0[ss:bp - 0x94<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v18
	v19 = Mem0[ss:bp - 0x96<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn09BD_5FB0 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xB0<16>
	ax = bp - 0xB2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(ax - 0xB0<16>)
	branch Test(NE,Z) l09BD_319F
	// succ:  l09BD_319C l09BD_319F
l09BD_319C:
	goto l09BD_3115
	// succ:  l09BD_3115
l09BD_319F:
	SCZO = cond(Mem0[ss:bp - 0xB6<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_31B3
	// succ:  l09BD_31A6 l09BD_31B3
l09BD_31A6:
	ax = Mem0[ss:bp - 0xB6<16>:word16]
	SCZO = cond(Mem0[ds:0xECC<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_31B3
	// succ:  l09BD_31B0 l09BD_31B3
l09BD_31B0:
	Mem0[ds:0x120E<16>:word16] = ax
	// succ:  l09BD_31B3
l09BD_31B3:
	ax = Mem0[ss:bp - 0xBA<16>:word16]
	Mem0[ss:bp - 0xB4<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_31D0
	// succ:  l09BD_31BF l09BD_31D0
l09BD_31BF:
	Mem0[ds:0xA16<16>:byte] = 2<8>
	ax = Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(Mem0[ds:0x1206<16>:word16] - ax)
	branch Test(UGE,C) l09BD_31D0
	// succ:  l09BD_31CD l09BD_31D0
l09BD_31CD:
	Mem0[ds:0x1206<16>:word16] = ax
	// succ:  l09BD_31D0
l09BD_31D0:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_31EB
	// succ:  l09BD_31D7 l09BD_31EB
l09BD_31D7:
	ax = Mem0[ss:bp - 0xB8<16>:word16]
	Mem0[ss:bp - 0xB4<16>:word16] = ax
	ax = Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(Mem0[ds:0x1206<16>:word16] - ax)
	branch Test(UGE,C) l09BD_31EB
	// succ:  l09BD_31E8 l09BD_31EB
l09BD_31E8:
	Mem0[ds:0x1206<16>:word16] = ax
	// succ:  l09BD_31EB
l09BD_31EB:
	SCZO = cond(Mem0[ss:bp - 0xB4<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_320D
	// succ:  l09BD_31F2 l09BD_320D
l09BD_31F2:
	SCZO = cond(Mem0[ss:bp - 0xB4<16>:word16] - 0x7FFF<16>)
	branch Test(EQ,Z) l09BD_320D
	// succ:  l09BD_31FA l09BD_320D
l09BD_31FA:
	SZO = cond(Mem0[ds:0x11D2<16>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_320D
	// succ:  l09BD_3201 l09BD_320D
l09BD_3201:
	ax = Mem0[ss:bp - 0xB4<16>:word16]
	Mem0[ds:0xECC<16>:word16] = ax
	v17 = Mem0[ds:0x11D2<16>:byte] | 1<8>
	Mem0[ds:0x11D2<16>:byte] = v17
	SZO = cond(Mem0[ds:0x11D2<16>:byte])
	C = false
	// succ:  l09BD_320D
l09BD_320D:
	SZO = cond(Mem0[ds:0x15<16>:byte] & 0x20<8>)
	C = false
	branch Test(EQ,Z) l09BD_3239
	// succ:  l09BD_3214 l09BD_3239
l09BD_3214:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_3239
	// succ:  l09BD_321B l09BD_3239
l09BD_321B:
	SZO = cond(Mem0[ds:0x11D2<16>:byte] & 4<8>)
	C = false
	branch Test(NE,Z) l09BD_3228
	// succ:  l09BD_3222 l09BD_3228
l09BD_3222:
	Mem0[ds:0xECE<16>:word16] = 0xFFFE<16>
	// succ:  l09BD_3228
l09BD_3228:
	SZO = cond(Mem0[ds:0x11D2<16>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_3239
	// succ:  l09BD_322F l09BD_3239
l09BD_322F:
	ax = Mem0[ds:0xECE<16>:word16]
	ax = ax - Mem0[ds:0xECA<16>:word16]
	SCZO = cond(ax)
	Mem0[ds:0xECC<16>:word16] = ax
	// succ:  l09BD_3239
l09BD_3239:
	SCZO = cond(Mem0[ds:0xECC<16>:word16] - 0x3C00<16>)
	branch Test(UGT,CZ) l09BD_3251
	// succ:  l09BD_3241 l09BD_3251
l09BD_3241:
	SCZO = cond(Mem0[ds:0xECA<16>:word16] - 0x4000<16>)
	branch Test(UGT,CZ) l09BD_3251
	// succ:  l09BD_3249 l09BD_3251
l09BD_3249:
	SCZO = cond(Mem0[ds:0xECE<16>:word16] - 0x4000<16>)
	branch Test(ULE,CZ) l09BD_3256
	// succ:  l09BD_3251 l09BD_3256
l09BD_3251:
	v20 = Mem0[ds:0x15<16>:byte] | 0x20<8>
	Mem0[ds:0x15<16>:byte] = v20
	SZO = cond(Mem0[ds:0x15<16>:byte])
	C = false
	// succ:  l09BD_3256
l09BD_3256:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_30C4_exit
fn09BD_30C4_exit:


// fn09BD_3829
// Return size: 2
define fn09BD_3829
fn09BD_3829_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_3829
l09BD_3829:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	ax = Mem0[ds:0xD0C<16>:word16]
	cx = 0x180<16>
	dx_ax = cx *s ax
	SCZO = cond(dx_ax)
	ax = ax + 0x2A<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF4E<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_3863
	// succ:  l09BD_3842 l09BD_3863
l09BD_3842:
	Mem0[ds:0x11D4<16>:word16] = 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn0800_0B12 (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v12 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn09BD_242E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0xF4E<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_3863
	// succ:  l09BD_385D l09BD_3863
l09BD_385D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 9<16>
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_3863
l09BD_3863:
	v15 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	v16 = Mem0[ds:0xF4E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	call fn09BD_2766 (retsize: 2;)
	ax = Mem0[ss:bp - 2<16>:word16]
	ax = ax + Mem0[ds:0xF4E<16>:word16]
	SCZO = cond(ax)
	Mem0[ds:0xF4C<16>:word16] = ax
	ax = ax - 0x2A<16>
	SCZO = cond(ax)
	Mem0[ds:0x996<16>:word16] = ax
	bx = ax
	cx = Mem0[ds:0xF4C<16>:word16]
	Mem0[ds:bx:word16] = cx
	Mem0[ds:bx + 0x18<16>:word16] = 0xFFFF<16>
	Mem0[ds:0x99E<16>:word16] = 0<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_3829_exit
fn09BD_3829_exit:


// fn09BD_396B
// Return size: 2
define fn09BD_396B
fn09BD_396B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_396B
l09BD_396B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x11D0<16>:word16] = ax
	Mem0[ds:0x1208<16>:word16] = ax
	SCZO = cond(Mem0[ds:0xA<16>:word16] - ax)
	branch Test(NE,Z) l09BD_39F5
	// succ:  l09BD_397B l09BD_39F5
l09BD_397B:
	si = Mem0[ds:0xE<16>:word16]
	SCZO = cond(Mem0[ds:0x11D6<16>:word16] - ax)
	branch Test(EQ,Z) l09BD_3989
	// succ:  l09BD_3985 l09BD_3989
l09BD_3985:
	si = Mem0[ds:0x11D6<16>:word16]
	// succ:  l09BD_3989
l09BD_3989:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l09BD_3990
	// succ:  l09BD_398D l09BD_3990
l09BD_398D:
	si = 0x800<16>
	// succ:  l09BD_3990
l09BD_3990:
	SCZO = cond(si - 0x400<16>)
	branch Test(UGE,C) l09BD_3999
	// succ:  l09BD_3996 l09BD_3999
l09BD_3996:
	si = 0x400<16>
	// succ:  l09BD_3999
l09BD_3999:
	ax = Mem0[ds:0x9B8<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	bx = bx - bx
	SCZO = cond(bx)
	es = ax
	SCZO = cond(Mem0[es:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_39C0
	// succ:  l09BD_39A7 l09BD_39C0
l09BD_39A7:
	ax = Mem0[ds:0xCEA<16>:word16]
	SCZO = cond(Mem0[es:bx + 1<16>:word16] - ax)
	branch Test(NE,Z) l09BD_39C0
	// succ:  l09BD_39B0 l09BD_39C0
l09BD_39B0:
	di = Mem0[es:bx + 3<16>:word16]
	di = di + 0x20<16>
	SCZO = cond(di)
	di = di << 4<16>
	SCZO = cond(di)
	SCZO = cond(di - si)
	branch Test(ULE,CZ) l09BD_39C0
	// succ:  l09BD_39BE l09BD_39C0
l09BD_39BE:
	si = di
	// succ:  l09BD_39C0
l09BD_39C0:
	SCZO = cond(si - 0x8200<16>)
	branch Test(ULE,CZ) l09BD_39C9
	// succ:  l09BD_39C6 l09BD_39C9
l09BD_39C6:
	si = 0x8200<16>
	// succ:  l09BD_39C9
l09BD_39C9:
	si = si + 0xF<16>
	SCZO = cond(si)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn0800_0B12 (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_39DD
	// succ:  l09BD_39D7 l09BD_39DD
l09BD_39D7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xD<16>
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_39DD
l09BD_39DD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_242E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + 0xF<16>
	SCZO = cond(ax)
	al = al & 0xF0<8>
	SZO = cond(al)
	C = false
	Mem0[ds:0xA<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_39D7
	// succ:  l09BD_39EE l09BD_39D7
l09BD_39EE:
	ax = si
	al = al & 0xF0<8>
	SZO = cond(al)
	C = false
	Mem0[ds:0xE<16>:word16] = ax
	// succ:  l09BD_39F5
l09BD_39F5:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_396B_exit
fn09BD_396B_exit:


// fn09BD_3EBE
// Return size: 2
define fn09BD_3EBE
fn09BD_3EBE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_3EBE
l09BD_3EBE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xEC<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	al = al - al
	SCZO = cond(al)
	Mem0[ss:bp - 0xE8<16>:byte] = al
	Mem0[ss:bp - 0x56<16>:byte] = al
	Mem0[ss:bp - 0x5E<16>:byte] = al
	Mem0[ss:bp - 0x5C<16>:word16] = 0<16>
	call fn09BD_62D8 (retsize: 2;)
	Mem0[ds:0xAC<16>:word16] = 0<16>
	Mem0[ds:0xAE<16>:word16] = 0x10<16>
	Mem0[ss:bp - 0xE6<16>:word16] = 0xFFFE<16>
	Mem0[ss:bp - 0xE4<16>:word16] = 0xF000<16>
	Mem0[ds:0x11D4<16>:word16] = 2<16>
	bx = 0xF000<16>
	es = bx
	bx = 0xFFFE<16>
	si = Mem0[es:bx:word16]
	si = si & 0xFF<16>
	SZO = cond(si)
	C = false
	SCZO = cond(si - 0xFB<16>)
	branch Test(EQ,Z) l09BD_3F14
	// succ:  l09BD_3F0E l09BD_3F14
l09BD_3F0E:
	SCZO = cond(si - 0xFD<16>)
	branch Test(LT,SO) l09BD_3F18
	// succ:  l09BD_3F14 l09BD_3F18
l09BD_3F14:
	v16 = Mem0[ds:0x11F0<16>:byte] + 1<8>
	Mem0[ds:0x11F0<16>:byte] = v16
	SZO = cond(v16)
	// succ:  l09BD_3F18
l09BD_3F18:
	call fn09BD_68A2 (retsize: 2;)
	Mem0[ds:0x3E<16>:byte] = al
	call fn09BD_2D2C (retsize: 2;)
	si = ax
	Mem0[ds:0x11D4<16>:word16] = 3<16>
	al = 1<8>
	Mem0[ss:bp - 4<16>:byte] = al
	Mem0[ss:bp - 0x5E<16>:byte] = al
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(EQ,Z) l09BD_3F38
	// succ:  l09BD_3F35 l09BD_3F38
l09BD_3F35:
	goto l09BD_418A
	// succ:  l09BD_418A
l09BD_3F38:
	si = 0xA<16>
	al = al - al
	SCZO = cond(al)
	Mem0[ss:bp - 4<16>:byte] = al
	Mem0[ss:bp - 0x5E<16>:byte] = al
	ax = bp - 0xE2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = 0xE84<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_464B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l09BD_3F6E
	// succ:  l09BD_3F57 l09BD_3F6E
l09BD_3F57:
	ax = bp - 0xE2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xE8C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_464B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(NE,Z) l09BD_3F6E
	// succ:  l09BD_3F6B l09BD_3F6E
l09BD_3F6B:
	goto l09BD_418A
	// succ:  l09BD_418A
l09BD_3F6E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_462B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_18F1 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x5C<16>:word16] = di
	ax = 0xE94<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_3F95
	// succ:  l09BD_3F8B l09BD_3F95
l09BD_3F8B:
	si = 3<16>
	v21 = Mem0[ds:0x11F0<16>:byte] + 1<8>
	Mem0[ds:0x11F0<16>:byte] = v21
	SZO = cond(v21)
	v22 = Mem0[ss:bp - 4<16>:byte] + 1<8>
	Mem0[ss:bp - 4<16>:byte] = v22
	SZO = cond(v22)
	// succ:  l09BD_3F95
l09BD_3F95:
	ax = 0xE9C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_3FA6
	// succ:  l09BD_3FA3 l09BD_3FA6
l09BD_3FA3:
	v23 = Mem0[ss:bp - 4<16>:byte] + 1<8>
	Mem0[ss:bp - 4<16>:byte] = v23
	SZO = cond(v23)
	// succ:  l09BD_3FA6
l09BD_3FA6:
	ax = 0xEA1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_3FBA
	// succ:  l09BD_3FB4 l09BD_3FBA
l09BD_3FB4:
	si = 0xB<16>
	v24 = Mem0[ss:bp - 4<16>:byte] + 1<8>
	Mem0[ss:bp - 4<16>:byte] = v24
	SZO = cond(v24)
	// succ:  l09BD_3FBA
l09BD_3FBA:
	ax = 0xEA6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_3FF8
	// succ:  l09BD_3FC8 l09BD_3FF8
l09BD_3FC8:
	ax = 0x31<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v25 = Mem0[ds:0x30<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 2<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2610 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	goto l09BD_3FED
	// succ:  l09BD_3FED
l09BD_3FE2:
	bx = Mem0[ss:bp - 0x58<16>:word16]
	bx = bx + Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(bx)
	al = Mem0[ds:bx:byte]
	Mem0[ds:bx + 1<16>:byte] = al
	// succ:  l09BD_3FED
l09BD_3FED:
	v27 = Mem0[ss:bp - 0x58<16>:word16] - 1<16>
	Mem0[ss:bp - 0x58<16>:word16] = v27
	SZO = cond(v27)
	branch Test(NS,S) l09BD_3FE2
	// succ:  l09BD_3FF2 l09BD_3FE2
l09BD_3FF2:
	bx = Mem0[ss:bp - 2<16>:word16]
	Mem0[ds:bx:byte] = 0x20<8>
	// succ:  l09BD_3FF8
l09BD_3FF8:
	ax = 0xEAB<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_4014
	// succ:  l09BD_4006 l09BD_4014
l09BD_4006:
	ax = 0xEAF<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_401C
	// succ:  l09BD_4014 l09BD_401C
l09BD_4014:
	si = 2<16>
	v29 = Mem0[ss:bp - 4<16>:byte] + 1<8>
	Mem0[ss:bp - 4<16>:byte] = v29
	SZO = cond(v29)
	goto l09BD_404B
	// succ:  l09BD_404B
l09BD_401C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_6066 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x62<16>:word16] = ax
	Mem0[ss:bp - 0x60<16>:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_404B
	// succ:  l09BD_402B l09BD_404B
l09BD_402B:
	v32 = Mem0[ss:bp - 4<16>:byte] + 1<8>
	Mem0[ss:bp - 4<16>:byte] = v32
	SZO = cond(v32)
	SCZO = cond(Mem0[ss:bp - 0x60<16>:word16] - 1<16>)
	branch Test(LT,SO) l09BD_4049
	// succ:  l09BD_4034 l09BD_4049
l09BD_4034:
	branch Test(GT,SZO) l09BD_403A
	// succ:  l09BD_4036 l09BD_403A
l09BD_4036:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4049
	// succ:  l09BD_403A l09BD_4049
l09BD_403A:
	dx = Mem0[ss:bp - 0x60<16>:word16]
	ax = ax - 0x3880<16>
	SCZO = cond(ax)
	dx = dx - 1<16> - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x62<16>:word16] = ax
	Mem0[ss:bp - 0x60<16>:word16] = dx
	// succ:  l09BD_4049
l09BD_4049:
	si = ax
	// succ:  l09BD_404B
l09BD_404B:
	ax = 0x2C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_4078
	// succ:  l09BD_405E l09BD_4078
l09BD_405E:
	ax = di + 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6062 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l09BD_4078
	// succ:  l09BD_406D l09BD_4078
l09BD_406D:
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x12<16>:word16] = ax
	Mem0[ds:0x10<16>:word16] = ax
	v30 = Mem0[ss:bp - 0xE8<16>:byte] + 1<8>
	Mem0[ss:bp - 0xE8<16>:byte] = v30
	SZO = cond(v30)
	// succ:  l09BD_4078
l09BD_4078:
	ax = 0x40<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v33 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v33
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_40C5
	// succ:  l09BD_408A l09BD_40C5
l09BD_408A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_409E
	// succ:  l09BD_4096 l09BD_409E
l09BD_4096:
	Mem0[ds:0xECA<16>:word16] = ax
	v34 = Mem0[ds:0x11D2<16>:byte] | 2<8>
	Mem0[ds:0x11D2<16>:byte] = v34
	SZO = cond(Mem0[ds:0x11D2<16>:byte])
	C = false
	// succ:  l09BD_409E
l09BD_409E:
	ax = 0x2D<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_40C5
	// succ:  l09BD_40AE l09BD_40C5
l09BD_40AE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_40C5
	// succ:  l09BD_40BA l09BD_40C5
l09BD_40BA:
	Mem0[ds:0xECE<16>:word16] = ax
	v51 = Mem0[ss:bp - 0x5E<16>:byte] + 1<8>
	Mem0[ss:bp - 0x5E<16>:byte] = v51
	SZO = cond(v51)
	v52 = Mem0[ds:0x11D2<16>:byte] | 4<8>
	Mem0[ds:0x11D2<16>:byte] = v52
	SZO = cond(Mem0[ds:0x11D2<16>:byte])
	C = false
	// succ:  l09BD_40C5
l09BD_40C5:
	ax = 0x3A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v36 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_40E7
	// succ:  l09BD_40D7 l09BD_40E7
l09BD_40D7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0xECC<16>:word16] = ax
	v37 = Mem0[ss:bp - 0x5E<16>:byte] + 1<8>
	Mem0[ss:bp - 0x5E<16>:byte] = v37
	SZO = cond(v37)
	v38 = Mem0[ds:0x11D2<16>:byte] | 1<8>
	Mem0[ds:0x11D2<16>:byte] = v38
	SZO = cond(Mem0[ds:0x11D2<16>:byte])
	C = false
	// succ:  l09BD_40E7
l09BD_40E7:
	ax = 0x5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_4101
	// succ:  l09BD_40F9 l09BD_4101
l09BD_40F9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x14<16>:word16] = ax
	// succ:  l09BD_4101
l09BD_4101:
	ax = 0xEB4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v41 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	call fn09BD_6130 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4115
	// succ:  l09BD_4111 l09BD_4115
l09BD_4111:
	v42 = Mem0[ds:0x11F1<16>:byte] + 1<8>
	Mem0[ds:0x11F1<16>:byte] = v42
	SZO = cond(v42)
	// succ:  l09BD_4115
l09BD_4115:
	ax = 0xEB9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v43 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v43
	call fn09BD_6130 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_412A
	// succ:  l09BD_4125 l09BD_412A
l09BD_4125:
	Mem0[ds:0x36<16>:byte] = 0x80<8>
	// succ:  l09BD_412A
l09BD_412A:
	ax = 0x2B<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v47 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v47
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_413F
	// succ:  l09BD_413A l09BD_413F
l09BD_413A:
	v48 = Mem0[ds:0x47<16>:byte] | 2<8>
	Mem0[ds:0x47<16>:byte] = v48
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	// succ:  l09BD_413F
l09BD_413F:
	ax = 0x56<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v49 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v49
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_4166
	// succ:  l09BD_4151 l09BD_4166
l09BD_4151:
	SCZO = cond(Mem0[ds:di + 1<16>:byte] - 0x43<8>)
	branch Test(EQ,Z) l09BD_4166
	// succ:  l09BD_4157 l09BD_4166
l09BD_4157:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4166
	// succ:  l09BD_4163 l09BD_4166
l09BD_4163:
	Mem0[ds:0x34<16>:byte] = al
	// succ:  l09BD_4166
l09BD_4166:
	ax = 0xEBD<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v50 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v50
	call fn09BD_6130 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	di = di | di
	SZO = cond(di)
	C = false
	branch Test(EQ,Z) l09BD_418A
	// succ:  l09BD_4178 l09BD_418A
l09BD_4178:
	ax = di + 3<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_45A9 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_418A
	// succ:  l09BD_4187 l09BD_418A
l09BD_4187:
	Mem0[ds:0xD0C<16>:word16] = ax
	// succ:  l09BD_418A
l09BD_418A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_456D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4198
	// succ:  l09BD_4193 l09BD_4198
l09BD_4193:
	call fn09BD_6375 (retsize: 2;)
	goto l09BD_419D
	// succ:  l09BD_419D
l09BD_4198:
	v19 = Mem0[ds:0x47<16>:byte] | 1<8>
	Mem0[ds:0x47<16>:byte] = v19
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	// succ:  l09BD_419D
l09BD_419D:
	call fn09BD_696B (retsize: 2;)
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l09BD_41BB
	// succ:  l09BD_41A4 l09BD_41BB
l09BD_41A4:
	v20 = Mem0[ss:bp - 0x56<16>:byte] + 1<8>
	Mem0[ss:bp - 0x56<16>:byte] = v20
	SZO = cond(v20)
	ax = si
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0<16>
	si = ax
	SCZO = cond(si - 0xB<16>)
	branch Test(EQ,Z) l09BD_41B5
	// succ:  l09BD_41B2 l09BD_41B5
l09BD_41B2:
	goto l09BD_42AD
	// succ:  l09BD_42AD
l09BD_41B5:
	call fn09BD_76B6 (retsize: 2;)
	goto l09BD_42AD
	// succ:  l09BD_42AD
l09BD_41BB:
	call fn09BD_6682 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_41C5
	// succ:  l09BD_41C2 l09BD_41C5
l09BD_41C2:
	si = 0x10<16>
	// succ:  l09BD_41C5
l09BD_41C5:
	SCZO = cond(si - 2<16>)
	branch Test(NE,Z) l09BD_41CD
	// succ:  l09BD_41CA l09BD_41CD
l09BD_41CA:
	call fn09BD_6647 (retsize: 2;)
	// succ:  l09BD_41CD
l09BD_41CD:
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(LT,SO) l09BD_423D
	// succ:  l09BD_41D4 l09BD_423D
l09BD_41D4:
	Mem0[ds:0x9C2<16>:word16] = 0x295D<16>
	call fn09BD_65F8 (retsize: 2;)
	Mem0[ds:0x2F<16>:byte] = al
	call fn09BD_6D7C (retsize: 2;)
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4203
	// succ:  l09BD_41EA l09BD_4203
l09BD_41EA:
	ax = si
	Mem0[ds:0x46<16>:byte] = al
	SCZO = cond(si - 0xB<16>)
	branch Test(NE,Z) l09BD_41FE
	// succ:  l09BD_41F4 l09BD_41FE
l09BD_41F4:
	call fn09BD_76B6 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l09BD_41FE
	// succ:  l09BD_41FB l09BD_41FE
l09BD_41FB:
	goto l09BD_42AD
	// succ:  l09BD_42AD
l09BD_41FE:
	si = si - si
	SCZO = cond(si)
	goto l09BD_452E
	// succ:  l09BD_452E
l09BD_4203:
	call fn09BD_76B6 (retsize: 2;)
	Mem0[ss:bp - 0x58<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LE,SZO) l09BD_4218
	// succ:  l09BD_420D l09BD_4218
l09BD_420D:
	ax = si
	Mem0[ds:0x46<16>:byte] = al
	si = 0xB<16>
	goto l09BD_42AD
	// succ:  l09BD_42AD
l09BD_4218:
	Mem0[ds:0x11D4<16>:word16] = 4<16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l09BD_422A
	// succ:  l09BD_4222 l09BD_422A
l09BD_4222:
	ax = 0x11<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_422A
l09BD_422A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_456D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_423D
	// succ:  l09BD_4233 l09BD_423D
l09BD_4233:
	si = 3<16>
	call fn09BD_6652 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_42AD
	// succ:  l09BD_423D l09BD_42AD
l09BD_423D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_456D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_4252
	// succ:  l09BD_4246 l09BD_4252
l09BD_4246:
	call fn09BD_6652 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4252
	// succ:  l09BD_424D l09BD_4252
l09BD_424D:
	si = 2<16>
	goto l09BD_42AD
	// succ:  l09BD_42AD
l09BD_4252:
	SCZO = cond(Mem0[ss:bp - 4<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_42AD
	// succ:  l09BD_4258 l09BD_42AD
l09BD_4258:
	call fn09BD_687E (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6849 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0xEC<16>:word16] = ax
	Mem0[ss:bp - 0xEA<16>:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l09BD_4290
	// succ:  l09BD_426E l09BD_4290
l09BD_426E:
	call fn09BD_6899 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6849 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0xEC<16>:word16] = ax
	Mem0[ss:bp - 0xEA<16>:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l09BD_4290
	// succ:  l09BD_4284 l09BD_4290
l09BD_4284:
	Mem0[ss:bp - 0xEC<16>:word16] = 0<16>
	Mem0[ss:bp - 0xEA<16>:word16] = 9<16>
	// succ:  l09BD_4290
l09BD_4290:
	SCZO = cond(Mem0[ss:bp - 0xE8<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_42A9
	// succ:  l09BD_4297 l09BD_42A9
l09BD_4297:
	SCZO = cond(Mem0[ss:bp - 0xEC<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_42A9
	// succ:  l09BD_429E l09BD_42A9
l09BD_429E:
	ax = Mem0[ss:bp - 0xEC<16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	Mem0[ds:0x12<16>:word16] = ax
	Mem0[ds:0x10<16>:word16] = ax
	// succ:  l09BD_42A9
l09BD_42A9:
	si = Mem0[ss:bp - 0xEA<16>:word16]
	// succ:  l09BD_42AD
l09BD_42AD:
	SCZO = cond(si - 0xB<16>)
	branch Test(EQ,Z) l09BD_42BC
	// succ:  l09BD_42B2 l09BD_42BC
l09BD_42B2:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(EQ,Z) l09BD_42BC
	// succ:  l09BD_42B9 l09BD_42BC
l09BD_42B9:
	call fn09BD_698C (retsize: 2;)
	sp = sp + 0xFFFE<16>
	// succ:  l09BD_42BC
l09BD_42BC:
	Mem0[ds:0x10EE<16>:byte] = 0xFF<8>
	ax = si
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42C9
	// succ:  l09BD_42C6 l09BD_42C9
l09BD_42C6:
	goto l09BD_4354
	// succ:  l09BD_4354
l09BD_42C9:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42CF
	// succ:  l09BD_42CC l09BD_42CF
l09BD_42CC:
	goto l09BD_43D3
	// succ:  l09BD_43D3
l09BD_42CF:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42D5
	// succ:  l09BD_42D2 l09BD_42D5
l09BD_42D2:
	goto l09BD_43F4
	// succ:  l09BD_43F4
l09BD_42D5:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42DB
	// succ:  l09BD_42D8 l09BD_42DB
l09BD_42D8:
	goto l09BD_444F
	// succ:  l09BD_444F
l09BD_42DB:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42E1
	// succ:  l09BD_42DE l09BD_42E1
l09BD_42DE:
	goto l09BD_4409
	// succ:  l09BD_4409
l09BD_42E1:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42E7
	// succ:  l09BD_42E4 l09BD_42E7
l09BD_42E4:
	goto l09BD_4442
	// succ:  l09BD_4442
l09BD_42E7:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42ED
	// succ:  l09BD_42EA l09BD_42ED
l09BD_42EA:
	goto l09BD_4452
	// succ:  l09BD_4452
l09BD_42ED:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42F3
	// succ:  l09BD_42F0 l09BD_42F3
l09BD_42F0:
	goto l09BD_446C
	// succ:  l09BD_446C
l09BD_42F3:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42F9
	// succ:  l09BD_42F6 l09BD_42F9
l09BD_42F6:
	goto l09BD_4452
	// succ:  l09BD_4452
l09BD_42F9:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_42FF
	// succ:  l09BD_42FC l09BD_42FF
l09BD_42FC:
	goto l09BD_4489
	// succ:  l09BD_4489
l09BD_42FF:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4305
	// succ:  l09BD_4302 l09BD_4305
l09BD_4302:
	goto l09BD_4491
	// succ:  l09BD_4491
l09BD_4305:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_430B
	// succ:  l09BD_4308 l09BD_430B
l09BD_4308:
	goto l09BD_4498
	// succ:  l09BD_4498
l09BD_430B:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4311
	// succ:  l09BD_430E l09BD_4311
l09BD_430E:
	goto l09BD_449F
	// succ:  l09BD_449F
l09BD_4311:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4317
	// succ:  l09BD_4314 l09BD_4317
l09BD_4314:
	goto l09BD_44AC
	// succ:  l09BD_44AC
l09BD_4317:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_431D
	// succ:  l09BD_431A l09BD_431D
l09BD_431A:
	goto l09BD_44B4
	// succ:  l09BD_44B4
l09BD_431D:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4323
	// succ:  l09BD_4320 l09BD_4323
l09BD_4320:
	goto l09BD_44C6
	// succ:  l09BD_44C6
l09BD_4323:
	ax = ax - 3<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_432B
	// succ:  l09BD_4328 l09BD_432B
l09BD_4328:
	goto l09BD_444A
	// succ:  l09BD_444A
l09BD_432B:
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4331
	// succ:  l09BD_432E l09BD_4331
l09BD_432E:
	goto l09BD_4481
	// succ:  l09BD_4481
l09BD_4331:
	ax = ax - 0x10A<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_4339
	// succ:  l09BD_4336 l09BD_4339
l09BD_4336:
	goto l09BD_444F
	// succ:  l09BD_444F
l09BD_4339:
	ax = ax - 0x64<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_4341
	// succ:  l09BD_433E l09BD_4341
l09BD_433E:
	goto l09BD_43F1
	// succ:  l09BD_43F1
l09BD_4341:
	ax = ax - 0x171A<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_4349
	// succ:  l09BD_4346 l09BD_4349
l09BD_4346:
	goto l09BD_443F
	// succ:  l09BD_443F
l09BD_4349:
	ax = ax - 0xDAD<16>
	SCZO = cond(ax)
	branch Test(EQ,Z) l09BD_4351
	// succ:  l09BD_434E l09BD_4351
l09BD_434E:
	goto l09BD_44CD
	// succ:  l09BD_44CD
l09BD_4351:
	si = 1<16>
	// succ:  l09BD_4354
l09BD_4354:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x381<16>
	SCZO = cond(Mem0[ss:bp - 0x5E<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_436C
	// succ:  l09BD_435F l09BD_436C
l09BD_435F:
	call fn09BD_6C54 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_436C
	// succ:  l09BD_4366 l09BD_436C
l09BD_4366:
	call fn09BD_63E0 (retsize: 2;)
	Mem0[ss:bp - 0x5E<16>:byte] = al
	// succ:  l09BD_436C
l09BD_436C:
	Mem0[ds:0x11FE<16>:word16] = 0x146<16>
	Mem0[ds:0x1200<16>:word16] = 0x40<16>
	es_bx = Mem0[ds:0x11FE<16>:segptr32]
	SZO = cond(Mem0[es:bx:byte] & 0x80<8>)
	C = false
	branch Test(EQ,Z) l09BD_4390
	// succ:  l09BD_4382 l09BD_4390
l09BD_4382:
	SCZO = cond(Mem0[ds:0xECA<16>:word16] - 0x500<16>)
	branch Test(UGE,C) l09BD_4390
	// succ:  l09BD_438A l09BD_4390
l09BD_438A:
	Mem0[ds:0xECA<16>:word16] = 0x500<16>
	// succ:  l09BD_4390
l09BD_4390:
	v35 = Mem0[ds:0x14<16>:byte] | 4<8>
	Mem0[ds:0x14<16>:byte] = v35
	SZO = cond(Mem0[ds:0x14<16>:byte])
	C = false
	Mem0[ds:0x11D4<16>:word16] = 5<16>
	SCZO = cond(Mem0[ss:bp - 0x5E<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_43B0
	// succ:  l09BD_43A1 l09BD_43B0
l09BD_43A1:
	call fn09BD_6C54 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_43B0
	// succ:  l09BD_43A8 l09BD_43B0
l09BD_43A8:
	ax = 0x12<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_43B0
l09BD_43B0:
	ax = Mem0[ds:0xECA<16>:word16]
	ax = ax + Mem0[ds:0xECC<16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x58<16>:word16] = ax
	SCZO = cond(ax - Mem0[ds:0xECE<16>:word16])
	branch Test(GE,SO) l09BD_43C3
	// succ:  l09BD_43C0 l09BD_43C3
l09BD_43C0:
	Mem0[ds:0xECE<16>:word16] = ax
	// succ:  l09BD_43C3
l09BD_43C3:
	ax = Mem0[ds:0xECE<16>:word16]
	ax = ax - 0x400<16>
	SCZO = cond(ax)
	Mem0[ds:0xA8<16>:word16] = ax
	v53 = Mem0[ds:0x11F0<16>:byte] + 1<8>
	Mem0[ds:0x11F0<16>:byte] = v53
	SZO = cond(v53)
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_43D3:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x8DA<16>
	call fn09BD_6652 (retsize: 2;)
	Mem0[ds:0x120C<16>:byte] = al
	SCZO = cond(Mem0[ss:bp - 0x56<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_43E9
	// succ:  l09BD_43E4 l09BD_43E9
l09BD_43E4:
	v39 = Mem0[ds:0x120C<16>:byte] | 2<8>
	Mem0[ds:0x120C<16>:byte] = v39
	SZO = cond(Mem0[ds:0x120C<16>:byte])
	C = false
	// succ:  l09BD_43E9
l09BD_43E9:
	Mem0[ds:0x10EF<16>:byte] = 1<8>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_43F1:
	si = 3<16>
	// succ:  l09BD_43F4
l09BD_43F4:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x2814<16>
	Mem0[ds:0x10EE<16>:byte] = 9<8>
	// succ:  l09BD_43FE
l09BD_43FE:
	Mem0[ds:0x10EF<16>:byte] = 1<8>
	call fn09BD_69C0 (retsize: 2;)
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_4409:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x3A7<16>
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(LT,SO) l09BD_441D
	// succ:  l09BD_4415 l09BD_441D
l09BD_4415:
	Mem0[ds:0x36<16>:byte] = 0x80<8>
	goto l09BD_4390
	// succ:  l09BD_4390
l09BD_441D:
	SCZO = cond(Mem0[ds:0x3E<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_4427
	// succ:  l09BD_4424 l09BD_4427
l09BD_4424:
	goto l09BD_4390
	// succ:  l09BD_4390
l09BD_4427:
	ax = 0x5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn0800_0B12 (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x5E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_242E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0xF82<16>:word16] = ax
	goto l09BD_4390
	// succ:  l09BD_4390
l09BD_443F:
	si = 6<16>
	// succ:  l09BD_4442
l09BD_4442:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x71A<16>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_444A:
	Mem0[ds:0xED0<16>:byte] = 0<8>
	// succ:  l09BD_444F
l09BD_444F:
	si = 9<16>
	// succ:  l09BD_4452
l09BD_4452:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x8B2<16>
	SCZO = cond(Mem0[ds:0x11F0<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_43FE
	// succ:  l09BD_445E l09BD_43FE
l09BD_445E:
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 2<8>)
	branch Test(NE,Z) l09BD_43FE
	// succ:  l09BD_4465 l09BD_43FE
l09BD_4465:
	call fn09BD_6699 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_447C
	// succ:  l09BD_446C l09BD_447C
l09BD_446C:
	si = 8<16>
	Mem0[ds:0x10EE<16>:byte] = 0xA<8>
	Mem0[ss:bp - 0x5A<16>:word16] = 0x749<16>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_447C:
	ax = 0x13<16>
	goto l09BD_44FF
	// succ:  l09BD_44FF
l09BD_4481:
	Mem0[ds:0xED0<16>:byte] = 0<8>
	si = 0xA<16>
	// succ:  l09BD_4489
l09BD_4489:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x905<16>
	goto l09BD_43FE
	// succ:  l09BD_43FE
l09BD_4491:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x29AC<16>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_4498:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x679<16>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_449F:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x8AC<16>
	Mem0[ds:0x10EE<16>:byte] = 9<8>
	goto l09BD_43E9
	// succ:  l09BD_43E9
l09BD_44AC:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x3D6<16>
	goto l09BD_4390
	// succ:  l09BD_4390
l09BD_44B4:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x462<16>
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(GE,SO) l09BD_44C3
	// succ:  l09BD_44C0 l09BD_44C3
l09BD_44C0:
	goto l09BD_4390
	// succ:  l09BD_4390
l09BD_44C3:
	goto l09BD_4415
	// succ:  l09BD_4415
l09BD_44C6:
	Mem0[ss:bp - 0x5A<16>:word16] = 0x4F7<16>
	goto l09BD_4504
	// succ:  l09BD_4504
l09BD_44CD:
	di = 0x1190<16>
	Mem0[ds:di:byte] = 0<8>
	SCZO = cond(Mem0[ss:bp - 0x5C<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_44F6
	// succ:  l09BD_44D9 l09BD_44F6
l09BD_44D9:
	ax = 0xEC2<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_25DE (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x14<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v54 = Mem0[ss:bp - 0x5C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v54
	ax = 0x1197<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_603A (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	// succ:  l09BD_44F6
l09BD_44F6:
	Mem0[ds:0x11D4<16>:word16] = 6<16>
	ax = 0xFFEC<16>
	// succ:  l09BD_44FF
l09BD_44FF:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_4504
l09BD_4504:
	SCZO = cond(Mem0[ds:0x10EE<16>:byte] - 0xFF<8>)
	branch Test(NE,Z) l09BD_4510
	// succ:  l09BD_450B l09BD_4510
l09BD_450B:
	ax = si
	Mem0[ds:0x10EE<16>:byte] = al
	// succ:  l09BD_4510
l09BD_4510:
	ax = si
	Mem0[ds:0x2E<16>:byte] = al
	v44 = Mem0[ss:bp - 0x5A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	Mem0[ss:bp - 0xEC<16>:word16] = ax
	call fn09BD_6230 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ds:0x46<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_452E
	// succ:  l09BD_4527 l09BD_452E
l09BD_4527:
	al = Mem0[ss:bp - 0xEC<16>:byte]
	Mem0[ds:0x46<16>:byte] = al
	// succ:  l09BD_452E
l09BD_452E:
	Mem0[ds:0x42<16>:word16] = 0x9FA<16>
	Mem0[ds:0x44<16>:word16] = 0x20<16>
	v45 = Mem0[ds:0x47<16>:byte] & 0xFE<8>
	Mem0[ds:0x47<16>:byte] = v45
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	al = Mem0[ds:0x46<16>:byte]
	ax = CONVERT(al, int8, int16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_456D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_4551
	// succ:  l09BD_454C l09BD_4551
l09BD_454C:
	v46 = Mem0[ds:0x47<16>:byte] | 1<8>
	Mem0[ds:0x47<16>:byte] = v46
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	// succ:  l09BD_4551
l09BD_4551:
	ax = si
	Mem0[ds:0x2E<16>:byte] = al
	SCZO = cond(si - 0xB<16>)
	branch Test(NE,Z) l09BD_455E
	// succ:  l09BD_455B l09BD_455E
l09BD_455B:
	call fn09BD_7C31 (retsize: 2;)
	// succ:  l09BD_455E
l09BD_455E:
	SCZO = cond(Mem0[ss:bp - 0x56<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_4567
	// succ:  l09BD_4564 l09BD_4567
l09BD_4564:
	call fn09BD_30C4 (retsize: 2;)
	// succ:  l09BD_4567
l09BD_4567:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_3EBE_exit
fn09BD_3EBE_exit:


// fn09BD_456D
// Return size: 2
define fn09BD_456D
fn09BD_456D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_456D
l09BD_456D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 1<16>)
	branch Test(EQ,Z) l09BD_4588
	// succ:  l09BD_4576 l09BD_4588
l09BD_4576:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 5<16>)
	branch Test(EQ,Z) l09BD_4588
	// succ:  l09BD_457C l09BD_4588
l09BD_457C:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0xE<16>)
	branch Test(EQ,Z) l09BD_4588
	// succ:  l09BD_4582 l09BD_4588
l09BD_4582:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0xF<16>)
	branch Test(NE,Z) l09BD_458D
	// succ:  l09BD_4588 l09BD_458D
l09BD_4588:
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_456D_exit
l09BD_458D:
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_456D_exit
fn09BD_456D_exit:


// fn09BD_4591
// Return size: 2
define fn09BD_4591
fn09BD_4591_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4591
l09BD_4591:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0x30<16>)
	branch Test(LT,SO) l09BD_45A5
	// succ:  l09BD_459A l09BD_45A5
l09BD_459A:
	SCZO = cond(Mem0[ss:bp + 4<16>:word16] - 0x39<16>)
	branch Test(GT,SZO) l09BD_45A5
	// succ:  l09BD_45A0 l09BD_45A5
l09BD_45A0:
	ax = 1<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4591_exit
l09BD_45A5:
	ax = ax - ax
	SCZO = cond(ax)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4591_exit
fn09BD_4591_exit:


// fn09BD_45A9
// Return size: 2
define fn09BD_45A9
fn09BD_45A9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_45A9
l09BD_45A9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 4<16>:word16]
	di = di - di
	SCZO = cond(di)
	ax = 0xED1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = si + 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_462B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_45E4
	// succ:  l09BD_45CE l09BD_45E4
l09BD_45CE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_6066 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = ax
	// succ:  l09BD_45D5
l09BD_45D5:
	al = Mem0[ds:si:byte]
	ax = CONVERT(al, int8, int16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_4591 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4608
	// succ:  l09BD_45E1 l09BD_4608
l09BD_45E1:
	si = si + 1<16>
	SZO = cond(si)
	goto l09BD_45D5
	// succ:  l09BD_45D5
l09BD_45E4:
	si = si + 1<16>
	SZO = cond(si)
	si = si + 1<16>
	SZO = cond(si)
	goto l09BD_4603
	// succ:  l09BD_4603
l09BD_45E8:
	al = Mem0[ds:si:byte]
	ax = CONVERT(al, int8, int16)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0xAB0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6106 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4608
	// succ:  l09BD_45F9 l09BD_4608
l09BD_45F9:
	cl = 4<8>
	di = di << cl
	SCZO = cond(di)
	ax = ax - 0xAB0<16>
	SCZO = cond(ax)
	di = di + ax
	SCZO = cond(di)
	si = si + 1<16>
	SZO = cond(si)
	// succ:  l09BD_4603
l09BD_4603:
	SCZO = cond(Mem0[ds:si:byte] - 0<8>)
	branch Test(NE,Z) l09BD_45E8
	// succ:  l09BD_4608 l09BD_45E8
l09BD_4608:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_462B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = ax
	SCZO = cond(Mem0[ds:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_4623
	// succ:  l09BD_4614 l09BD_4623
l09BD_4614:
	SZO = cond(di & 0xFFC0<16>)
	C = false
	branch Test(EQ,Z) l09BD_461F
	// succ:  l09BD_461A l09BD_461F
l09BD_461A:
	di = 0xFFFF<16>
	goto l09BD_4623
	// succ:  l09BD_4623
l09BD_461F:
	cl = 0xA<8>
	di = di << cl
	SCZO = cond(di)
	// succ:  l09BD_4623
l09BD_4623:
	ax = di
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_45A9_exit
fn09BD_45A9_exit:


// fn09BD_462B
// Return size: 2
define fn09BD_462B
fn09BD_462B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_462B
l09BD_462B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 4<16>:word16]
	goto l09BD_463F
	// succ:  l09BD_463F
l09BD_4634:
	SCZO = cond(Mem0[ds:si:byte] - 0x20<8>)
	branch Test(EQ,Z) l09BD_463E
	// succ:  l09BD_4639 l09BD_463E
l09BD_4639:
	SCZO = cond(Mem0[ds:si:byte] - 9<8>)
	branch Test(NE,Z) l09BD_4644
	// succ:  l09BD_463E l09BD_4644
l09BD_463E:
	si = si + 1<16>
	SZO = cond(si)
	// succ:  l09BD_463F
l09BD_463F:
	SCZO = cond(Mem0[ds:si:byte] - 0<8>)
	branch Test(NE,Z) l09BD_4634
	// succ:  l09BD_4644 l09BD_4634
l09BD_4644:
	ax = si
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_462B_exit
fn09BD_462B_exit:


// fn09BD_464B
// Return size: 2
define fn09BD_464B
fn09BD_464B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_464B
l09BD_464B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	SCZO = cond(Mem0[ds:0x9B8<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_465D
	// succ:  l09BD_4659 l09BD_465D
l09BD_4659:
	ax = ax - ax
	SCZO = cond(ax)
	goto l09BD_46BF
	// succ:  l09BD_46BF
l09BD_465D:
	ax = Mem0[ds:0x9B8<16>:word16]
	Mem0[ss:bp - 4<16>:word16] = 0<16>
	Mem0[ss:bp - 2<16>:word16] = ax
	// succ:  l09BD_4668
l09BD_4668:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_4659
	// succ:  l09BD_4671 l09BD_4659
l09BD_4671:
	si = Mem0[ss:bp + 4<16>:word16]
	goto l09BD_4692
	// succ:  l09BD_4692
l09BD_4676:
	al = Mem0[ds:si:byte]
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	SCZO = cond(Mem0[es:bx:byte] - al)
	branch Test(EQ,Z) l09BD_468E
	// succ:  l09BD_4680 l09BD_468E
l09BD_4680:
	bx = Mem0[ss:bp - 4<16>:word16]
	v18 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v18
	SZO = cond(v18)
	SCZO = cond(Mem0[es:bx:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_4668
	// succ:  l09BD_468C l09BD_4668
l09BD_468C:
	goto l09BD_4680
	// succ:  l09BD_4680
l09BD_468E:
	si = si + 1<16>
	SZO = cond(si)
	v19 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v19
	SZO = cond(v19)
	// succ:  l09BD_4692
l09BD_4692:
	SCZO = cond(Mem0[ds:si:byte] - 0<8>)
	branch Test(NE,Z) l09BD_4676
	// succ:  l09BD_4697 l09BD_4676
l09BD_4697:
	Mem0[ss:bp - 6<16>:word16] = 0x80<16>
	si = Mem0[ss:bp + 6<16>:word16]
	// succ:  l09BD_469F
l09BD_469F:
	v13 = Mem0[ss:bp - 6<16>:word16] - 1<16>
	Mem0[ss:bp - 6<16>:word16] = v13
	SZO = cond(v13)
	SCZO = cond(Mem0[ss:bp - 6<16>:word16] - 0<16>)
	branch Test(LE,SZO) l09BD_46B9
	// succ:  l09BD_46A8 l09BD_46B9
l09BD_46A8:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	v15 = Mem0[ss:bp - 4<16>:word16] + 1<16>
	Mem0[ss:bp - 4<16>:word16] = v15
	SZO = cond(v15)
	al = Mem0[es:bx:byte]
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si - 1<16>:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l09BD_469F
	// succ:  l09BD_46B9 l09BD_469F
l09BD_46B9:
	Mem0[ds:si:byte] = 0<8>
	ax = Mem0[ss:bp + 6<16>:word16]
	// succ:  l09BD_46BF
l09BD_46BF:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_464B_exit
fn09BD_464B_exit:


// fn09BD_4B1D
// Return size: 2
define fn09BD_4B1D
fn09BD_4B1D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4B1D
l09BD_4B1D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 8<i16>
	Mem0[ss:bp - 4<16>:word16] = 0x4798<16>
	Mem0[ss:bp - 2<16>:word16] = 0x9BD<16>
	Mem0[ss:bp - 6<16>:word16] = ds
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_4B3C
	// succ:  l09BD_4B35 l09BD_4B3C
l09BD_4B35:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1190<16>
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_4B3C
l09BD_4B3C:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_4B49
	// succ:  l09BD_4B43 l09BD_4B49
l09BD_4B43:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xFFF8<16>
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_4B49
l09BD_4B49:
	ax = Mem0[ds:0xC24<16>:word16]
	Mem0[ss:bp - 2<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	v10 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	call Mem0[ss:bp - 4<16>:ptr32] (retsize: 4;)
	ax = Mem0[ss:bp - 6<16>:word16]
	Mem0[ds:0x42<16>:word16] = 0x9FA<16>
	Mem0[ds:0x44<16>:word16] = ax
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4B1D_exit
fn09BD_4B1D_exit:


// fn09BD_4E1C
// Return size: 2
define fn09BD_4E1C
fn09BD_4E1C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4E1C
l09BD_4E1C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 62<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x30<16>
	ax = bp - 0x34<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v6 = Mem0[ss:bp + 6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	v7 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v7
	call fn09BD_66C1 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 0x1D<16>:byte] = 0<8>
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 4<8>)
	branch Test(GE,SO) l09BD_4E68
	// succ:  l09BD_4E3D l09BD_4E68
l09BD_4E3D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xEEE<16>
	ax = bp - 0x22<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4E68
	// succ:  l09BD_4E4D l09BD_4E68
l09BD_4E4D:
	ax = Mem0[ss:bp - 8<16>:word16]
	dx = Mem0[ss:bp - 6<16>:word16]
	al = al & 0xF0<8>
	SZO = cond(al)
	C = false
	dh = dh - dh
	SCZO = cond(dh)
	cl = 4<8>
	call fn09BD_27A0 (retsize: 2;)
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4E1C_exit
l09BD_4E68:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xA<16>
	ax = bp - 0x3E<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xC8<16>
	v19 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn09BD_66C1 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	SCZO = cond(Mem0[ss:bp - 0x3E<16>:word16] - 0xFF2E<16>)
	branch Test(NE,Z) l09BD_4E96
	// succ:  l09BD_4E81 l09BD_4E96
l09BD_4E81:
	SCZO = cond(Mem0[ss:bp - 0x39<16>:byte] - 0x24<8>)
	branch Test(NE,Z) l09BD_4E96
	// succ:  l09BD_4E87 l09BD_4E96
l09BD_4E87:
	v20 = Mem0[ss:bp - 0x38<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v21 = Mem0[ds:0x98<16>:word16] + ax
	Mem0[ds:0x98<16>:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:0x9A<16>:word16] + dx + C
	Mem0[ds:0x9A<16>:word16] = v22
	SCZO = cond(v22)
	// succ:  l09BD_4E96
l09BD_4E96:
	ax = ax - ax
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4E1C_exit
fn09BD_4E1C_exit:


// fn09BD_4E9A
// Return size: 2
define fn09BD_4E9A
fn09BD_4E9A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4E9A
l09BD_4E9A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 12<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 5<16>
	ax = bp - 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 3<16>
	call fn09BD_11ED (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xEEE<16>
	ax = bp - 8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4F0E
	// succ:  l09BD_4EBE l09BD_4F0E
l09BD_4EBE:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 2<16>
	ax = bp - 0xC<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1E<16>
	call fn09BD_11ED (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v11 = Mem0[ss:bp - 0xC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0xC<16>:word16] = ax
	Mem0[ss:bp - 0xA<16>:word16] = dx
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0xA<16>:word16] - dx)
	branch Test(ULT,C) l09BD_4F0E
	// succ:  l09BD_4EE7 l09BD_4F0E
l09BD_4EE7:
	branch Test(UGT,CZ) l09BD_4EEE
	// succ:  l09BD_4EE9 l09BD_4EEE
l09BD_4EE9:
	SCZO = cond(Mem0[ss:bp - 0xC<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_4F0E
	// succ:  l09BD_4EEE l09BD_4F0E
l09BD_4EEE:
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0xA<16>:word16] - dx)
	branch Test(UGT,CZ) l09BD_4F0E
	// succ:  l09BD_4EFA l09BD_4F0E
l09BD_4EFA:
	branch Test(ULT,C) l09BD_4F01
	// succ:  l09BD_4EFC l09BD_4F01
l09BD_4EFC:
	SCZO = cond(Mem0[ss:bp - 0xC<16>:word16] - ax)
	branch Test(UGE,C) l09BD_4F0E
	// succ:  l09BD_4F01 l09BD_4F0E
l09BD_4F01:
	ax = Mem0[ss:bp - 0xC<16>:word16]
	dx = Mem0[ss:bp - 0xA<16>:word16]
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	// succ:  l09BD_4F0E
l09BD_4F0E:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4E9A_exit
fn09BD_4E9A_exit:


// fn09BD_4F10
// Return size: 2
define fn09BD_4F10
fn09BD_4F10_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4F10
l09BD_4F10:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 22<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x12<16>
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	call fn09BD_11ED (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xEF4<16>
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_195D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_4F65
	// succ:  l09BD_4F34 l09BD_4F65
l09BD_4F34:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 4<16>
	ax = bp - 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x32<16>
	call fn09BD_11ED (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 4<16>:word16]
	ax = ax - Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(ax)
	ah = ah + 4<8>
	SCZO = cond(ah)
	dx = dx - dx
	SCZO = cond(dx)
	ax = ax + 1<16>
	SCZO = cond(ax)
	dx = dx + dx + C
	SCZO = cond(dx)
	cl = 6<8>
	call fn09BD_2794 (retsize: 2;)
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4F10_exit
l09BD_4F65:
	ax = ax - ax
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4F10_exit
fn09BD_4F10_exit:


// fn09BD_4F69
// Return size: 2
define fn09BD_4F69
fn09BD_4F69_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4F69
l09BD_4F69:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 26<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = 0x22<16>
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 2<8>)
	branch Test(NE,Z) l09BD_4F7B
	// succ:  l09BD_4F78 l09BD_4F7B
l09BD_4F78:
	si = 0x17<16>
	// succ:  l09BD_4F7B
l09BD_4F7B:
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 3<8>)
	branch Test(NE,Z) l09BD_4F8C
	// succ:  l09BD_4F82 l09BD_4F8C
l09BD_4F82:
	SCZO = cond(Mem0[ds:0xCED<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_4F8C
	// succ:  l09BD_4F89 l09BD_4F8C
l09BD_4F89:
	si = 0x28<16>
	// succ:  l09BD_4F8C
l09BD_4F8C:
	Mem0[ss:bp - 0xD<16>:byte] = 0x52<8>
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = bp - 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_2708 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0xC<16>:word16]
	ax = ax + si
	SCZO = cond(ax)
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	ax = Mem0[ss:bp - 0x16<16>:word16]
	Mem0[ss:bp - 0x18<16>:word16] = ax
	si = 0x28<16>
	goto l09BD_4FC2
	// succ:  l09BD_4FC2
l09BD_4FB2:
	si = si - 1<16>
	SZO = cond(si)
	branch Test(EQ,Z) l09BD_4FD5
	// succ:  l09BD_4FB5 l09BD_4FD5
l09BD_4FB5:
	v16 = Mem0[ss:bp - 0x1A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v16
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	call SEQ(0x9BD<16>, Mem0[ss:bp + 4<16>:word16]) (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_4FD5
	// succ:  l09BD_4FC2 l09BD_4FD5
l09BD_4FC2:
	es_bx = Mem0[ss:bp - 0x1A<16>:segptr32]
	ax = Mem0[es:bx:word16]
	dx = Mem0[es:bx + 2<16>:word16]
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = dx
	ax = ax + 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_4FB2
	// succ:  l09BD_4FD5 l09BD_4FB2
l09BD_4FD5:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4F69_exit
fn09BD_4F69_exit:


// fn09BD_4FD8
// Return size: 2
define fn09BD_4FD8
fn09BD_4FD8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4FD8
l09BD_4FD8:
	call fn09BD_6C54 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x4DDE<16>
	call fn09BD_4F69 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4FD8_exit
fn09BD_4FD8_exit:


// fn09BD_4FE3
// Return size: 2
define fn09BD_4FE3
fn09BD_4FE3_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_4FE3
l09BD_4FE3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 4<16>
	ax = bp + 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_6190 (retsize: 2;)
	sp = sp + 4<16>
	SCZO = cond(dx - 0x10<16>)
	branch Test(GT,SZO) l09BD_4FF7
	// succ:  l09BD_4FF5 l09BD_4FF7
l09BD_4FF5:
	branch Test(LT,SO) l09BD_5030
	// succ:  l09BD_4FF7 l09BD_5030
l09BD_4FF7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xF08<16>
	v10 = Mem0[ss:bp + 6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	call fn09BD_1222 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 4<16>
	ax = bp - 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v12 = Mem0[ss:bp + 6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	v13 = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v13
	call fn09BD_11ED (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0xF08<16>:word16]
	dx = Mem0[ds:0xF0A<16>:word16]
	SCZO = cond(Mem0[ss:bp - 4<16>:word16] - ax)
	branch Test(NE,Z) l09BD_5030
	// succ:  l09BD_5026 l09BD_5030
l09BD_5026:
	SCZO = cond(Mem0[ss:bp - 2<16>:word16] - dx)
	branch Test(NE,Z) l09BD_5030
	// succ:  l09BD_502B l09BD_5030
l09BD_502B:
	ax = 1<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4FE3_exit
l09BD_5030:
	ax = ax - ax
	SCZO = cond(ax)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_4FE3_exit
fn09BD_4FE3_exit:


// fn09BD_5034
// Return size: 2
define fn09BD_5034
fn09BD_5034_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5034
l09BD_5034:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 28<i16>
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA6<16>:word16] = ax
	Mem0[ds:0xA4<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = ax
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = ax
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0xA0<16>:word16] = 0x98<16>
	Mem0[ds:0xA2<16>:word16] = ds
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(NE,Z) l09BD_5092
	// succ:  l09BD_505D l09BD_5092
l09BD_505D:
	v9 = Mem0[ds:0xECA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	ax = Mem0[ds:0xECC<16>:word16]
	ax = ax + Mem0[ds:0xECA<16>:word16]
	SCZO = cond(ax)
	Mem0[ss:bp - 0x1C<16>:word16] = ax
	SCZO = cond(ax - Mem0[ds:0xECA<16>:word16])
	branch Test(UGE,C) l09BD_5081
	// succ:  l09BD_507C l09BD_5081
l09BD_507C:
	Mem0[ss:bp - 0x1C<16>:word16] = 0xFF00<16>
	// succ:  l09BD_5081
l09BD_5081:
	v27 = Mem0[ss:bp - 0x1C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v27
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	goto l09BD_517C
	// succ:  l09BD_517C
l09BD_5092:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_50DD
	// succ:  l09BD_5099 l09BD_50DD
l09BD_5099:
	v14 = Mem0[ds:0xECA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	v15 = Mem0[ds:0xECE<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	call fn09BD_6C64 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_50C1
	// succ:  l09BD_50BE l09BD_50C1
l09BD_50BE:
	goto l09BD_517C
	// succ:  l09BD_517C
l09BD_50C1:
	ax = Mem0[ds:0xECC<16>:word16]
	Mem0[ds:0xA8<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + Mem0[ds:0x98<16>:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x9A<16>:word16] + C
	SCZO = cond(dx)
	// succ:  l09BD_50D4
l09BD_50D4:
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5034_exit
l09BD_50DD:
	Mem0[ss:bp - 0xD<16>:byte] = 0x88<8>
	ax = bp - 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x15<16>
	call fn09BD_606A (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0xE<16>:word16]
	Mem0[ds:0xA8<16>:word16] = ax
	call fn09BD_6C64 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_50C1
	// succ:  l09BD_50FB l09BD_50C1
l09BD_50FB:
	SCZO = cond(Mem0[ds:0xA8<16>:word16] - 0xFC00<16>)
	branch Test(ULT,C) l09BD_5107
	// succ:  l09BD_5103 l09BD_5107
l09BD_5103:
	v16 = Mem0[ds:0xA8<16>:word16] - 1<16>
	Mem0[ds:0xA8<16>:word16] = v16
	SZO = cond(v16)
	// succ:  l09BD_5107
l09BD_5107:
	v20 = Mem0[ds:0xA8<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v20
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + 0<16>
	SCZO = cond(ax)
	dx = dx + 1<16> + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = dx
	call fn09BD_4FD8 (retsize: 2;)
	SCZO = cond(Mem0[ss:bp - 0xE<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_517C
	// succ:  l09BD_5124 l09BD_517C
l09BD_5124:
	Mem0[ds:0xAA4<16>:word16] = 0x1B20<16>
	Mem0[ds:0xAA6<16>:word16] = 0x1B94<16>
	Mem0[ds:0x98<16>:word16] = 0<16>
	Mem0[ds:0x9A<16>:word16] = 1<16>
	ax = Mem0[ss:bp - 0x12<16>:word16]
	dx = Mem0[ss:bp - 0x10<16>:word16]
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	call fn09BD_4F10 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_517C
	// succ:  l09BD_5150 l09BD_517C
l09BD_5150:
	Mem0[ss:bp - 0xE<16>:word16] = 0x3519<16>
	ax = bp - 0x1A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = bp - 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_2708 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	v22 = Mem0[ss:bp - 0x1A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v22
	call fn09BD_4E1C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_5179
	// succ:  l09BD_5172 l09BD_5179
l09BD_5172:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x4E1C<16>
	call fn09BD_4F69 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_5179
l09BD_5179:
	call fn09BD_4E9A (retsize: 2;)
	// succ:  l09BD_517C
l09BD_517C:
	SCZO = cond(Mem0[ds:0xECC<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_518D
	// succ:  l09BD_5183 l09BD_518D
l09BD_5183:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0x9E<16>:word16] = ax
	Mem0[ds:0x9C<16>:word16] = ax
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5034_exit
l09BD_518D:
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	cl = 6<8>
	call fn09BD_61C8 (retsize: 2;)
	SCZO = cond(ax - Mem0[ds:0xECE<16>:word16])
	branch Test(ULE,CZ) l09BD_51AE
	// succ:  l09BD_519F l09BD_51AE
l09BD_519F:
	v19 = Mem0[ds:0xECE<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	// succ:  l09BD_51AE
l09BD_51AE:
	v23 = Mem0[ds:0xECC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + Mem0[ds:0x98<16>:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x9A<16>:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = dx
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	cl = 6<8>
	call fn09BD_61C8 (retsize: 2;)
	SCZO = cond(ax - Mem0[ds:0xECA<16>:word16])
	branch Test(UGE,C) l09BD_5217
	// succ:  l09BD_51D6 l09BD_5217
l09BD_51D6:
	v24 = Mem0[ds:0xECA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v24
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	v25 = Mem0[ds:0xECC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v25
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + Mem0[ds:0x98<16>:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ds:0x9A<16>:word16] + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = dx
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0x10<16>:word16] - dx)
	branch Test(UGT,CZ) l09BD_5246
	// succ:  l09BD_5207 l09BD_5246
l09BD_5207:
	branch Test(ULT,C) l09BD_520E
	// succ:  l09BD_5209 l09BD_520E
l09BD_5209:
	SCZO = cond(Mem0[ss:bp - 0x12<16>:word16] - ax)
	branch Test(UGE,C) l09BD_5246
	// succ:  l09BD_520E l09BD_5246
l09BD_520E:
	ax = Mem0[ss:bp - 0x12<16>:word16]
	dx = Mem0[ss:bp - 0x10<16>:word16]
	goto l09BD_50D4
	// succ:  l09BD_50D4
l09BD_5217:
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0x10<16>:word16] - dx)
	branch Test(UGT,CZ) l09BD_5246
	// succ:  l09BD_5223 l09BD_5246
l09BD_5223:
	branch Test(ULT,C) l09BD_522A
	// succ:  l09BD_5225 l09BD_522A
l09BD_5225:
	SCZO = cond(Mem0[ss:bp - 0x12<16>:word16] - ax)
	branch Test(UGE,C) l09BD_5246
	// succ:  l09BD_522A l09BD_5246
l09BD_522A:
	v26 = Mem0[ds:0xECC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	call fn09BD_672C (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = Mem0[ds:0x9C<16>:word16]
	bx = Mem0[ds:0x9E<16>:word16]
	cx = cx - ax
	SCZO = cond(cx)
	bx = bx - dx - C
	SCZO = cond(bx)
	Mem0[ds:0x98<16>:word16] = cx
	Mem0[ds:0x9A<16>:word16] = bx
	// succ:  l09BD_5246
l09BD_5246:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5034_exit
fn09BD_5034_exit:


// fn09BD_5248
// Return size: 2
define fn09BD_5248
fn09BD_5248_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5248
l09BD_5248:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<i16>
	SZO = cond(Mem0[ds:0x47<16>:byte] & 2<8>)
	C = false
	branch Test(EQ,Z) l09BD_52CB
	// succ:  l09BD_5253 l09BD_52CB
l09BD_5253:
	Mem0[ss:bp - 4<16>:word16] = 0xA000<16>
	Mem0[ss:bp - 2<16>:word16] = 0xF<16>
	// succ:  l09BD_525D
l09BD_525D:
	SCZO = cond(Mem0[ss:bp - 2<16>:word16] - 0xF<16>)
	branch Test(GT,SZO) l09BD_52B4
	// succ:  l09BD_5263 l09BD_52B4
l09BD_5263:
	branch Test(LT,SO) l09BD_526B
	// succ:  l09BD_5265 l09BD_526B
l09BD_5265:
	SCZO = cond(Mem0[ss:bp - 4<16>:word16] - 0xFFFF<16>)
	branch Test(UGE,C) l09BD_52B4
	// succ:  l09BD_526B l09BD_52B4
l09BD_526B:
	v11 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	v12 = Mem0[ss:bp - 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v12
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_52B4
	// succ:  l09BD_527A l09BD_52B4
l09BD_527A:
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	ax = ax + 0x3FF<16>
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_52B4
	// succ:  l09BD_5291 l09BD_52B4
l09BD_5291:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x4000<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1222 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	v17 = Mem0[ss:bp - 4<16>:word16] + 0x400<16>
	Mem0[ss:bp - 4<16>:word16] = v17
	SCZO = cond(v17)
	v18 = Mem0[ss:bp - 2<16>:word16] + 0<16> + C
	Mem0[ss:bp - 2<16>:word16] = v18
	SCZO = cond(v18)
	goto l09BD_525D
	// succ:  l09BD_525D
l09BD_52B4:
	ax = Mem0[ss:bp - 4<16>:word16]
	ah = ah + 0x60<8>
	SCZO = cond(ah)
	bx = Mem0[ss:bp + 4<16>:word16]
	Mem0[ds:bx:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_52CB
	// succ:  l09BD_52C3 l09BD_52CB
l09BD_52C3:
	ax = 0xA000<16>
	dx = 0xF<16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5248_exit
l09BD_52CB:
	v19 = Mem0[ds:0x47<16>:byte] & 0xFD<8>
	Mem0[ds:0x47<16>:byte] = v19
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5248_exit
fn09BD_5248_exit:


// fn09BD_52D5
// Return size: 2
define fn09BD_52D5
fn09BD_52D5_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_52D5
l09BD_52D5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 10<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 4<16>:word16] = 0xFFE0<16>
	Mem0[ss:bp - 2<16>:word16] = 0xF000<16>
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	Mem0[ss:bp - 8<16>:word16] = ax
	Mem0[ss:bp - 6<16>:word16] = dx
	SCZO = cond(dx - 1<16>)
	branch Test(GT,SZO) l09BD_5303
	// succ:  l09BD_52F7 l09BD_5303
l09BD_52F7:
	branch Test(GE,SO) l09BD_5303
	// succ:  l09BD_52F9 l09BD_5303
l09BD_52F9:
	Mem0[ss:bp - 8<16>:word16] = 0<16>
	Mem0[ss:bp - 6<16>:word16] = 1<16>
	// succ:  l09BD_5303
l09BD_5303:
	ax = Mem0[ds:0xF0C<16>:word16]
	dx = Mem0[ds:0xF0E<16>:word16]
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	SCZO = cond(Mem0[es:bx + 0xA<16>:word16] - ax)
	branch Test(NE,Z) l09BD_5343
	// succ:  l09BD_5313 l09BD_5343
l09BD_5313:
	SCZO = cond(Mem0[es:bx + 0xC<16>:word16] - dx)
	branch Test(NE,Z) l09BD_5343
	// succ:  l09BD_5319 l09BD_5343
l09BD_5319:
	ax = Mem0[ds:0xF11<16>:word16]
	SCZO = cond(Mem0[es:bx + 0xE<16>:word16] - ax)
	branch Test(NE,Z) l09BD_5343
	// succ:  l09BD_5322 l09BD_5343
l09BD_5322:
	SCZO = cond(Mem0[ds:0xECE<16>:word16] - 0x3E00<16>)
	branch Test(ULT,C) l09BD_5343
	// succ:  l09BD_532A l09BD_5343
l09BD_532A:
	ax = Mem0[ss:bp - 8<16>:word16]
	dx = Mem0[ss:bp - 6<16>:word16]
	ax = ax - Mem0[ds:0x98<16>:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ds:0x9A<16>:word16] - C
	SCZO = cond(dx)
	cl = 6<8>
	call fn09BD_61C8 (retsize: 2;)
	SCZO = cond(ax - Mem0[ds:0xECC<16>:word16])
	branch Test(ULT,C) l09BD_5348
	// succ:  l09BD_5343 l09BD_5348
l09BD_5343:
	ax = ax - ax
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	goto l09BD_53C2
	// succ:  l09BD_53C2
l09BD_5348:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	ax = Mem0[es:bx:word16]
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ds:0x11EC<16>:word16] = ax
	bx = ax
	SCZO = cond(Mem0[es:bx:word16] - 0xFFFF<16>)
	branch Test(EQ,Z) l09BD_5343
	// succ:  l09BD_535C l09BD_5343
l09BD_535C:
	ax = Mem0[es:bx + 4<16>:word16]
	SCZO = cond(Mem0[es:bx + 2<16>:word16] - ax)
	branch Test(ULT,C) l09BD_5343
	// succ:  l09BD_5366 l09BD_5343
l09BD_5366:
	SCZO = cond(ax - Mem0[es:bx + 6<16>:word16])
	branch Test(UGE,C) l09BD_5343
	// succ:  l09BD_536C l09BD_5343
l09BD_536C:
	Mem0[ss:bp - 0xA<16>:word16] = ax
	bx = Mem0[ss:bp + 4<16>:word16]
	Mem0[ds:bx:word16] = ax
	SCZO = cond(ax - 0x1000<16>)
	branch Test(ULT,C) l09BD_5343
	// succ:  l09BD_5379 l09BD_5343
l09BD_5379:
	bx = Mem0[ss:bp - 4<16>:word16]
	ax = Mem0[es:bx + 6<16>:word16]
	dx = 0xF<16>
	cx = ax
	bx = dx
	ax = ax - 1<16>
	SCZO = cond(ax)
	dx = dx - 0<16> - C
	SCZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = cx
	di = bx
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5343
	// succ:  l09BD_539C l09BD_5343
l09BD_539C:
	si = si - Mem0[ss:bp - 0xA<16>:word16]
	SCZO = cond(si)
	di = di - 0<16> - C
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5343
	// succ:  l09BD_53AD l09BD_5343
l09BD_53AD:
	v21 = Mem0[ss:bp - 0xA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v21
	call fn09BD_1D06 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5343
	// succ:  l09BD_53B8 l09BD_5343
l09BD_53B8:
	es_bx = Mem0[ss:bp - 4<16>:segptr32]
	ax = Mem0[es:bx + 6<16>:word16]
	dx = 0xF<16>
	// succ:  l09BD_53C2
l09BD_53C2:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_52D5_exit
fn09BD_52D5_exit:


// fn09BD_5666
// Return size: 2
define fn09BD_5666
fn09BD_5666_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_5666
	// succ:  l09BD_5666
l09BD_53C6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 40<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	SCZO = cond(Mem0[ds:0x9E<16>:word16] - dx)
	branch Test(UGE,C) l09BD_53DC
	// succ:  l09BD_53D9 l09BD_53DC
l09BD_53D9:
	goto l09BD_5462
	// succ:  l09BD_5462
l09BD_53DC:
	branch Test(UGT,CZ) l09BD_53E4
	// succ:  l09BD_53DE l09BD_53E4
l09BD_53DE:
	SCZO = cond(Mem0[ds:0x9C<16>:word16] - ax)
	branch Test(ULE,CZ) l09BD_53EB
	// succ:  l09BD_53E4 l09BD_53EB
l09BD_53E4:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(NE,Z) l09BD_53ED
	// succ:  l09BD_53EB l09BD_53ED
l09BD_53EB:
	goto l09BD_5462
	// succ:  l09BD_5462
l09BD_53ED:
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5455
	// succ:  l09BD_53FE l09BD_5455
l09BD_53FE:
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	ax = ax + 0x3FF<16>
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = dx
	SCZO = cond(dx - Mem0[ds:0x9E<16>:word16])
	branch Test(UGT,CZ) l09BD_543D
	// succ:  l09BD_5416 l09BD_543D
l09BD_5416:
	branch Test(ULT,C) l09BD_541E
	// succ:  l09BD_5418 l09BD_541E
l09BD_5418:
	SCZO = cond(ax - Mem0[ds:0x9C<16>:word16])
	branch Test(UGE,C) l09BD_543D
	// succ:  l09BD_541E l09BD_543D
l09BD_541E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5455
	// succ:  l09BD_5429 l09BD_5455
l09BD_5429:
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	dx = Mem0[ss:bp - 0x18<16>:word16]
	ax = ax + 1<16>
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	goto l09BD_53FE
	// succ:  l09BD_53FE
l09BD_543D:
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	dx = dx - 0<16> - C
	SCZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_4FE3 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_5462
	// succ:  l09BD_5455 l09BD_5462
l09BD_5455:
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	// succ:  l09BD_5462
l09BD_5462:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ds:0xA6<16>:word16] = ax
	Mem0[ds:0xA4<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = ax
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = ax
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 3<8>)
	branch Test(NE,Z) l09BD_548F
	// succ:  l09BD_547D l09BD_548F
l09BD_547D:
	ax = bp - 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_52D5 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(NE,Z) l09BD_54A1
	// succ:  l09BD_548F l09BD_54A1
l09BD_548F:
	ax = bp - 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5248 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	Mem0[ss:bp - 0x18<16>:word16] = dx
	dx = dx | ax
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_54D8
	// succ:  l09BD_54A1 l09BD_54D8
l09BD_54A1:
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	SCZO = cond(Mem0[ds:0x9E<16>:word16] - dx)
	branch Test(UGT,CZ) l09BD_54D8
	// succ:  l09BD_54AE l09BD_54D8
l09BD_54AE:
	branch Test(ULT,C) l09BD_54B6
	// succ:  l09BD_54B0 l09BD_54B6
l09BD_54B0:
	SCZO = cond(Mem0[ds:0x9C<16>:word16] - ax)
	branch Test(UGT,CZ) l09BD_54D8
	// succ:  l09BD_54B6 l09BD_54D8
l09BD_54B6:
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	dx = Mem0[ss:bp - 0x18<16>:word16]
	Mem0[ds:0x98<16>:word16] = ax
	Mem0[ds:0x9A<16>:word16] = dx
	ax = ax + Mem0[ss:bp - 6<16>:word16]
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x18<16>:word16] = ax
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	// succ:  l09BD_54D8
l09BD_54D8:
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	SCZO = cond(Mem0[ds:0x9E<16>:word16] - dx)
	branch Test(UGE,C) l09BD_54E8
	// succ:  l09BD_54E5 l09BD_54E8
l09BD_54E5:
	goto l09BD_55F4
	// succ:  l09BD_55F4
l09BD_54E8:
	branch Test(UGT,CZ) l09BD_54F3
	// succ:  l09BD_54EA l09BD_54F3
l09BD_54EA:
	SCZO = cond(Mem0[ds:0x9C<16>:word16] - ax)
	branch Test(UGT,CZ) l09BD_54F3
	// succ:  l09BD_54F0 l09BD_54F3
l09BD_54F0:
	goto l09BD_55F4
	// succ:  l09BD_55F4
l09BD_54F3:
	ax = ax + 1<16>
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x16<16>:word16] = ax
	Mem0[ss:bp - 0x14<16>:word16] = dx
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	Mem0[ds:0x11D4<16>:word16] = 9<16>
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(NE,Z) l09BD_554C
	// succ:  l09BD_5512 l09BD_554C
l09BD_5512:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_7A57 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_5523
	// succ:  l09BD_551D l09BD_5523
l09BD_551D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1B<16>
	call fn09BD_229D (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_5523
l09BD_5523:
	SZO = cond(Mem0[ds:0xA16<16>:byte] & 2<8>)
	C = false
	branch Test(EQ,Z) l09BD_554C
	// succ:  l09BD_552A l09BD_554C
l09BD_552A:
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	ax = ax - 1<16>
	SCZO = cond(ax)
	dx = dx - 0<16> - C
	SCZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_7A57 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ds:0xAC<16>:word16]
	dx = Mem0[ds:0xAE<16>:word16]
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	// succ:  l09BD_554C
l09BD_554C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ds:0x98<16>:word16]
	dx = Mem0[ds:0x9A<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1222 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0x9C<16>:word16]
	dx = Mem0[ds:0x9E<16>:word16]
	ax = ax - Mem0[ss:bp - 0x16<16>:word16]
	SCZO = cond(ax)
	dx = dx - Mem0[ss:bp - 0x14<16>:word16] - C
	SCZO = cond(dx)
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = dx
	Mem0[ds:0xA4<16>:word16] = ax
	Mem0[ds:0xA6<16>:word16] = dx
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	dx = Mem0[ss:bp - 0x18<16>:word16]
	Mem0[ss:bp - 0x16<16>:word16] = ax
	Mem0[ss:bp - 0x14<16>:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	cx = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1222 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x18<16>:word16]
	ax = ax | Mem0[ss:bp - 0x1A<16>:word16]
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_55F4
	// succ:  l09BD_55AD l09BD_55F4
l09BD_55AD:
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x14<16>:word16] = ax
	Mem0[ss:bp - 0x16<16>:word16] = ax
	ax = Mem0[ss:bp - 6<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	Mem0[ss:bp - 0x12<16>:word16] = ax
	Mem0[ss:bp - 0x10<16>:word16] = dx
	v20 = Mem0[ds:0xA4<16>:word16] + ax
	Mem0[ds:0xA4<16>:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:0xA6<16>:word16] + dx + C
	Mem0[ds:0xA6<16>:word16] = v21
	SCZO = cond(v21)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x10<16>
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	dx = Mem0[ss:bp - 0x18<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_1222 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	dx = Mem0[ss:bp - 0x18<16>:word16]
	ax = ax + Mem0[ss:bp - 0x12<16>:word16]
	SCZO = cond(ax)
	dx = dx + Mem0[ss:bp - 0x10<16>:word16] + C
	SCZO = cond(dx)
	Mem0[ds:0x9C<16>:word16] = ax
	Mem0[ds:0x9E<16>:word16] = dx
	// succ:  l09BD_55F4
l09BD_55F4:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(EQ,Z) l09BD_5648
	// succ:  l09BD_55FB l09BD_5648
l09BD_55FB:
	Mem0[ds:0xA16<16>:byte] = 1<8>
	Mem0[ss:bp - 0x28<16>:word16] = 0xBFDE<16>
	Mem0[ss:bp - 0x26<16>:word16] = 4<16>
	Mem0[ss:bp - 0x24<16>:word16] = 1<16>
	SCZO = cond(Mem0[ds:0xADC<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_561D
	// succ:  l09BD_5616 l09BD_561D
l09BD_5616:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(NE,Z) l09BD_5622
	// succ:  l09BD_561D l09BD_5622
l09BD_561D:
	Mem0[ss:bp - 0x24<16>:word16] = 0<16>
	// succ:  l09BD_5622
l09BD_5622:
	ax = bp - 0x28<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x15<16>
	call fn09BD_606A (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x22<16>:word16]
	dx = Mem0[ss:bp - 0x24<16>:word16]
	Mem0[ds:0xA0<16>:word16] = ax
	Mem0[ds:0xA2<16>:word16] = dx
	di = ax
	si = 0x98<16>
	es = dx
	cx = 0xC<16>
	// succ:  l09BD_5646
l09BD_5646:
	branch cx == 0<16> l09BD_5648
	// succ:  l09BD_5646_1 l09BD_5648
l09BD_5646_1:
	v18 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v18
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_5646
	// succ:  l09BD_5646
l09BD_5648:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xB<8>)
	branch Test(EQ,Z) l09BD_5662
	// succ:  l09BD_564F l09BD_5662
l09BD_564F:
	ax = Mem0[ds:0xA4<16>:word16]
	dx = Mem0[ds:0xA6<16>:word16]
	cl = 4<8>
	call fn09BD_2794 (retsize: 2;)
	Mem0[ds:0xAA8<16>:word16] = ax
	Mem0[ds:0xAAA<16>:word16] = dx
	// succ:  l09BD_5662
l09BD_5662:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5666_exit
l09BD_5666:
	call fn09BD_5034 (retsize: 2;)
	goto l09BD_53C6
	// succ:  l09BD_53C6
fn09BD_5666_exit:


// fn09BD_5978
// Return size: 2
define fn09BD_5978
fn09BD_5978_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5978
l09BD_5978:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x10A<16>
	SCZO = cond(sp)
	ax = Mem0[ds:0xE70<16>:word16]
	Mem0[ss:bp - 0x108<16>:word16] = ax
	SCZO = cond(Mem0[ds:0xF21<16>:byte] - 0<8>)
	branch Test(GT,SZO) l09BD_5994
	// succ:  l09BD_598D l09BD_5994
l09BD_598D:
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 3<8>)
	branch Test(GE,SO) l09BD_5997
	// succ:  l09BD_5994 l09BD_5997
l09BD_5994:
	goto l09BD_5AB8
	// succ:  l09BD_5AB8
l09BD_5997:
	call fn09BD_68CC (retsize: 2;)
	Mem0[ss:bp - 0x106<16>:word16] = ax
	call fn09BD_2D81 (retsize: 2;)
	Mem0[ds:0xE70<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l09BD_59C3
	// succ:  l09BD_59A8 l09BD_59C3
l09BD_59A8:
	ax = bp - 0x100<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = 0xF14<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_464B (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_59C3
	// succ:  l09BD_59BA l09BD_59C3
l09BD_59BA:
	ax = bp - 0x100<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_59C3
l09BD_59C3:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_5A2E
	// succ:  l09BD_59CA l09BD_5A2E
l09BD_59CA:
	ax = Mem0[ss:bp - 0x108<16>:word16]
	Mem0[ds:0xE70<16>:word16] = ax
	call fn09BD_5FDD (retsize: 2;)
	Mem0[ss:bp - 0x108<16>:word16] = 0xFFFF<16>
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x1C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x104<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = bp - 0x104<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5AEF (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FB0 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x104<16>:byte] = 0<8>
	ax = 6<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x104<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ss:bp - 0x104<16>:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_5A21
	// succ:  l09BD_5A1A l09BD_5A21
l09BD_5A1A:
	SCZO = cond(Mem0[ss:bp - 0x103<16>:byte] - 0x46<8>)
	branch Test(EQ,Z) l09BD_5A2E
	// succ:  l09BD_5A21 l09BD_5A2E
l09BD_5A21:
	ax = Mem0[ds:0xE70<16>:word16]
	Mem0[ss:bp - 0x108<16>:word16] = ax
	Mem0[ds:0xE70<16>:word16] = 0xFFFF<16>
	// succ:  l09BD_5A2E
l09BD_5A2E:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(GE,SO) l09BD_5A61
	// succ:  l09BD_5A35 l09BD_5A61
l09BD_5A35:
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = bp - 0x100<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_25DE (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0xF1C<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_18A4 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = bp - 0x100<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = 0x1190<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_25DE (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_5A61
l09BD_5A61:
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(LT,SO) l09BD_5AA7
	// succ:  l09BD_5A68 l09BD_5AA7
l09BD_5A68:
	ax = bp - 0x104<16>
	Mem0[ds:0x1188<16>:word16] = ax
	ax = ax - ax
	SCZO = cond(ax)
	Mem0[ss:bp - 0x102<16>:word16] = ax
	Mem0[ss:bp - 0x10A<16>:word16] = ax
	ax = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0x10A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ss:bp - 0x10A<16>:word16] - 0x4D<16>)
	branch Test(NE,Z) l09BD_5A93
	// succ:  l09BD_5A8E l09BD_5A93
l09BD_5A8E:
	call fn09BD_5DB8 (retsize: 2;)
	goto l09BD_5AA2
	// succ:  l09BD_5AA2
l09BD_5A93:
	v15 = Mem0[ss:bp - 0x106<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	call fn09BD_5BC1 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5AA7
	// succ:  l09BD_5A9F l09BD_5AA7
l09BD_5A9F:
	call fn09BD_5C71 (retsize: 2;)
	// succ:  l09BD_5AA2
l09BD_5AA2:
	Mem0[ds:0xF21<16>:byte] = 1<8>
	// succ:  l09BD_5AA7
l09BD_5AA7:
	SCZO = cond(Mem0[ss:bp - 0x108<16>:word16] - 0<16>)
	branch Test(LT,SO) l09BD_5AB8
	// succ:  l09BD_5AAE l09BD_5AB8
l09BD_5AAE:
	call fn09BD_5FDD (retsize: 2;)
	ax = Mem0[ss:bp - 0x108<16>:word16]
	Mem0[ds:0xE70<16>:word16] = ax
	// succ:  l09BD_5AB8
l09BD_5AB8:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5978_exit
fn09BD_5978_exit:


// fn09BD_5ABC
// Return size: 2
define fn09BD_5ABC
fn09BD_5ABC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5ABC
l09BD_5ABC:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x1188<16>:word16]
	v6 = Mem0[ds:si:word16] + 1<16>
	Mem0[ds:si:word16] = v6
	SZO = cond(v6)
	ax = Mem0[ds:si:word16]
	SCZO = cond(Mem0[ds:si + 2<16>:word16] - ax)
	branch Test(UGT,CZ) l09BD_5AE7
	// succ:  l09BD_5ACA l09BD_5AE7
l09BD_5ACA:
	ax = 0x100<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = si + 4<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:si + 2<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GT,SZO) l09BD_5AE3
	// succ:  l09BD_5ADE l09BD_5AE3
l09BD_5ADE:
	ax = 0xFFFF<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5ABC_exit
l09BD_5AE3:
	Mem0[ds:si:word16] = 0<16>
	// succ:  l09BD_5AE7
l09BD_5AE7:
	bx = Mem0[ds:si:word16]
	al = Mem0[ds:bx + 4<16> + si:byte]
	ax = CONVERT(al, int8, int16)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5ABC_exit
fn09BD_5ABC_exit:


// fn09BD_5AEF
// Return size: 2
define fn09BD_5AEF
fn09BD_5AEF_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5AEF
l09BD_5AEF:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	bx = Mem0[ss:bp + 4<16>:word16]
	ax = Mem0[ds:bx + 4<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	cl = 9<8>
	call fn09BD_2794 (retsize: 2;)
	Mem0[ss:bp - 4<16>:word16] = ax
	Mem0[ss:bp - 2<16>:word16] = dx
	Mem0[ss:bp - 6<16>:word16] = 0<16>
	bx = Mem0[ss:bp + 4<16>:word16]
	SCZO = cond(Mem0[ds:bx + 2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_5B2D
	// succ:  l09BD_5B16 l09BD_5B2D
l09BD_5B16:
	SCZO = cond(Mem0[ds:bx:byte] - 0x4D<8>)
	branch Test(NE,Z) l09BD_5B20
	// succ:  l09BD_5B1B l09BD_5B20
l09BD_5B1B:
	Mem0[ss:bp - 6<16>:word16] = 0x200<16>
	// succ:  l09BD_5B20
l09BD_5B20:
	ax = Mem0[ds:bx + 2<16>:word16]
	ax = ax - Mem0[ss:bp - 6<16>:word16]
	SCZO = cond(ax)
	dx_ax = CONVERT(ax, int16, int32)
	v13 = Mem0[ss:bp - 4<16>:word16] + ax
	Mem0[ss:bp - 4<16>:word16] = v13
	SCZO = cond(v13)
	v15 = Mem0[ss:bp - 2<16>:word16] + dx + C
	Mem0[ss:bp - 2<16>:word16] = v15
	SCZO = cond(v15)
	// succ:  l09BD_5B2D
l09BD_5B2D:
	ax = Mem0[ss:bp - 4<16>:word16]
	dx = Mem0[ss:bp - 2<16>:word16]
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5AEF_exit
fn09BD_5AEF_exit:


// fn09BD_5B37
// Return size: 2
define fn09BD_5B37
fn09BD_5B37_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5B37
l09BD_5B37:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<16>:word16] = 0<16>
	// succ:  l09BD_5B43
l09BD_5B43:
	call fn09BD_5ABC (retsize: 2;)
	si = ax
	SCZO = cond(si - 0xA<16>)
	branch Test(NE,Z) l09BD_5B52
	// succ:  l09BD_5B4D l09BD_5B52
l09BD_5B4D:
	ax = 0xFFFE<16>
	goto l09BD_5B8C
	// succ:  l09BD_5B8C
l09BD_5B52:
	SCZO = cond(si - 0x2A<16>)
	branch Test(NE,Z) l09BD_5B5C
	// succ:  l09BD_5B57 l09BD_5B5C
l09BD_5B57:
	ax = 0xFFFD<16>
	goto l09BD_5B8C
	// succ:  l09BD_5B8C
l09BD_5B5C:
	SCZO = cond(si - 0x40<16>)
	branch Test(NE,Z) l09BD_5B66
	// succ:  l09BD_5B61 l09BD_5B66
l09BD_5B61:
	ax = 0xFFFC<16>
	goto l09BD_5B8C
	// succ:  l09BD_5B8C
l09BD_5B66:
	ax = si - 0x30<16>
	SCZO = cond(ax - 9<16>)
	branch Test(UGT,CZ) l09BD_5B43
	// succ:  l09BD_5B6E l09BD_5B43
l09BD_5B6E:
	ax = 0xA<16>
	dx_ax = Mem0[ss:bp - 2<16>:word16] *s ax
	SCZO = cond(dx_ax)
	ax = ax + si
	SCZO = cond(ax)
	ax = ax - 0x30<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 2<16>:word16] = ax
	call fn09BD_5ABC (retsize: 2;)
	si = ax
	ax = si - 0x30<16>
	SCZO = cond(ax - 9<16>)
	branch Test(ULE,CZ) l09BD_5B6E
	// succ:  l09BD_5B89 l09BD_5B6E
l09BD_5B89:
	ax = Mem0[ss:bp - 2<16>:word16]
	// succ:  l09BD_5B8C
l09BD_5B8C:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5B37_exit
fn09BD_5B37_exit:


// fn09BD_5B91
// Return size: 2
define fn09BD_5B91
fn09BD_5B91_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5B91
l09BD_5B91:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	goto l09BD_5BB2
	// succ:  l09BD_5BB2
l09BD_5B99:
	Mem0[ss:bp - 2<16>:word16] = bx
	v10 = Mem0[ss:bp + 4<16>:word16] + 1<16>
	Mem0[ss:bp + 4<16>:word16] = v10
	SZO = cond(v10)
	call fn09BD_5ABC (retsize: 2;)
	bx = Mem0[ss:bp - 2<16>:word16]
	cx = ax
	al = Mem0[ds:bx:byte]
	ax = CONVERT(al, int8, int16)
	SCZO = cond(cx - ax)
	branch Test(EQ,Z) l09BD_5BB2
	// succ:  l09BD_5BAE l09BD_5BB2
l09BD_5BAE:
	ax = ax - ax
	SCZO = cond(ax)
	goto l09BD_5BBD
	// succ:  l09BD_5BBD
l09BD_5BB2:
	bx = Mem0[ss:bp + 4<16>:word16]
	SCZO = cond(Mem0[ds:bx:byte] - 0<8>)
	branch Test(NE,Z) l09BD_5B99
	// succ:  l09BD_5BBA l09BD_5B99
l09BD_5BBA:
	ax = 1<16>
	// succ:  l09BD_5BBD
l09BD_5BBD:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5B91_exit
fn09BD_5B91_exit:


// fn09BD_5BC1
// Return size: 2
define fn09BD_5BC1
fn09BD_5BC1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5BC1
l09BD_5BC1:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x42<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	// succ:  l09BD_5BC9
l09BD_5BC9:
	call fn09BD_5ABC (retsize: 2;)
	ax = ax + 1<16>
	SZO = cond(ax)
	branch Test(EQ,Z) l09BD_5C10
	// succ:  l09BD_5BCF l09BD_5C10
l09BD_5BCF:
	ax = ax - 0x3C<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_5BD7
	// succ:  l09BD_5BD4 l09BD_5BD7
l09BD_5BD4:
	goto l09BD_5C58
	// succ:  l09BD_5C58
l09BD_5BD7:
	ax = ax - 0xA<16>
	SCZO = cond(ax)
	branch Test(EQ,Z) l09BD_5BE3
	// succ:  l09BD_5BDC l09BD_5BE3
l09BD_5BDC:
	ax = ax - 0xD<16>
	SCZO = cond(ax)
	// succ:  l09BD_5BDF
l09BD_5BDF:
	branch Test(EQ,Z) l09BD_5BEB
	// succ:  l09BD_5BE1 l09BD_5BEB
l09BD_5BE1:
	goto l09BD_5BC9
	// succ:  l09BD_5BC9
l09BD_5BE3:
	call fn09BD_5ABC (retsize: 2;)
	SCZO = cond(ax - 0x52<16>)
	goto l09BD_5BDF
	// succ:  l09BD_5BDF
l09BD_5BEB:
	ax = 0xF24<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5B91 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5BC9
	// succ:  l09BD_5BF7 l09BD_5BC9
l09BD_5BF7:
	call fn09BD_5B37 (retsize: 2;)
	si = ax
	SCZO = cond(si - Mem0[ss:bp + 4<16>:word16])
	branch Test(EQ,Z) l09BD_5C06
	// succ:  l09BD_5C01 l09BD_5C06
l09BD_5C01:
	SCZO = cond(si - 0xFFFD<16>)
	branch Test(NE,Z) l09BD_5C0B
	// succ:  l09BD_5C06 l09BD_5C0B
l09BD_5C06:
	ax = 1<16>
	goto l09BD_5C6B
	// succ:  l09BD_5C6B
l09BD_5C0B:
	SCZO = cond(si - 0xFFFF<16>)
	branch Test(NE,Z) l09BD_5C14
	// succ:  l09BD_5C10 l09BD_5C14
l09BD_5C10:
	ax = ax - ax
	SCZO = cond(ax)
	goto l09BD_5C6B
	// succ:  l09BD_5C6B
l09BD_5C14:
	SCZO = cond(si - 0x3B<16>)
	branch Test(EQ,Z) l09BD_5C58
	// succ:  l09BD_5C19 l09BD_5C58
l09BD_5C19:
	SCZO = cond(si - 0xFFFC<16>)
	branch Test(NE,Z) l09BD_5C50
	// succ:  l09BD_5C1E l09BD_5C50
l09BD_5C1E:
	di = bp - 0x42<16>
	goto l09BD_5C24
	// succ:  l09BD_5C24
l09BD_5C23:
	di = di + 1<16>
	SZO = cond(di)
	// succ:  l09BD_5C24
l09BD_5C24:
	call fn09BD_5ABC (retsize: 2;)
	Mem0[ds:di:byte] = al
	SCZO = cond(al - 0x20<8>)
	branch Test(GT,SZO) l09BD_5C23
	// succ:  l09BD_5C2D l09BD_5C23
l09BD_5C2D:
	call fn09BD_5FDD (retsize: 2;)
	bx = Mem0[ds:0x1188<16>:word16]
	Mem0[ds:bx + 2<16>:word16] = 0<16>
	Mem0[ds:di:byte] = 0<8>
	ax = bp - 0x42<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5F9E (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ds:0xE70<16>:word16] - 0<16>)
	branch Test(LT,SO) l09BD_5C4E
	// succ:  l09BD_5C4B l09BD_5C4E
l09BD_5C4B:
	goto l09BD_5BC9
	// succ:  l09BD_5BC9
l09BD_5C4E:
	goto l09BD_5C10
	// succ:  l09BD_5C10
l09BD_5C50:
	SCZO = cond(si - 0xFFFE<16>)
	branch Test(NE,Z) l09BD_5BF7
	// succ:  l09BD_5C55 l09BD_5BF7
l09BD_5C55:
	goto l09BD_5BC9
	// succ:  l09BD_5BC9
l09BD_5C58:
	call fn09BD_5ABC (retsize: 2;)
	si = ax
	SCZO = cond(si - 0xA<16>)
	branch Test(NE,Z) l09BD_5C65
	// succ:  l09BD_5C62 l09BD_5C65
l09BD_5C62:
	goto l09BD_5BC9
	// succ:  l09BD_5BC9
l09BD_5C65:
	si = si | si
	SZO = cond(si)
	C = false
	branch Test(GE,SO) l09BD_5C58
	// succ:  l09BD_5C69 l09BD_5C58
l09BD_5C69:
	goto l09BD_5C10
	// succ:  l09BD_5C10
l09BD_5C6B:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5BC1_exit
fn09BD_5BC1_exit:


// fn09BD_5C71
// Return size: 2
define fn09BD_5C71
fn09BD_5C71_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5C71
l09BD_5C71:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 6<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	Mem0[ss:bp - 2<16>:byte] = 0<8>
	si = 0x15E8<16>
	// succ:  l09BD_5C7F
l09BD_5C7F:
	call fn09BD_5ABC (retsize: 2;)
	Mem0[ss:bp - 4<16>:word16] = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	branch Test(EQ,Z) l09BD_5CFE
	// succ:  l09BD_5C88 l09BD_5CFE
l09BD_5C88:
	ax = ax - 0x23<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_5C90
	// succ:  l09BD_5C8D l09BD_5C90
l09BD_5C8D:
	goto l09BD_5D11
	// succ:  l09BD_5D11
l09BD_5C90:
	ax = ax - 5<16>
	SCZO = cond(ax)
	branch Test(EQ,Z) l09BD_5D11
	// succ:  l09BD_5C95 l09BD_5D11
l09BD_5C95:
	ax = ax - 0x14<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_5C9D
	// succ:  l09BD_5C9A l09BD_5C9D
l09BD_5C9A:
	goto l09BD_5D48
	// succ:  l09BD_5D48
l09BD_5C9D:
	ax = ax - 8<16>
	SCZO = cond(ax)
	branch Test(EQ,Z) l09BD_5CCE
	// succ:  l09BD_5CA2 l09BD_5CCE
l09BD_5CA2:
	ax = ax - 1<16>
	SZO = cond(ax)
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(EQ,Z) l09BD_5CF2
	// succ:  l09BD_5CA6 l09BD_5CF2
l09BD_5CA6:
	ax = ax - 8<16>
	SCZO = cond(ax)
	branch Test(NE,Z) l09BD_5C7F
	// succ:  l09BD_5CAB l09BD_5C7F
l09BD_5CAB:
	ax = 0xF29<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5B91 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5C7F
	// succ:  l09BD_5CB7 l09BD_5C7F
l09BD_5CB7:
	SCZO = cond(Mem0[ss:bp - 2<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_5CC1
	// succ:  l09BD_5CBD l09BD_5CC1
l09BD_5CBD:
	Mem0[ds:si:byte] = 0<8>
	si = si + 1<16>
	SZO = cond(si)
	// succ:  l09BD_5CC1
l09BD_5CC1:
	call fn09BD_5B37 (retsize: 2;)
	Mem0[ds:si:word16] = ax
	si = si + 1<16>
	SZO = cond(si)
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ss:bp - 2<16>:byte] = 1<8>
	goto l09BD_5C7F
	// succ:  l09BD_5C7F
l09BD_5CCE:
	ax = 0xF30<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5B91 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5C7F
	// succ:  l09BD_5CDA l09BD_5C7F
l09BD_5CDA:
	SCZO = cond(Mem0[ss:bp - 2<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_5CE1
	// succ:  l09BD_5CE0 l09BD_5CE1
l09BD_5CE0:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_5CE1
l09BD_5CE1:
	Mem0[ds:si:byte] = 0xD<8>
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si:byte] = 0xA<8>
	al = al - al
	SCZO = cond(al)
	Mem0[ss:bp - 2<16>:byte] = al
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:si:byte] = al
	goto l09BD_5D24
	// succ:  l09BD_5D24
l09BD_5CF2:
	ax = 0xF38<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5B91 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5C7F
	// succ:  l09BD_5CFE l09BD_5C7F
l09BD_5CFE:
	Mem0[ds:si:word16] = 0xFFFF<16>
	si = si + 1<16>
	SZO = cond(si)
	si = si + 1<16>
	SZO = cond(si)
	Mem0[ds:0xF22<16>:word16] = si
	ax = si
	al = al & 0xFE<8>
	SZO = cond(al)
	C = false
	Mem0[ds:0xCDC<16>:word16] = ax
	goto l09BD_5D5A
	// succ:  l09BD_5D5A
l09BD_5D11:
	SCZO = cond(Mem0[ss:bp - 2<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_5D18
	// succ:  l09BD_5D17 l09BD_5D18
l09BD_5D17:
	si = si - 1<16>
	SZO = cond(si)
	// succ:  l09BD_5D18
l09BD_5D18:
	Mem0[ss:bp - 2<16>:byte] = 0<8>
	// succ:  l09BD_5D1C
l09BD_5D1C:
	call fn09BD_5ABC (retsize: 2;)
	SCZO = cond(ax - Mem0[ss:bp - 4<16>:word16])
	branch Test(NE,Z) l09BD_5D28
	// succ:  l09BD_5D24 l09BD_5D28
l09BD_5D24:
	si = si + 1<16>
	SZO = cond(si)
	goto l09BD_5C7F
	// succ:  l09BD_5C7F
l09BD_5D28:
	ah = ah - ah
	SCZO = cond(ah)
	Mem0[ds:si:word16] = ax
	ax = Mem0[ds:0xCE4<16>:word16]
	ax = ax - 0x10<16>
	SCZO = cond(ax)
	si = si + 1<16>
	SZO = cond(si)
	SCZO = cond(ax - si)
	branch Test(UGE,C) l09BD_5D1C
	// succ:  l09BD_5D37 l09BD_5D1C
l09BD_5D37:
	ax = 0x200<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn0800_0B12 (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_5D1C
	// succ:  l09BD_5D45 l09BD_5D1C
l09BD_5D45:
	si = si + 1<16>
	SZO = cond(si)
	goto l09BD_5CFE
	// succ:  l09BD_5CFE
l09BD_5D48:
	call fn09BD_5ABC (retsize: 2;)
	Mem0[ss:bp - 4<16>:word16] = ax
	SCZO = cond(ax - 0xA<16>)
	branch Test(NE,Z) l09BD_5D56
	// succ:  l09BD_5D53 l09BD_5D56
l09BD_5D53:
	goto l09BD_5C7F
	// succ:  l09BD_5C7F
l09BD_5D56:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(GE,SO) l09BD_5D48
	// succ:  l09BD_5D5A l09BD_5D48
l09BD_5D5A:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5C71_exit
fn09BD_5C71_exit:


// fn09BD_5D5F
// Return size: 2
define fn09BD_5D5F
fn09BD_5D5F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5D5F
l09BD_5D5F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0xE<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp + 6<16>:word16]
	Mem0[ss:bp - 0xC<16>:word16] = ax
	// succ:  l09BD_5D6B
l09BD_5D6B:
	Mem0[ss:bp - 0xD<16>:byte] = 0x48<8>
	ax = bp - 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_26C0 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ss:bp - 2<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_5D84
	// succ:  l09BD_5D7F l09BD_5D84
l09BD_5D7F:
	ax = Mem0[ss:bp - 0xE<16>:word16]
	goto l09BD_5D94
	// succ:  l09BD_5D94
l09BD_5D84:
	SCZO = cond(Mem0[ss:bp - 0xE<16>:word16] - 8<16>)
	branch Test(NE,Z) l09BD_5D92
	// succ:  l09BD_5D8A l09BD_5D92
l09BD_5D8A:
	ax = Mem0[ss:bp + 4<16>:word16]
	SCZO = cond(Mem0[ss:bp - 0xC<16>:word16] - ax)
	branch Test(UGE,C) l09BD_5D6B
	// succ:  l09BD_5D92 l09BD_5D6B
l09BD_5D92:
	ax = ax - ax
	SCZO = cond(ax)
	// succ:  l09BD_5D94
l09BD_5D94:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5D5F_exit
fn09BD_5D5F_exit:


// fn09BD_5D98
// Return size: 2
define fn09BD_5D98
fn09BD_5D98_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5D98
l09BD_5D98:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x16<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 0xD<16>:byte] = 0x49<8>
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp - 0x16<16>:word16] = ax
	ax = bp - 0x16<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = bp - 0xE<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2708 (retsize: 2;)
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5D98_exit
fn09BD_5D98_exit:


// fn09BD_5DB8
// Return size: 2
define fn09BD_5DB8
fn09BD_5DB8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5DB8
l09BD_5DB8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 0x26<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ds:0x1188<16>:word16]
	Mem0[ds:si:byte] = 0x4D<8>
	ax = 0x1B<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = si + 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5FC8 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(LT,SO) l09BD_5E2E
	// succ:  l09BD_5DD8 l09BD_5E2E
l09BD_5DD8:
	ax = Mem0[ds:si + 8<16>:word16]
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5D5F (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 0x1C<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5E2E
	// succ:  l09BD_5DEC l09BD_5E2E
l09BD_5DEC:
	cl = 4<8>
	v16 = Mem0[ss:bp - 0x1A<16>:word16] << cl
	Mem0[ss:bp - 0x1A<16>:word16] = v16
	SCZO = cond(v16)
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	ax = ax - 0x1C<16>
	SCZO = cond(ax)
	Mem0[ss:bp - 0x1E<16>:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = Mem0[ss:bp - 0x1C<16>:word16]
	dx = dx - dx
	SCZO = cond(dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	di = ax
	call fn09BD_5FE9 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(ax - di)
	branch Test(LT,SO) l09BD_5E2E
	// succ:  l09BD_5E0E l09BD_5E2E
l09BD_5E0E:
	cl = 5<8>
	ax = Mem0[ds:si + 4<16>:word16]
	ax = ax << cl
	SCZO = cond(ax)
	Mem0[ss:bp - 0x1E<16>:word16] = ax
	v19 = Mem0[ds:si + 0xC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v19
	ax = ax + Mem0[ds:si + 0xA<16>:word16]
	SCZO = cond(ax)
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_5D5F (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ss:bp - 2<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_5E31
	// succ:  l09BD_5E2E l09BD_5E31
l09BD_5E2E:
	goto l09BD_5F8B
	// succ:  l09BD_5F8B
l09BD_5E31:
	cl = 4<8>
	v20 = Mem0[ss:bp - 0x1E<16>:word16] << cl
	Mem0[ss:bp - 0x1E<16>:word16] = v20
	SCZO = cond(v20)
	SCZO = cond(Mem0[ds:si + 2<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_5E45
	// succ:  l09BD_5E3C l09BD_5E45
l09BD_5E3C:
	ax = Mem0[ds:si + 2<16>:word16]
	ax = ax - 0x200<16>
	SCZO = cond(ax)
	v21 = Mem0[ss:bp - 0x1E<16>:word16] + ax
	Mem0[ss:bp - 0x1E<16>:word16] = v21
	SCZO = cond(v21)
	// succ:  l09BD_5E45
l09BD_5E45:
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	v22 = Mem0[ss:bp - 0x1E<16>:word16] - ax
	Mem0[ss:bp - 0x1E<16>:word16] = v22
	SCZO = cond(v22)
	ax = Mem0[ss:bp - 2<16>:word16]
	ax = ax + 0x10<16>
	SCZO = cond(ax)
	cx = cx - cx
	SCZO = cond(cx)
	Mem0[ss:bp - 0x18<16>:word16] = cx
	Mem0[ss:bp - 0x16<16>:word16] = ax
	v23 = Mem0[ss:bp - 0x1E<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v23
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_5FE9 (retsize: 2;)
	sp = sp + 6<16>
	SCZO = cond(sp)
	SCZO = cond(ax - Mem0[ss:bp - 0x1E<16>:word16])
	branch Test(GE,SO) l09BD_5E6C
	// succ:  l09BD_5E69 l09BD_5E6C
l09BD_5E69:
	goto l09BD_5F8B
	// succ:  l09BD_5F8B
l09BD_5E6C:
	Mem0[ss:bp - 0x13<16>:byte] = 0x26<8>
	ax = Mem0[ss:bp - 2<16>:word16]
	Mem0[ss:bp - 0xE<16>:word16] = ax
	cx = bp - 0x14<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_26C0 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:bp - 2<16>:word16]
	ax = ax - 1<16>
	SZO = cond(ax)
	bx = 3<16>
	es = ax
	ax = Mem0[es:bx:word16]
	cx = Mem0[ss:bp - 2<16>:word16]
	bx = bx - bx
	SCZO = cond(bx)
	Mem0[ss:bp - 0x26<16>:word16] = bx
	Mem0[ss:bp - 0x24<16>:word16] = cx
	bl = bl | 2<8>
	SZO = cond(bl)
	C = false
	es = cx
	Mem0[es:bx:word16] = ax
	ax = Mem0[ss:bp - 0x26<16>:word16]
	dx = Mem0[ss:bp - 0x24<16>:word16]
	al = al | 0x18<8>
	SZO = cond(al)
	C = false
	cx = 0x18<16>
	bx = Mem0[ds:0xCEA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	di = ax
	si = cx
	es = dx
	ds = bx
	cx = 0xA<16>
	// succ:  l09BD_5EBB
l09BD_5EBB:
	branch cx == 0<16> l09BD_5EBD
	// succ:  l09BD_5EBB_1 l09BD_5EBD
l09BD_5EBB_1:
	v27 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v27
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_5EBB
	// succ:  l09BD_5EBB
l09BD_5EBD:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ds:si + 0x18<16>:word16]
	ax = ax - 0x1C<16>
	SCZO = cond(ax)
	cx = Mem0[ss:bp - 0x1C<16>:word16]
	Mem0[ss:bp - 6<16>:word16] = ax
	Mem0[ss:bp - 4<16>:word16] = cx
	ax = Mem0[ds:si + 6<16>:word16]
	Mem0[ss:bp - 0x1A<16>:word16] = ax
	goto l09BD_5EF1
	// succ:  l09BD_5EF1
l09BD_5ED6:
	ax = Mem0[ss:bp - 0x16<16>:word16]
	es_bx = Mem0[ss:bp - 6<16>:segptr32]
	cx = Mem0[es:bx + 2<16>:word16]
	bx = Mem0[es:bx:word16]
	bx = bx + Mem0[ss:bp - 0x18<16>:word16]
	SCZO = cond(bx)
	cx = cx + ax + C
	SCZO = cond(cx)
	es = cx
	v31 = Mem0[es:bx:word16] + ax
	Mem0[es:bx:word16] = v31
	SCZO = cond(v31)
	v32 = Mem0[ss:bp - 6<16>:word16] + 4<16>
	Mem0[ss:bp - 6<16>:word16] = v32
	SCZO = cond(v32)
	// succ:  l09BD_5EF1
l09BD_5EF1:
	v28 = Mem0[ss:bp - 0x1A<16>:word16] - 1<16>
	Mem0[ss:bp - 0x1A<16>:word16] = v28
	SZO = cond(v28)
	branch Test(NS,S) l09BD_5ED6
	// succ:  l09BD_5EF6 l09BD_5ED6
l09BD_5EF6:
	Mem0[ss:bp - 0x20<16>:word16] = 0x15E8<16>
	ax = si + 0x68<16>
	Mem0[ss:bp - 0x22<16>:word16] = ax
	goto l09BD_5F0E
	// succ:  l09BD_5F0E
l09BD_5F03:
	bx = Mem0[ss:bp - 0x20<16>:word16]
	v43 = Mem0[ss:bp - 0x20<16>:word16] + 1<16>
	Mem0[ss:bp - 0x20<16>:word16] = v43
	SZO = cond(v43)
	SCZO = cond(Mem0[ds:bx:byte] - 0<8>)
	branch Test(NE,Z) l09BD_5F03
	// succ:  l09BD_5F0E l09BD_5F03
l09BD_5F0E:
	bx = Mem0[ss:bp - 0x20<16>:word16]
	ax = Mem0[ds:bx:word16]
	bx = Mem0[ss:bp - 0x22<16>:word16]
	v33 = Mem0[ss:bp - 0x22<16>:word16] + 2<16>
	Mem0[ss:bp - 0x22<16>:word16] = v33
	SCZO = cond(v33)
	Mem0[ds:bx:word16] = ax
	v34 = Mem0[ss:bp - 0x20<16>:word16] + 2<16>
	Mem0[ss:bp - 0x20<16>:word16] = v34
	SCZO = cond(v34)
	SCZO = cond(Mem0[ds:bx:word16] - 0xFFFF<16>)
	branch Test(NE,Z) l09BD_5F03
	// succ:  l09BD_5F25 l09BD_5F03
l09BD_5F25:
	ax = bp - 0x1A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = si + 0x68<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	v35 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v35
	call fn09BD_68E7 (retsize: 2;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 6<16>:word16] = ax
	Mem0[ss:bp - 4<16>:word16] = dx
	v36 = Mem0[ss:bp - 0x1C<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v36
	call fn09BD_5D98 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v37 = Mem0[ss:bp - 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v37
	call fn09BD_5D98 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ss:bp - 4<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_5F8B
	// succ:  l09BD_5F51 l09BD_5F8B
l09BD_5F51:
	v38 = Mem0[ss:bp - 0x1A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v38
	call fn0800_0B12 (retsize: 4;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_5F84
	// succ:  l09BD_5F5E l09BD_5F84
l09BD_5F5E:
	v39 = Mem0[ss:bp - 0x1A<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v39
	ax = 0x15E8<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	v40 = Mem0[ds:0x9B4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v40
	v41 = Mem0[ss:bp - 6<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v41
	v42 = Mem0[ss:bp - 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v42
	call fn09BD_60E8 (retsize: 2;)
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	ax = Mem0[ss:bp - 0x1A<16>:word16]
	ax = ax + 0x15E8<16>
	SCZO = cond(ax)
	Mem0[ds:0xF22<16>:word16] = ax
	ax = ax + 1<16>
	SZO = cond(ax)
	al = al & 0xFE<8>
	SZO = cond(al)
	C = false
	Mem0[ds:0xCDC<16>:word16] = ax
	// succ:  l09BD_5F84
l09BD_5F84:
	v44 = Mem0[ss:bp - 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v44
	call fn09BD_5D98 (retsize: 2;)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_5F8B
l09BD_5F8B:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_5DB8_exit
fn09BD_5DB8_exit:


// fn09BD_5F9E
// Return size: 2
define fn09BD_5F9E
fn09BD_5F9E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5F9E
l09BD_5F9E:
	bx = sp
	dx = Mem0[ds:bx + 2<16>:word16]
	ax = 0x3D00<16>
	C = msdos_open_file(ds_dx, al, out ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	Mem0[ds:0xE70<16>:word16] = ax
	return
	// succ:  fn09BD_5F9E_exit
fn09BD_5F9E_exit:


// fn09BD_5FB0
// Return size: 2
define fn09BD_5FB0
fn09BD_5FB0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5FB0
l09BD_5FB0:
	bx = sp
	dx = Mem0[ds:bx + 2<16>:word16]
	cx = Mem0[ds:bx + 4<16>:word16]
	bx = Mem0[ds:0xE70<16>:word16]
	ax = 0x4200<16>
	C = msdos_set_file_position(bx, cx_dx, al, dx_ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	dx = dx | bx
	SZO = cond(dx)
	C = false
	return
	// succ:  fn09BD_5FB0_exit
fn09BD_5FB0_exit:


// fn09BD_5FC8
// Return size: 2
define fn09BD_5FC8
fn09BD_5FC8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5FC8
l09BD_5FC8:
	bx = sp
	dx = Mem0[ds:bx + 2<16>:word16]
	cx = Mem0[ds:bx + 4<16>:word16]
	bx = Mem0[ds:0xE70<16>:word16]
	ah = 0x3F<8>
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	return
	// succ:  fn09BD_5FC8_exit
fn09BD_5FC8_exit:


// fn09BD_5FDD
// Return size: 2
define fn09BD_5FDD
fn09BD_5FDD_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5FDD
l09BD_5FDD:
	bx = 0xFFFF<16>
	v4 = Mem0[ds:0xE70<16>:word16]
	Mem0[ds:0xE70<16>:word16] = bx
	bx = v4
	ah = 0x3E<8>
	C = msdos_close_file(bx)
	return
	// succ:  fn09BD_5FDD_exit
fn09BD_5FDD_exit:


// fn09BD_5FE9
// Return size: 2
define fn09BD_5FE9
fn09BD_5FE9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_5FE9
l09BD_5FE9:
	bx = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ax = Mem0[ds:0xE70<16>:word16]
	cx = Mem0[ds:bx + 6<16>:word16]
	dx = Mem0[ds:bx + 2<16>:word16]
	ds = Mem0[ds:bx + 4<16>:selector]
	v9 = bx
	bx = ax
	ax = v9
	ah = 0x3F<8>
	C = msdos_read_file(bx, cx, ds_dx, out ax)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = bx - bx - C
	SCZO = cond(bx)
	ax = ax | bx
	SZO = cond(ax)
	C = false
	return
	// succ:  fn09BD_5FE9_exit
fn09BD_5FE9_exit:


// fn09BD_600E
// Return size: 2
define fn09BD_600E
fn09BD_600E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_600E
l09BD_600E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	dx = di
	bx = si
	ax = ds
	es = ax
	si = Mem0[ss:bp + 4<16>:word16]
	di = Mem0[ss:bp + 6<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_6024
l09BD_6024:
	branch cx == 0<16> l09BD_6026
	// succ:  l09BD_6024_1 l09BD_6026
l09BD_6024_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_6024
	// succ:  l09BD_6026 l09BD_6024
l09BD_6026:
	cx = ~cx
	di = di - cx
	SCZO = cond(di)
	// succ:  l09BD_602A
l09BD_602A:
	branch cx == 0<16> l09BD_602C
	// succ:  l09BD_602A_2 l09BD_602C
l09BD_602A_2:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(NE,Z) l09BD_602A
	// succ:  l09BD_602C l09BD_602A
l09BD_602C:
	branch Test(EQ,Z) l09BD_6033
	// succ:  l09BD_602E l09BD_6033
l09BD_602E:
	ax = ax - ax - C
	SCZO = cond(ax)
	ax = ax - 0xFFFF<16> - C
	SCZO = cond(ax)
	// succ:  l09BD_6033
l09BD_6033:
	si = bx
	di = dx
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_600E_exit
fn09BD_600E_exit:


// fn09BD_603A
// Return size: 2
define fn09BD_603A
fn09BD_603A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_603A
l09BD_603A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:bp + 4<16>:word16]
	si = Mem0[ss:bp + 6<16>:word16]
	bx = di
	cx = Mem0[ss:bp + 8<16>:word16]
	branch cx == 0<16> l09BD_605A
	// succ:  l09BD_604E l09BD_605A
l09BD_604E:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_6056
	// succ:  l09BD_6053 l09BD_6056
l09BD_6053:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_604E
	// succ:  l09BD_6056 l09BD_604E
l09BD_6056:
	al = al ^ al
	SZO = cond(al)
	C = false
	// succ:  l09BD_6058
l09BD_6058:
	branch cx == 0<16> l09BD_605A
	// succ:  l09BD_6058_1 l09BD_605A
l09BD_6058_1:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_6058
	// succ:  l09BD_6058
l09BD_605A:
	ax = bx
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_603A_exit
fn09BD_603A_exit:


// fn09BD_6062
// Return size: 2
define fn09BD_6062
fn09BD_6062_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6062
l09BD_6062:
	// succ:  l09BD_6062_thunk_fn09BD_61D4
l09BD_6062_thunk_fn09BD_61D4:
	call fn09BD_61D4 (retsize: 0;)
	return
	// succ:  fn09BD_6062_exit
fn09BD_6062_exit:


// fn09BD_6066
// Return size: 0
define fn09BD_6066
fn09BD_6066_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6066
l09BD_6066:
	// succ:  l09BD_6066_thunk_fn09BD_61D4
l09BD_6066_thunk_fn09BD_61D4:
	call fn09BD_61D4 (retsize: 0;)
	return
	// succ:  fn09BD_6066_exit
fn09BD_6066_exit:


// fn09BD_606A
// Return size: 2
define fn09BD_606A
fn09BD_606A_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_606A
l09BD_606A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 0xA<16>
	SCZO = cond(sp)
	Mem0[ss:bp - 0xA<16>:byte] = 0xCD<8>
	ax = Mem0[ss:bp + 4<16>:word16]
	Mem0[ss:bp - 9<16>:byte] = al
	SCZO = cond(al - 0x25<8>)
	branch Test(EQ,Z) l09BD_608A
	// succ:  l09BD_6080 l09BD_608A
l09BD_6080:
	SCZO = cond(al - 0x26<8>)
	branch Test(EQ,Z) l09BD_608A
	// succ:  l09BD_6084 l09BD_608A
l09BD_6084:
	Mem0[ss:bp - 8<16>:byte] = 0xCB<8>
	goto l09BD_6096
	// succ:  l09BD_6096
l09BD_608A:
	Mem0[ss:bp - 6<16>:byte] = 0xCB<8>
	Mem0[ss:bp - 7<16>:byte] = 0x44<8>
	Mem0[ss:bp - 8<16>:byte] = 0x44<8>
	// succ:  l09BD_6096
l09BD_6096:
	Mem0[ss:bp - 0xC<16>:word16] = ss
	ax = bp - 0xA<16>
	Mem0[ss:bp - 0xE<16>:word16] = ax
	di = Mem0[ss:bp + 6<16>:word16]
	ax = Mem0[ds:di:word16]
	bx = Mem0[ds:di + 2<16>:word16]
	cx = Mem0[ds:di + 4<16>:word16]
	dx = Mem0[ds:di + 6<16>:word16]
	si = Mem0[ds:di + 8<16>:word16]
	di = Mem0[ds:di + 0xA<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	call Mem0[ss:bp - 0xE<16>:ptr32] (retsize: 4;)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	D = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 8<16>:word16]
	Mem0[ds:di:word16] = ax
	Mem0[ds:di + 2<16>:word16] = bx
	Mem0[ds:di + 4<16>:word16] = cx
	Mem0[ds:di + 6<16>:word16] = dx
	Mem0[ds:di + 8<16>:word16] = si
	Mem0[ds:di + 0xA<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(ULT,C) l09BD_60D4
	// succ:  l09BD_60D0 l09BD_60D4
l09BD_60D0:
	si = si ^ si
	SZO = cond(si)
	C = false
	goto l09BD_60DC
	// succ:  l09BD_60DC
l09BD_60D4:
	call fn09BD_27CE (retsize: 2;)
	si = 1<16>
	ax = Mem0[ds:di:word16]
	// succ:  l09BD_60DC
l09BD_60DC:
	Mem0[ds:di + 0xC<16>:word16] = si
	sp = sp + 0xA<16>
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_606A_exit
fn09BD_606A_exit:


// fn09BD_60E8
// Return size: 2
define fn09BD_60E8
fn09BD_60E8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_60E8
l09BD_60E8:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ds = Mem0[ss:bp + 4<16>:selector]
	si = Mem0[ss:bp + 6<16>:word16]
	es = Mem0[ss:bp + 8<16>:selector]
	di = Mem0[ss:bp + 0xA<16>:word16]
	cx = Mem0[ss:bp + 0xC<16>:word16]
	// succ:  l09BD_60FD
l09BD_60FD:
	branch cx == 0<16> l09BD_60FF
	// succ:  l09BD_60FD_1 l09BD_60FF
l09BD_60FD_1:
	v10 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v10
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_60FD
	// succ:  l09BD_60FD
l09BD_60FF:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_60E8_exit
fn09BD_60E8_exit:


// fn09BD_6106
// Return size: 2
define fn09BD_6106
fn09BD_6106_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6106
l09BD_6106:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	di = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_6116
l09BD_6116:
	branch cx == 0<16> l09BD_6118
	// succ:  l09BD_6116_1 l09BD_6118
l09BD_6116_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_6116
	// succ:  l09BD_6118 l09BD_6116
l09BD_6118:
	cx = cx + 1<16>
	SZO = cond(cx)
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0<16>
	al = Mem0[ss:bp + 6<16>:byte]
	di = bx
	// succ:  l09BD_6120
l09BD_6120:
	branch cx == 0<16> l09BD_6122
	// succ:  l09BD_6120_2 l09BD_6122
l09BD_6120_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_6120
	// succ:  l09BD_6122 l09BD_6120
l09BD_6122:
	di = di - 1<16>
	SZO = cond(di)
	SCZO = cond(Mem0[ds:di:byte] - al)
	branch Test(EQ,Z) l09BD_6129
	// succ:  l09BD_6127 l09BD_6129
l09BD_6127:
	di = di ^ di
	SZO = cond(di)
	C = false
	// succ:  l09BD_6129
l09BD_6129:
	ax = di
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6106_exit
fn09BD_6106_exit:


// fn09BD_6130
// Return size: 2
define fn09BD_6130
fn09BD_6130_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6130
l09BD_6130:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:bp + 6<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_6142
l09BD_6142:
	branch cx == 0<16> l09BD_6144
	// succ:  l09BD_6142_1 l09BD_6144
l09BD_6142_1:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_6142
	// succ:  l09BD_6144 l09BD_6142
l09BD_6144:
	cx = ~cx
	cx = cx - 1<16>
	SZO = cond(cx)
	branch cx == 0<16> l09BD_6183
	// succ:  l09BD_6149 l09BD_6183
l09BD_6149:
	cx = cx - 1<16>
	SZO = cond(cx)
	Mem0[ss:bp - 2<16>:word16] = cx
	di = Mem0[ss:bp + 4<16>:word16]
	bx = di
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0xFFFF<16>
	// succ:  l09BD_6157
l09BD_6157:
	branch cx == 0<16> l09BD_6159
	// succ:  l09BD_6157_2 l09BD_6159
l09BD_6157_2:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_6157
	// succ:  l09BD_6159 l09BD_6157
l09BD_6159:
	cx = ~cx
	cx = cx - 1<16>
	SZO = cond(cx)
	dx = cx
	dx = dx - Mem0[ss:bp - 2<16>:word16]
	SCZO = cond(dx)
	branch Test(ULE,CZ) l09BD_6188
	// succ:  l09BD_6163 l09BD_6188
l09BD_6163:
	di = bx
	// succ:  l09BD_6165
l09BD_6165:
	si = Mem0[ss:bp + 6<16>:word16]
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	di = bx
	cx = dx
	// succ:  l09BD_616D
l09BD_616D:
	branch cx == 0<16> l09BD_616F
	// succ:  l09BD_616D_3 l09BD_616F
l09BD_616D_3:
	SCZO = cond(al - Mem0[es:di:byte])
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(EQ,Z) l09BD_616D
	// succ:  l09BD_616F l09BD_616D
l09BD_616F:
	branch Test(NE,Z) l09BD_6188
	// succ:  l09BD_6171 l09BD_6188
l09BD_6171:
	dx = cx
	bx = di
	cx = Mem0[ss:bp - 2<16>:word16]
	branch cx == 0<16> l09BD_617E
	// succ:  l09BD_617A l09BD_617E
l09BD_617A:
	branch cx == 0<16> l09BD_617C
	// succ:  l09BD_617A_4 l09BD_617C
l09BD_617A_4:
	SCZO = cond(Mem0[ds:si:byte] - Mem0[es:di:byte])
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	branch Test(NE,Z) l09BD_617A
	// succ:  l09BD_617C l09BD_617A
l09BD_617C:
	branch Test(NE,Z) l09BD_6165
	// succ:  l09BD_617E l09BD_6165
l09BD_617E:
	ax = bx - 1<16>
	goto l09BD_618A
	// succ:  l09BD_618A
l09BD_6183:
	ax = Mem0[ss:bp + 4<16>:word16]
	goto l09BD_618A
	// succ:  l09BD_618A
l09BD_6188:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_618A
l09BD_618A:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6130_exit
fn09BD_6130_exit:


// fn09BD_6190
// Return size: 2
define fn09BD_6190
fn09BD_6190_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6190
l09BD_6190:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	bx = Mem0[ss:bp + 4<16>:word16]
	ax = Mem0[ds:bx:word16]
	dx = Mem0[ds:bx + 2<16>:word16]
	cx = Mem0[ss:bp + 6<16>:word16]
	call fn09BD_2794 (retsize: 2;)
	Mem0[ds:bx:word16] = ax
	Mem0[ds:bx + 2<16>:word16] = dx
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6190_exit
fn09BD_6190_exit:


// fn09BD_61C8
// Return size: 2
define fn09BD_61C8
fn09BD_61C8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_61C8
l09BD_61C8:
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	branch cx == 0<16> l09BD_61D2
	// succ:  l09BD_61CC l09BD_61D2
l09BD_61CC:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v9 = (ax & 1<16> << 1<8>) != 0<16>
	ax = __rcr(ax, 1<8>, C)
	C = v9
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_61CC
	// succ:  l09BD_61D2 l09BD_61CC
l09BD_61D2:
	return
	// succ:  fn09BD_61C8_exit
fn09BD_61C8_exit:


// fn09BD_61D4
// Return size: 0
define fn09BD_61D4
fn09BD_61D4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_61D4
l09BD_61D4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = Mem0[ss:bp + 4<16>:word16]
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx_ax = CONVERT(ax, int16, int32)
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	// succ:  l09BD_61E1
l09BD_61E1:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SCZO = cond(al - 0x20<8>)
	branch Test(EQ,Z) l09BD_61E1
	// succ:  l09BD_61E6 l09BD_61E1
l09BD_61E6:
	SCZO = cond(al - 9<8>)
	branch Test(EQ,Z) l09BD_61E1
	// succ:  l09BD_61EA l09BD_61E1
l09BD_61EA:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	SCZO = cond(al - 0x2D<8>)
	branch Test(EQ,Z) l09BD_61F3
	// succ:  l09BD_61EF l09BD_61F3
l09BD_61EF:
	SCZO = cond(al - 0x2B<8>)
	branch Test(NE,Z) l09BD_61F4
	// succ:  l09BD_61F3 l09BD_61F4
l09BD_61F3:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	// succ:  l09BD_61F4
l09BD_61F4:
	SCZO = cond(al - 0x39<8>)
	branch Test(UGT,CZ) l09BD_6217
	// succ:  l09BD_61F8 l09BD_6217
l09BD_61F8:
	al = al - 0x30<8>
	SCZO = cond(al)
	branch Test(ULT,C) l09BD_6217
	// succ:  l09BD_61FC l09BD_6217
l09BD_61FC:
	bx = bx << 1<16>
	SCZO = cond(bx)
	v19 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl(dx, 1<8>, C)
	C = v19
	cx = bx
	di = dx
	bx = bx << 1<16>
	SCZO = cond(bx)
	v21 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl(dx, 1<8>, C)
	C = v21
	bx = bx << 1<16>
	SCZO = cond(bx)
	v21 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl(dx, 1<8>, C)
	C = v21
	bx = bx + cx
	SCZO = cond(bx)
	dx = dx + di + C
	SCZO = cond(dx)
	bx = bx + ax
	SCZO = cond(bx)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	goto l09BD_61F3
	// succ:  l09BD_61F3
l09BD_6217:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(al - 0x2D<8>)
	v22 = bx
	bx = ax
	ax = v22
	branch Test(NE,Z) l09BD_6224
	// succ:  l09BD_621D l09BD_6224
l09BD_621D:
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0<16>
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	dx = -dx
	SCZO = cond(dx)
	C = dx == 0<16>
	// succ:  l09BD_6224
l09BD_6224:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_61D4_exit
fn09BD_61D4_exit:


// fn09BD_6230
// Return size: 2
define fn09BD_6230
fn09BD_6230_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6230
l09BD_6230:
	bx = sp
	bx = Mem0[ds:bx + 2<16>:word16]
	Mem0[ds:0x9BA<16>:word16] = bx
	SCZO = cond(Mem0[ds:0x2F<16>:byte] - 3<8>)
	branch Test(ULT,C) l09BD_6250
	// succ:  l09BD_6240 l09BD_6250
l09BD_6240:
	Mem0[0x9BD<16>:0x31F<16>:byte] = 0x66<8>
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 2<8>)
	branch Test(NE,Z) l09BD_6250
	// succ:  l09BD_624D l09BD_6250
l09BD_624D:
	bx = 0x2814<16>
	// succ:  l09BD_6250
l09BD_6250:
	ax = Mem0[0x9BD<16>:bx - 4<16>:word16]
	Mem0[ds:0x9BC<16>:word16] = ax
	ax = Mem0[0x9BD<16>:bx - 2<16>:word16]
	Mem0[ds:0x9BE<16>:word16] = ax
	return
	// succ:  fn09BD_6230_exit
fn09BD_6230_exit:


// fn09BD_625F
// Return size: 2
define fn09BD_625F
fn09BD_625F_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_625F
	// succ:  l09BD_625F
l09BD_0251_in_fn09BD_625F:
	call fn09BD_0246 (retsize: 2;)
	sp = Mem0[ds:0x996<16>:word16]
	bp = sp
	di = Mem0[ss:bp + 0xE<16>:word16]
	Mem0[0x9BD<16>:0xC<16>:word16] = di
	ax = Mem0[ss:bp + 2<16>:word16]
	Mem0[0x9BD<16>:0xE<16>:word16] = ax
	call fn09BD_0290 (retsize: 2;)
	si = bp + 0x1E<16>
	D = false
	es_di = Mem0[0x9BD<16>:0xC<16>:segptr32]
	v18 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v18
	si = si + 4<i16>
	di = di + 4<i16>
	v19 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v19
	si = si + 4<i16>
	di = di + 4<i16>
	v20 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v20
	si = si + 4<i16>
	di = di + 4<i16>
	Mem0[ds:0x996<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp + 1<16>
	SZO = cond(sp)
	sp = sp + 1<16>
	SZO = cond(sp)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	sp = sp + 2<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ss = Mem0[0x9BD<16>:0xE<16>:selector]
	sp = Mem0[0x9BD<16>:0xC<16>:word16]
	SCZO = Mem0[ss:sp:word32]
	sp = sp + 4<16>
	return
	// succ:  fn09BD_625F_exit
l09BD_625F:
	sp = Mem0[ds:0xCDA<16>:word16]
	Mem0[ds:0xF88<16>:word16] = __smsw()
	call fn09BD_3829 (retsize: 2;)
	call fn09BD_0C0D (retsize: 2;)
	Mem0[ds:0x35<16>:byte] = cl
	Mem0[ds:0x37<16>:byte] = cl
	call fn09BD_2F8F (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_62A3
	// succ:  l09BD_6280 l09BD_62A3
l09BD_6280:
	call fn09BD_199A (retsize: 2;)
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0xA<8>)
	branch Test(NE,Z) l09BD_628D
	// succ:  l09BD_628A l09BD_628D
l09BD_628A:
	call fn09BD_6497 (retsize: 2;)
	// succ:  l09BD_628D
l09BD_628D:
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 9<8>)
	branch Test(NE,Z) l09BD_6297
	// succ:  l09BD_6294 l09BD_6297
l09BD_6294:
	call fn09BD_63FD (retsize: 2;)
	// succ:  l09BD_6297
l09BD_6297:
	call fn09BD_016C (retsize: 2;)
	call fn09BD_6586 (retsize: 2;)
	Mem0[ds:0xAC2<16>:word16] = 0x32<16>
	// succ:  l09BD_62A3
l09BD_62A3:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xF8A<16>
	call fn09BD_1280 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	es = Mem0[ds:0xCEA<16>:selector]
	bx = 0xA<16>
	ax = Mem0[es:bx:word16]
	Mem0[ds:0x10C2<16>:word16] = ax
	ax = Mem0[es:bx + 2<16>:word16]
	Mem0[ds:0x10C4<16>:word16] = ax
	Mem0[ds:0xF50<16>:word16] = sp
	SCZO = cond(Mem0[ds:0x2E<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_62D5
	// succ:  l09BD_62C9 l09BD_62D5
l09BD_62C9:
	Mem0[es:bx:word16] = 0x10<16>
	Mem0[es:bx + 2<16>:word16] = cs
	goto l09BD_0251_in_fn09BD_625F
	// succ:  l09BD_0251_in_fn09BD_625F
l09BD_62D5:
	call fn09BD_7270 (retsize: 2;)
	// succ:  l09BD_62D5_thunk_fn09BD_62D8
l09BD_62D5_thunk_fn09BD_62D8:
	call fn09BD_62D8 (retsize: 0;)
	return
	// succ:  fn09BD_625F_exit
fn09BD_625F_exit:


// fn09BD_62D8
// Return size: 2
define fn09BD_62D8
fn09BD_62D8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_62D8
l09BD_62D8:
	v3 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v3
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ax = 0<16>
	ds = ax
	si = 0x2F6<16>
	D = true
	// succ:  l09BD_62E3
l09BD_62E3:
	bx = si
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	dx = ax
	ax = Mem0[ds:si:word16]
	si = si - 2<i16>
	// succ:  l09BD_62E9
l09BD_62E9:
	SCZO = cond(bx - 0x2FA<16>)
	branch Test(UGE,C) l09BD_62E3
	// succ:  l09BD_62EF l09BD_62E3
l09BD_62EF:
	bx = bx + 1<16>
	SZO = cond(bx)
	bx = bx + 1<16>
	SZO = cond(bx)
	SCZO = cond(Mem0[ds:bx:word16] - ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	bx = bx + 1<16>
	SZO = cond(bx)
	bx = bx + 1<16>
	SZO = cond(bx)
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch Test(NE,Z) l09BD_62E9
	// succ:  l09BD_62F9 l09BD_62E9
l09BD_62F9:
	SCZO = cond(Mem0[ds:bx:word16] - dx)
	branch Test(NE,Z) l09BD_62E9
	// succ:  l09BD_62FD l09BD_62E9
l09BD_62FD:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x56<16>:word16] = ax
	Mem0[ds:0x58<16>:word16] = dx
	di = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	sp = sp + 2<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	D = false
	return
	// succ:  fn09BD_62D8_exit
fn09BD_62D8_exit:


// fn09BD_6375
// Return size: 2
define fn09BD_6375
fn09BD_6375_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6375
l09BD_6375:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	di = 0x6321<16>
	// succ:  l09BD_6379
l09BD_6379:
	di = di + 0xE<16>
	SCZO = cond(di)
	SCZO = cond(Mem0[0x9BD<16>:di:word16] - 1<16>)
	branch Test(EQ,Z) l09BD_6387
	// succ:  l09BD_6382 l09BD_6387
l09BD_6382:
	SCZO = cond(Mem0[0x9BD<16>:di:word16] - si)
	branch Test(NE,Z) l09BD_6379
	// succ:  l09BD_6387 l09BD_6379
l09BD_6387:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = 0x4A<16>
	D = false
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	cx = 6<16>
	// succ:  l09BD_6394
l09BD_6394:
	branch cx == 0<16> l09BD_6397
	// succ:  l09BD_6394_1 l09BD_6397
l09BD_6394_1:
	v13 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v13
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_6394
	// succ:  l09BD_6394
l09BD_6397:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(Mem0[ds:0x34<16>:byte] - 0x15<8>)
	branch Test(NE,Z) l09BD_63A4
	// succ:  l09BD_639F l09BD_63A4
l09BD_639F:
	Mem0[ds:0x34<16>:byte] = 0x7F<8>
	// succ:  l09BD_63A4
l09BD_63A4:
	bx = 0<16>
	es = bx
	bl = Mem0[ds:0x34<16>:byte]
	bx = bx << 2<16>
	SCZO = cond(bx)
	ds_di = Mem0[ds:bx + 0<16>:segptr32]
	ax = ds
	Mem0[ss:0xF86<16>:word16] = ax
	Mem0[ss:0xF84<16>:word16] = di
	ax = ax - Mem0[ds:di - 2<16>:word16]
	SCZO = cond(ax)
	di = di - Mem0[ds:di - 4<16>:word16]
	SCZO = cond(di)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = ax | di
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_63D3
	// succ:  l09BD_63CA l09BD_63D3
l09BD_63CA:
	Mem0[es:bx:word16] = 0x9F9<16>
	Mem0[es:bx + 2<16>:word16] = ds
	// succ:  l09BD_63D3
l09BD_63D3:
	al = Mem0[ds:0x34<16>:byte]
	Mem0[0x9BD<16>:0xEF5<16>:byte] = al
	Mem0[0x9BD<16>:0x982E<16>:byte] = al
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6375_exit
fn09BD_6375_exit:


// fn09BD_63E0
// Return size: 2
define fn09BD_63E0
fn09BD_63E0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_63E0
l09BD_63E0:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	cl = 0x82<8>
	__syscall(0xDC<8>)
	al = bl
	al = al | bh
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_63FC
	// succ:  l09BD_63EE l09BD_63FC
l09BD_63EE:
	bx = bx << 6<16>
	SCZO = cond(bx)
	Mem0[ds:0xECA<16>:word16] = bx
	dx = dx << 6<16>
	SCZO = cond(dx)
	Mem0[ds:0xECE<16>:word16] = dx
	// succ:  l09BD_63FC
l09BD_63FC:
	return
	// succ:  fn09BD_63E0_exit
fn09BD_63E0_exit:


// fn09BD_63FD
// Return size: 0
define fn09BD_63FD
fn09BD_63FD_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_63FD
l09BD_63FD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	__cli()
	call fn09BD_0BE9 (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ds = ax
	v9 = Mem0[ds:0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v9
	v10 = Mem0[ds:2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v10
	v11 = Mem0[ds:4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	Mem0[ss:0xF7A<16>:word16] = sp
	cx = 0x14<16>
	// succ:  l09BD_641A
l09BD_641A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_641A
	// succ:  l09BD_641D l09BD_641A
l09BD_641D:
	Mem0[ds:0x469<16>:word16] = ss
	Mem0[ds:0x467<16>:word16] = sp
	al = 0xF<8>
	__outb(0x70<8>, al)
	Mem0[ds:0<16>:byte] = 0xEA<8>
	Mem0[ds:1<16>:word16] = 0x6465<16>
	Mem0[ds:3<16>:word16] = cs
	al = 9<8>
	__outb(0x71<8>, al)
	__lgdt(Mem0[ss:0x8C8<16>:word48])
	__lidt(Mem0[ss:0x8D0<16>:word48])
	ax = __smsw()
	al = al | 1<8>
	SZO = cond(al)
	C = false
	__lmsw(ax)
	call fn0018_6455 (retsize: 0;)
	return
	// succ:  fn09BD_63FD_exit
fn09BD_63FD_exit:


// fn09BD_6497
// Return size: 0
define fn09BD_6497
fn09BD_6497_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6497
l09BD_6497:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	__cli()
	call fn09BD_0BE9 (retsize: 2;)
	al = __inb(0x21<8>)
	ah = al
	al = 0xFF<8>
	__outb(0x21<8>, al)
	al = __inb(0xA1<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	al = ~al
	__outb(0xA1<8>, al)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	ds = ax
	al = 0xF<8>
	__outb(0x70<8>, al)
	Mem0[ds:0x469<16>:word16] = cs
	Mem0[ds:0x467<16>:word16] = 0x64E6<16>
	al = 0xA<8>
	__outb(0x71<8>, al)
	Mem0[ss:0xF7A<16>:word16] = sp
	__lgdt(Mem0[ss:0x8C8<16>:word48])
	__lidt(Mem0[ss:0x8D0<16>:word48])
	ax = __smsw()
	al = al | 1<8>
	SZO = cond(al)
	C = false
	__lmsw(ax)
	call fn0018_64DF (retsize: 0;)
	return
	// succ:  fn09BD_6497_exit
fn09BD_6497_exit:


// fn09BD_6538
// Return size: 2
define fn09BD_6538
fn09BD_6538_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6538
l09BD_6538:
	ah = 0x35<8>
	al = Mem0[ds:0x34<16>:byte]
	es_bx = msdos_get_interrupt_vector(al)
	Mem0[0x9BD<16>:0x12C4<16>:word16] = bx
	Mem0[0x9BD<16>:0x12C6<16>:word16] = es
	SCZO = cond(Mem0[ds:0xA2<16>:word16] - 0<16>)
	branch Test(NE,Z) l09BD_6585
	// succ:  l09BD_6550 l09BD_6585
l09BD_6550:
	si = si ^ si
	SZO = cond(si)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xBF01<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	call Mem0[0x9BD<16>:0x12C4<16>:ptr32] (retsize: 4;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_6584
	// succ:  l09BD_6562 l09BD_6584
l09BD_6562:
	Mem0[ds:0xA16<16>:byte] = 0<8>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = 0x98<16>
	ds = dx
	cx = 0xC<16>
	// succ:  l09BD_6571
l09BD_6571:
	branch cx == 0<16> l09BD_6573
	// succ:  l09BD_6571_1 l09BD_6573
l09BD_6571_1:
	v20 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v20
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_6571
	// succ:  l09BD_6571
l09BD_6573:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0xA4<16>:word16] = 0<16>
	Mem0[ds:0xA6<16>:word16] = 0<16>
	call fn09BD_4FD8 (retsize: 2;)
	// succ:  l09BD_6584
l09BD_6584:
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	// succ:  l09BD_6585
l09BD_6585:
	return
	// succ:  fn09BD_6538_exit
fn09BD_6538_exit:


// fn09BD_6586
// Return size: 2
define fn09BD_6586
fn09BD_6586_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6586
l09BD_6586:
	call fn09BD_6538 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_6590
	// succ:  l09BD_658D l09BD_6590
l09BD_658D:
	call fn09BD_5666 (retsize: 2;)
	// succ:  l09BD_6590
l09BD_6590:
	dx = 0x12CC<16>
	ah = 0x25<8>
	al = Mem0[ds:0x34<16>:byte]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x12CA<16>:word16] = cs
	msdos_set_interrupt_vector(al, ds_dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6586_exit
fn09BD_6586_exit:


// fn09BD_65A3
// Return size: 2
define fn09BD_65A3
fn09BD_65A3_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_65A3
l09BD_65A3:
	ax = Mem0[ds:0xCDC<16>:word16]
	ax = ax + 1<16>
	SZO = cond(ax)
	al = al & 0xFE<8>
	SZO = cond(al)
	C = false
	bx = sp
	cx = Mem0[ds:bx + 2<16>:word16]
	cx = cx + ax
	SCZO = cond(cx)
	branch Test(ULT,C) l09BD_65BD
	// succ:  l09BD_65B2 l09BD_65BD
l09BD_65B2:
	SCZO = cond(cx - Mem0[ds:0xCE4<16>:word16])
	branch Test(UGT,CZ) l09BD_65BD
	// succ:  l09BD_65B8 l09BD_65BD
l09BD_65B8:
	Mem0[ds:0xCDC<16>:word16] = cx
	return
	// succ:  fn09BD_65A3_exit
l09BD_65BD:
	ax = 0xFFFF<16>
	return
	// succ:  fn09BD_65A3_exit
fn09BD_65A3_exit:


// fn09BD_65C1
// Return size: 2
define fn09BD_65C1
fn09BD_65C1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_65C1
l09BD_65C1:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ah = ah & 0xF0<8>
	SZO = cond(ah)
	C = false
	SCZO = cond(ah - 0xF0<8>)
	branch Test(EQ,Z) l09BD_65F4
	// succ:  l09BD_65D0 l09BD_65F4
l09BD_65D0:
	v11 = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v11
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(bx - sp)
	branch Test(NE,Z) l09BD_65EF
	// succ:  l09BD_65D6 l09BD_65EF
l09BD_65D6:
	ax = 0xF000<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx & ax
	SZO = cond(bx)
	C = false
	branch Test(EQ,Z) l09BD_65EA
	// succ:  l09BD_65E1 l09BD_65EA
l09BD_65E1:
	ax = 3<16>
	Mem0[ds:0x10F2<16>:word32] = eax
	goto l09BD_65F6
	// succ:  l09BD_65F6
l09BD_65EA:
	ax = 2<16>
	goto l09BD_65F6
	// succ:  l09BD_65F6
l09BD_65EF:
	ax = 1<16>
	goto l09BD_65F6
	// succ:  l09BD_65F6
l09BD_65F4:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_65F6
l09BD_65F6:
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_65C1_exit
fn09BD_65C1_exit:


// fn09BD_65F8
// Return size: 2
define fn09BD_65F8
fn09BD_65F8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_65F8
l09BD_65F8:
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = SCZDOP
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = SCZDOP
	edx = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	ecx = edx
	C = __btc(edx, 0x15<8>, out edx)
	C = __btc(edx, 0x12<8>, out edx)
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = edx
	SCZDOP = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = SCZDOP
	edx = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	ax = 3<16>
	edx = edx ^ ecx
	SZO = cond(edx)
	C = false
	edx = edx >>u 0x13<32>
	SCZO = cond(edx)
	branch Test(UGE,C) l09BD_6632
	// succ:  l09BD_661F l09BD_6632
l09BD_661F:
	ax = ax + 1<16>
	SZO = cond(ax)
	SZO = cond(dl & 4<8>)
	C = false
	branch Test(EQ,Z) l09BD_6632
	// succ:  l09BD_6625 l09BD_6632
l09BD_6625:
	eax = 1<32>
	__cpuid(eax, ecx, &eax, &ebx, &ecx, &edx)
	al = ah
	ax = ax & 0xF<16>
	SZO = cond(ax)
	C = false
	// succ:  l09BD_6632
l09BD_6632:
	SCZDOP = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	return
	// succ:  fn09BD_65F8_exit
fn09BD_65F8_exit:


// fn09BD_6635
// Return size: 2
define fn09BD_6635
fn09BD_6635_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6635
l09BD_6635:
	ax = 0x3300<16>
	__syscall(0x21<8>)
	cl = dl
	bx = sp
	dl = Mem0[ds:bx + 2<16>:byte]
	ax = ax + 1<16>
	SZO = cond(ax)
	__syscall(0x21<8>)
	v9 = cx
	cx = ax
	ax = v9
	ax = CONVERT(al, int8, int16)
	return
	// succ:  fn09BD_6635_exit
fn09BD_6635_exit:


// fn09BD_6647
// Return size: 2
define fn09BD_6647
fn09BD_6647_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6647
l09BD_6647:
	al = 0xFF<8>
	__outb(0x94<8>, al)
	// succ:  l09BD_664D
l09BD_664D:
	al = al ^ al
	SZO = cond(al)
	C = false
	__outb(0x96<8>, al)
	return
	// succ:  fn09BD_6647_exit
fn09BD_6647_exit:


// fn09BD_6652
// Return size: 2
define fn09BD_6652
fn09BD_6652_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6652
l09BD_6652:
	SCZO = cond(Mem0[ds:0x34<16>:byte] - 0x15<8>)
	ax = 0<16>
	branch Test(NE,Z) l09BD_6681
	// succ:  l09BD_665C l09BD_6681
l09BD_665C:
	ah = 0xC0<8>
	C = bios_get_system_configuration(out ah, out es, out bx)
	ax = 0<16>
	branch Test(ULT,C) l09BD_6681
	// succ:  l09BD_6665 l09BD_6681
l09BD_6665:
	cx = Mem0[es:bx + 2<16>:word16]
	SCZO = cond(cl - 0xE0<8>)
	branch Test(ULT,C) l09BD_6681
	// succ:  l09BD_666E l09BD_6681
l09BD_666E:
	SCZO = cond(cl - 0xF8<8>)
	branch Test(LE,SZO) l09BD_667D
	// succ:  l09BD_6673 l09BD_667D
l09BD_6673:
	SCZO = cond(cl - 0xFC<8>)
	branch Test(NE,Z) l09BD_6681
	// succ:  l09BD_6678 l09BD_6681
l09BD_6678:
	SCZO = cond(ch - 4<8>)
	branch Test(LT,SO) l09BD_6681
	// succ:  l09BD_667D l09BD_6681
l09BD_667D:
	al = Mem0[es:bx + 5<16>:byte]
	// succ:  l09BD_6681
l09BD_6681:
	return
	// succ:  fn09BD_6652_exit
fn09BD_6652_exit:


// fn09BD_6682
// Return size: 2
define fn09BD_6682
fn09BD_6682_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6682
l09BD_6682:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	ax = 0xF000<16>
	es = ax
	ax = 0<16>
	cl = Mem0[es:0xFFFE<16>:byte]
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	SCZO = cond(cl - 0xE1<8>)
	branch Test(NE,Z) l09BD_6698
	// succ:  l09BD_6696 l09BD_6698
l09BD_6696:
	ax = cx
	// succ:  l09BD_6698
l09BD_6698:
	return
	// succ:  fn09BD_6682_exit
fn09BD_6682_exit:


// fn09BD_6699
// Return size: 2
define fn09BD_6699
fn09BD_6699_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6699
l09BD_6699:
	call fn09BD_0C0D (retsize: 2;)
	al = 0x45<8>
	call fn09BD_0733 (retsize: 2;)
	SZO = cond(al & 0x80<8>)
	C = false
	branch Test(NE,Z) l09BD_66B1
	// succ:  l09BD_66A5 l09BD_66B1
l09BD_66A5:
	cx = -cx
	SCZO = cond(cx)
	C = cx == 0<16>
	ch = ch & 0x40<8>
	SZO = cond(ch)
	C = false
	ch = ch ^ al
	SZO = cond(ch)
	C = false
	branch Test(EQ,Z) l09BD_66B1
	// succ:  l09BD_66AE l09BD_66B1
l09BD_66AE:
	al = 1<8>
	return
	// succ:  fn09BD_6699_exit
l09BD_66B1:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	return
	// succ:  fn09BD_6699_exit
fn09BD_6699_exit:


// fn09BD_66B4
// Return size: 2
define fn09BD_66B4
fn09BD_66B4_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_66B4
l09BD_66B4:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ah = ah & 0xCF<8>
	SZO = cond(ah)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	SCZDOP = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = SCZDOP
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax & 0x3000<16>
	SZO = cond(ax)
	C = false
	return
	// succ:  fn09BD_66B4_exit
fn09BD_66B4_exit:


// fn09BD_66C1
// Return size: 2
define fn09BD_66C1
fn09BD_66C1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_66C1
l09BD_66C1:
	bx = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	es = ax
	cx = Mem0[ss:bx + 8<16>:word16]
	di = Mem0[ss:bx + 6<16>:word16]
	si = Mem0[ss:bx + 4<16>:word16]
	ds = Mem0[ss:bx + 2<16>:selector]
	D = false
	// succ:  l09BD_66DB
l09BD_66DB:
	branch cx == 0<16> l09BD_66DD
	// succ:  l09BD_66DB_1 l09BD_66DD
l09BD_66DB_1:
	v12 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v12
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_66DB
	// succ:  l09BD_66DB
l09BD_66DD:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_66C1_exit
fn09BD_66C1_exit:


// fn09BD_672C
// Return size: 0
define fn09BD_672C
fn09BD_672C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_672C
l09BD_672C:
	cx = 6<16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	// succ:  l09BD_6734
l09BD_6734:
	ax = ax << 1<16>
	SCZO = cond(ax)
	v11 = (dx & 1<16> << 0x10<8> - 1<8>) != 0<16>
	dx = __rcl(dx, 1<8>, C)
	C = v11
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_6734
	// succ:  l09BD_673A l09BD_6734
l09BD_673A:
	call bx (retsize: 0;)
	return
	// succ:  fn09BD_672C_exit
fn09BD_672C_exit:


// fn09BD_6849
// Return size: 2
define fn09BD_6849
fn09BD_6849_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6849
l09BD_6849:
	bx = sp
	dx = Mem0[ds:bx + 4<16>:word16]
	bx = Mem0[ds:bx + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	cx = 0x2C<16>
	si = 0x6741<16>
	// succ:  l09BD_685D
l09BD_685D:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	v12 = di
	di = ax
	ax = v12
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	SCZO = cond(ax - dx)
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	branch Test(NE,Z) l09BD_6869
	// succ:  l09BD_6865 l09BD_6869
l09BD_6865:
	SCZO = cond(di - bx)
	branch Test(EQ,Z) l09BD_6871
	// succ:  l09BD_6869 l09BD_6871
l09BD_6869:
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_685D
	// succ:  l09BD_686B l09BD_685D
l09BD_686B:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	goto l09BD_6879
	// succ:  l09BD_6879
l09BD_6871:
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	dx = ax
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	ax = ax << 4<16>
	SCZO = cond(ax)
	// succ:  l09BD_6879
l09BD_6879:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6849_exit
fn09BD_6849_exit:


// fn09BD_687E
// Return size: 2
define fn09BD_687E
fn09BD_687E_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_687E
l09BD_687E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = si ^ si
	SZO = cond(si)
	C = false
	cx = 0x4000<16>
	// succ:  l09BD_6881_thunk_fn09BD_6884
l09BD_6881_thunk_fn09BD_6884:
	call fn09BD_6884 (retsize: 0;)
	return
	// succ:  fn09BD_687E_exit
fn09BD_687E_exit:


// fn09BD_6884
// Return size: 0
define fn09BD_6884
fn09BD_6884_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6884
l09BD_6884:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xF000<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	goto l09BD_688A_thunk_fn09BD_688C
	// succ:  l09BD_688A_thunk_fn09BD_688C
l09BD_6884:
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xF000<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	goto l09BD_688A_thunk_fn09BD_688C
	// succ:  l09BD_688A_thunk_fn09BD_688C
l09BD_688A_thunk_fn09BD_688C:
	call fn09BD_688C (retsize: 0;)
	return
	// succ:  fn09BD_6884_exit
l09BD_688A_thunk_fn09BD_688C:
	call fn09BD_688C (retsize: 0;)
	return
	// succ:  fn09BD_6884_exit
fn09BD_6884_exit:


// fn09BD_688C
// Return size: 0
define fn09BD_688C
fn09BD_688C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_688C
l09BD_688C:
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	bx = bx + ax
	SCZO = cond(bx)
	ax = Mem0[ds:si:word16]
	si = si + 2<i16>
	dx = dx + ax + C
	SCZO = cond(dx)
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_688C
	// succ:  l09BD_6894 l09BD_688C
l09BD_6894:
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	v13 = bx
	bx = ax
	ax = v13
	return
	// succ:  fn09BD_688C_exit
fn09BD_688C_exit:


// fn09BD_6899
// Return size: 0
define fn09BD_6899
fn09BD_6899_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6899
l09BD_6899:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	si = 0x8000<16>
	cx = 0x2000<16>
	// succ:  l09BD_68A0_thunk_fn09BD_6884
l09BD_68A0_thunk_fn09BD_6884:
	call fn09BD_6884 (retsize: 0;)
	return
	// succ:  fn09BD_6899_exit
fn09BD_6899_exit:


// fn09BD_68A2
// Return size: 2
define fn09BD_68A2
fn09BD_68A2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_68A2
l09BD_68A2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xFFFF<16>
	ax = __smsw()
	SZO = cond(al & 4<8>)
	C = false
	branch Test(NE,Z) l09BD_68C9
	// succ:  l09BD_68B0 l09BD_68C9
l09BD_68B0:
	__fninit()
	Mem0[ss:bp - 2<16>:word16] = CONVERT(FPUF, byte, word16) << 8<i16>
	SCZO = cond(Mem0[ss:bp - 2<16>:byte] - cl)
	branch Test(NE,Z) l09BD_68C9
	// succ:  l09BD_68BA l09BD_68C9
l09BD_68BA:
	Mem0[ss:bp - 2<16>:word16] = __fstcw()
	ax = Mem0[ss:bp - 2<16>:word16]
	ax = ax & 0x103F<16>
	SZO = cond(ax)
	C = false
	SCZO = cond(ax - 0x3F<16>)
	branch Test(NE,Z) l09BD_68C9
	// succ:  l09BD_68C8 l09BD_68C9
l09BD_68C8:
	cx = cx + 1<16>
	SZO = cond(cx)
	// succ:  l09BD_68C9
l09BD_68C9:
	sp = bp
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v14 = cx
	cx = ax
	ax = v14
	return
	// succ:  fn09BD_68A2_exit
fn09BD_68A2_exit:


// fn09BD_68CC
// Return size: 2
define fn09BD_68CC
fn09BD_68CC_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_68CC
l09BD_68CC:
	ax = 1<16>
	SCZO = cond(Mem0[ds:0xCEC<16>:byte] - 2<8>)
	branch Test(ULE,CZ) l09BD_68E4
	// succ:  l09BD_68D6 l09BD_68E4
l09BD_68D6:
	sp = sp - 0x22<16>
	SCZO = cond(sp)
	dx = sp
	ax = 0x3800<16>
	__syscall(0x21<8>)
	sp = sp + 0x22<16>
	SCZO = cond(sp)
	v8 = bx
	bx = ax
	ax = v8
	// succ:  l09BD_68E4
l09BD_68E4:
	return
	// succ:  fn09BD_68CC_exit
fn09BD_68CC_exit:


// fn09BD_68E7
// Return size: 4
define fn09BD_68E7
fn09BD_68E7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_68E7
l09BD_68E7:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	dx = Mem0[ss:bp + 4<16>:word16]
	bx = dx
	dx = dx + 0x10<16>
	SCZO = cond(dx)
	di = 0x80<16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	es = ax
	v14 = Mem0[es:2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v14
	v15 = Mem0[es:0<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v15
	es = bx
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	ax = 0x6936<16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = cs
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = Mem0[ss:bp + 8<16>:word16]
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = ss
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	al = 0xD<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	Mem0[0x9BD<16>:0x68E5<16>:word16] = sp
	bx = Mem0[ss:bp + 6<16>:word16]
	ax = Mem0[ds:bx + 0x16<16>:word16]
	ax = ax + dx
	SCZO = cond(ax)
	cx = Mem0[ds:bx + 0x14<16>:word16]
	dx = dx + Mem0[ds:bx + 0xE<16>:word16]
	SCZO = cond(dx)
	ss = dx
	sp = Mem0[ds:bx + 0x10<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	return
	// succ:  fn09BD_68E7_exit
fn09BD_68E7_exit:


// fn09BD_696B
// Return size: 2
define fn09BD_696B
fn09BD_696B_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_696B
l09BD_696B:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(NE,Z) l09BD_698B
	// succ:  l09BD_6972 l09BD_698B
l09BD_6972:
	ax = 0xBFDE<16>
	bx = 8<16>
	cx = cs
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	call fn09BD_0EF4 (retsize: 2;)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l09BD_698B
	// succ:  l09BD_6983 l09BD_698B
l09BD_6983:
	v13 = Mem0[ds:0x47<16>:byte] | al
	Mem0[ds:0x47<16>:byte] = v13
	SZO = cond(Mem0[ds:0x47<16>:byte])
	C = false
	Mem0[ds:0xDEC<16>:word16] = dx
	// succ:  l09BD_698B
l09BD_698B:
	return
	// succ:  fn09BD_696B_exit
fn09BD_696B_exit:


// fn09BD_698C
// Return size: 2
define fn09BD_698C
fn09BD_698C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_698C
l09BD_698C:
	bx = 0xB<16>
	ax = 0xBFDE<16>
	// succ:  l09BD_6992_thunk_fn09BD_0EF4
l09BD_6992_thunk_fn09BD_0EF4:
	call fn09BD_0EF4 (retsize: 0;)
	return
	// succ:  fn09BD_698C_exit
fn09BD_698C_exit:


// fn09BD_69A7
// Return size: 2
define fn09BD_69A7
fn09BD_69A7_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_69A7
l09BD_69A7:
	call fn09BD_0C0D (retsize: 2;)
	SCZO = cond(cl - 1<8>)
	dx = dx - dx - C
	SCZO = cond(dx)
	al = __inb(0x92<8>)
	bx = ax
	bx = bx & 2<16>
	SZO = cond(bx)
	C = false
	SCZO = cond(bl - 2<8>)
	bx = bx - bx - C
	SCZO = cond(bx)
	bx = bx ^ dx
	SZO = cond(bx)
	C = false
	si = si | bx
	SZO = cond(si)
	C = false
	return
	// succ:  fn09BD_69A7_exit
fn09BD_69A7_exit:


// fn09BD_69C0
// Return size: 2
define fn09BD_69C0
fn09BD_69C0_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_69C0
l09BD_69C0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	si = si ^ si
	SZO = cond(si)
	C = false
	call fn09BD_69A7 (retsize: 2;)
	branch Test(NE,Z) l09BD_6A09
	// succ:  l09BD_69C9 l09BD_6A09
l09BD_69C9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	al = al ^ 2<8>
	SZO = cond(al)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	__outb(0x92<8>, al)
	call fn09BD_69A7 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ch = al
	cx = cx & 0x303<16>
	SZO = cond(cx)
	C = false
	SCZO = cond(ch - cl)
	branch Test(NE,Z) l09BD_6A09
	// succ:  l09BD_69DE l09BD_6A09
l09BD_69DE:
	al = al ^ 2<8>
	SZO = cond(al)
	C = false
	__outb(0x92<8>, al)
	dx = dx ^ bx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_6A09
	// succ:  l09BD_69E6 l09BD_6A09
l09BD_69E6:
	call fn09BD_69A7 (retsize: 2;)
	branch Test(NE,Z) l09BD_6A09
	// succ:  l09BD_69EB l09BD_6A09
l09BD_69EB:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	si = 0x6995<16>
	di = 0xBE9<16>
	cx = 9<16>
	// succ:  l09BD_69F8
l09BD_69F8:
	branch cx == 0<16> l09BD_69FA
	// succ:  l09BD_69F8_1 l09BD_69FA
l09BD_69F8_1:
	v20 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v20
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_69F8
	// succ:  l09BD_69F8
l09BD_69FA:
	di = 0xBFB<16>
	cx = 9<16>
	// succ:  l09BD_6A00
l09BD_6A00:
	branch cx == 0<16> l09BD_6A02
	// succ:  l09BD_6A00_1 l09BD_6A02
l09BD_6A00_1:
	v21 = Mem0[ds:si:byte]
	Mem0[es:di:byte] = v21
	si = si + 1<i16>
	di = di + 1<i16>
	cx = cx - 1<16>
	goto l09BD_6A00
	// succ:  l09BD_6A00
l09BD_6A02:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x3F<16>:byte] = 0xFF<8>
	// succ:  l09BD_6A09
l09BD_6A09:
	__sti()
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_69C0_exit
fn09BD_69C0_exit:


// fn09BD_6A0D
// Return size: 2
define fn09BD_6A0D
fn09BD_6A0D_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6A0D
l09BD_6A0D:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	call fn09BD_6A48 (retsize: 2;)
	si = Mem0[ss:bp + 6<16>:word16]
	SZO = cond(si & si)
	C = false
	branch Test(EQ,Z) l09BD_6A22
	// succ:  l09BD_6A1A l09BD_6A22
l09BD_6A1A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = 0xA2C<16>
	D = false
	goto l09BD_6A40
	// succ:  l09BD_6A40
l09BD_6A22:
	si = Mem0[ss:bp + 4<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	D = false
	di = 0xA2C<16>
	bx = di
	// succ:  l09BD_6A2D
l09BD_6A2D:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	SZO = cond(al & al)
	C = false
	branch Test(EQ,Z) l09BD_6A3B
	// succ:  l09BD_6A32 l09BD_6A3B
l09BD_6A32:
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	SCZO = cond(al - 0x5C<8>)
	branch Test(NE,Z) l09BD_6A2D
	// succ:  l09BD_6A37 l09BD_6A2D
l09BD_6A37:
	bx = di
	goto l09BD_6A2D
	// succ:  l09BD_6A2D
l09BD_6A3B:
	di = bx
	si = 0xA7C<16>
	// succ:  l09BD_6A40
l09BD_6A40:
	al = Mem0[ds:si:byte]
	si = si + 1<i16>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	SZO = cond(al & al)
	C = false
	branch Test(NE,Z) l09BD_6A40
	// succ:  l09BD_6A46 l09BD_6A40
l09BD_6A46:
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6A0D_exit
fn09BD_6A0D_exit:


// fn09BD_6A48
// Return size: 2
define fn09BD_6A48
fn09BD_6A48_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6A48
l09BD_6A48:
	Mem0[ds:0x1586<16>:word16] = ds
	ax = 0x98<16>
	Mem0[ds:0x1584<16>:word16] = ax
	Mem0[ds:0x158E<16>:word16] = 0x20<16>
	Mem0[ds:0x158C<16>:word16] = 0x70<16>
	Mem0[ds:0x158A<16>:word16] = 0x1BA6<16>
	ax = 0x1D2F<16>
	ax = ax - 0x1D26<16>
	SCZO = cond(ax)
	Mem0[ds:0x1590<16>:word16] = ax
	ax = ds
	eax = CONVERT(ax, word16, word32)
	eax = eax << 4<32>
	SCZO = cond(eax)
	bx = 0x98E<16>
	ebx = CONVERT(bx, word16, word32)
	eax = eax + ebx
	SCZO = cond(eax)
	Mem0[ds:0x1598<16>:word32] = eax
	Mem0[ds:0x1596<16>:word16] = 1<16>
	return
	// succ:  fn09BD_6A48_exit
fn09BD_6A48_exit:


// fn09BD_6C54
// Return size: 2
define fn09BD_6C54
fn09BD_6C54_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6C54
l09BD_6C54:
	ax = 0x4300<16>
	msdos_multiplex(ah, al)
	SCZO = cond(al - 0x80<8>)
	branch Test(EQ,Z) l09BD_6C5F
	// succ:  l09BD_6C5D l09BD_6C5F
l09BD_6C5D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_6C5F
l09BD_6C5F:
	v11 = Mem0[ds:0x36<16>:byte] | al
	Mem0[ds:0x36<16>:byte] = v11
	SZO = cond(Mem0[ds:0x36<16>:byte])
	C = false
	return
	// succ:  fn09BD_6C54_exit
fn09BD_6C54_exit:


// fn09BD_6C64
// Return size: 2
define fn09BD_6C64
fn09BD_6C64_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_6C64
	// succ:  l09BD_6C64
l09BD_6C4A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x26<16>
	call fn09BD_14AC (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	goto l09BD_6C9F
	// succ:  l09BD_6C9F
l09BD_6C64:
	call fn09BD_6C54 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_6C6C
	// succ:  l09BD_6C6B l09BD_6C6C
l09BD_6C6B:
	return
	// succ:  fn09BD_6C64_exit
l09BD_6C6C:
	ax = 0x4310<16>
	msdos_multiplex(ah, al)
	Mem0[ds:0xAEC<16>:word16] = bx
	Mem0[ds:0xAEE<16>:word16] = es
	ah = ah ^ ah
	SZO = cond(ah)
	C = false
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ah = ah - 1<8>
	SZO = cond(ah)
	branch Test(LE,SZO) l09BD_6C4A
	// succ:  l09BD_6C83 l09BD_6C4A
l09BD_6C83:
	SCZO = cond(bx - 0x204<16>)
	branch Test(UGE,C) l09BD_6C90
	// succ:  l09BD_6C89 l09BD_6C90
l09BD_6C89:
	Mem0[0x9BD<16>:0x1DEA<16>:word16] = 0x40<16>
	// succ:  l09BD_6C90
l09BD_6C90:
	ah = 8<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ax = ax - Mem0[0x9BD<16>:0x1DEA<16>:word16]
	SCZO = cond(ax)
	branch Test(UGE,C) l09BD_6C9F
	// succ:  l09BD_6C9D l09BD_6C9F
l09BD_6C9D:
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_6C9F
l09BD_6C9F:
	ax = ax | ax
	SZO = cond(ax)
	C = false
	Mem0[ds:0xECE<16>:word16] = ax
	branch Test(EQ,Z) l09BD_6D03
	// succ:  l09BD_6CA6 l09BD_6D03
l09BD_6CA6:
	SCZO = cond(ax - Mem0[ds:0xECC<16>:word16])
	branch Test(ULT,C) l09BD_6CAF
	// succ:  l09BD_6CAC l09BD_6CAF
l09BD_6CAC:
	ax = Mem0[ds:0xECC<16>:word16]
	// succ:  l09BD_6CAF
l09BD_6CAF:
	Mem0[ds:0xECC<16>:word16] = ax
	v15 = dx
	dx = ax
	ax = v15
	ah = 9<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_6D03
	// succ:  l09BD_6CBD l09BD_6D03
l09BD_6CBD:
	Mem0[ds:0xADC<16>:word16] = dx
	ah = 0xC<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(NE,Z) l09BD_6CD0
	// succ:  l09BD_6CCB l09BD_6CD0
l09BD_6CCB:
	call fn09BD_1DEC (retsize: 2;)
	goto l09BD_6D03
	// succ:  l09BD_6D03
l09BD_6CD0:
	bx = bx + 0xF<16>
	SCZO = cond(bx)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	cx = 4<16>
	// succ:  l09BD_6CD9
l09BD_6CD9:
	dx = dx >>u 1<16>
	SCZO = cond(dx)
	v17 = (bx & 1<16> << 1<8>) != 0<16>
	bx = __rcr(bx, 1<8>, C)
	C = v17
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_6CD9
	// succ:  l09BD_6CDF l09BD_6CD9
l09BD_6CDF:
	Mem0[ds:0x98<16>:word16] = bx
	Mem0[ds:0x9A<16>:word16] = dx
	Mem0[ds:0xAA6<16>:word16] = 0x3E15<16>
	Mem0[ds:0xAA4<16>:word16] = 0x3DE0<16>
	ax = 0x400<16>
	dx_ax = Mem0[ds:0xECC<16>:word16] *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:0xAA8<16>:word16] = ax
	Mem0[ds:0xAAA<16>:word16] = dx
	goto l09BD_6D09
	// succ:  l09BD_6D09
l09BD_6D03:
	Mem0[ds:0xECC<16>:word16] = 0<16>
	// succ:  l09BD_6D09
l09BD_6D09:
	al = 1<8>
	return
	// succ:  fn09BD_6C64_exit
fn09BD_6C64_exit:


// fn09BD_6D7C
// Return size: 2
define fn09BD_6D7C
fn09BD_6D7C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6D7C
l09BD_6D7C:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	ax = 0x1687<16>
	msdos_multiplex(ah, al)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	ax = 0<16>
	branch Test(NE,Z) l09BD_6D9F
	// succ:  l09BD_6D8A l09BD_6D9F
l09BD_6D8A:
	Mem0[0x9BD<16>:0x6D44<16>:word16] = si
	Mem0[0x9BD<16>:0x6E66<16>:word16] = di
	Mem0[0x9BD<16>:0x6E68<16>:word16] = es
	al = cl
	Mem0[ds:0xC42<16>:byte] = dh
	// succ:  l09BD_6D9F
l09BD_6D9F:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6D7C_exit
fn09BD_6D7C_exit:


// fn09BD_6DA2
// Return size: 2
define fn09BD_6DA2
fn09BD_6DA2_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_6DA2
l09BD_6DA2:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = esi
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = edi
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = edx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	ax = Mem0[ss:bp + 4<16>:word16]
	bp = Mem0[ss:bp + 6<16>:word16]
	cx = Mem0[ss:bp + 4<16>:word16]
	dx = Mem0[ss:bp + 6<16>:word16]
	si = Mem0[ss:bp + 8<16>:word16]
	di = Mem0[ss:bp + 0xA<16>:word16]
	bx = Mem0[ss:bp + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	__syscall(0x31<8>)
	Mem0[ss:bp + 0<16>:word16] = ax
	Mem0[ss:bp + 2<16>:word16] = bx
	Mem0[ss:bp + 4<16>:word16] = cx
	Mem0[ss:bp + 6<16>:word16] = dx
	Mem0[ss:bp + 8<16>:word16] = si
	Mem0[ss:bp + 0xA<16>:word16] = di
	ax = 0<16>
	C = !C
	v17 = (ax & 1<16> << 0x10<8> - 1<8>) != 0<16>
	ax = __rcl(ax, 1<8>, C)
	C = v17
	edx = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	edi = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	esi = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_6DA2_exit
fn09BD_6DA2_exit:


// fn09BD_6E00
// Return size: 2
define fn09BD_6E00
fn09BD_6E00_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_6E00
	// succ:  l09BD_6E00
l09BD_6DED:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x20<16>
	call fn09BD_229D (retsize: 2;)
	v26 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v26
	SCZO = cond(v26)
	v27 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v28
	SCZO = cond(v28)
	v29 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v29
	SCZO = cond(v29)
	v30 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v30
	SCZO = cond(v30)
	v31 = Mem0[ds:bx + si:byte] + al
	Mem0[ds:bx + si:byte] = v31
	SCZO = cond(v31)
	// succ:  l09BD_6E00
l09BD_6E00:
	Mem0[0x9BD<16>:0x6DF4<16>:word32] = esi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	Mem0[0x9BD<16>:0x6DF8<16>:word32] = edi
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	Mem0[0x9BD<16>:0x6DFC<16>:word32] = edx
	edx = edx ^ edx
	SZO = cond(edx)
	C = false
	di = 0xC1E<16>
	cx = 0x11<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_6E25
l09BD_6E25:
	branch cx == 0<16> l09BD_6E27
	// succ:  l09BD_6E25_1 l09BD_6E27
l09BD_6E25_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_6E25
	// succ:  l09BD_6E25
l09BD_6E27:
	Mem0[ds:0xC2E<16>:word16] = 0x40<16>
	ah = 0x48<8>
	bx = 0x200<16>
	C = msdos_allocate_memory_block(bx)
	branch Test(ULT,C) l09BD_6E4F
	// succ:  l09BD_6E36 l09BD_6E4F
l09BD_6E36:
	Mem0[ds:0xC32<16>:word16] = ax
	es = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = 0x1000<16>
	di = ax
	// succ:  l09BD_6E42
l09BD_6E42:
	branch cx == 0<16> l09BD_6E44
	// succ:  l09BD_6E42_1 l09BD_6E44
l09BD_6E42_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_6E42
	// succ:  l09BD_6E42
l09BD_6E44:
	ah = 0x48<8>
	bx = Mem0[0x9BD<16>:0x6D44<16>:word16]
	C = msdos_allocate_memory_block(bx)
	branch Test(UGE,C) l09BD_6E52
	// succ:  l09BD_6E4F l09BD_6E52
l09BD_6E4F:
	goto l09BD_713B
	// succ:  l09BD_713B
l09BD_6E52:
	es = ax
	call fn09BD_74FE (retsize: 2;)
	ax = Mem0[ds:0xF50<16>:word16]
	ax = ax + 0x2A<16>
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x17C2<16>:word16] = ax
	ax = 1<16>
	call fn09BD_6DA2 (retsize: 4;)
	branch Test(ULT,C) l09BD_6DED
	// succ:  l09BD_6E6C l09BD_6DED
l09BD_6E6C:
	D = false
	Mem0[ss:0xAC2<16>:word16] = 0x71DC<16>
	Mem0[ss:0xC30<16>:word16] = ds
	Mem0[ds:0x207E<16>:word16] = ss
	Mem0[ss:0xC28<16>:word16] = es
	Mem0[ss:0x9B2<16>:word16] = es
	ax = Mem0[es:0x2C<16>:word16]
	Mem0[ss:0xC2A<16>:word16] = ax
	Mem0[ss:8<16>:word16] = ds
	Mem0[ds:0x17C0<16>:word16] = cs
	Mem0[ds:0x17C4<16>:word16] = ss
	sp = sp - 8<16>
	SCZO = cond(sp)
	bx = ss
	di = sp
	es = bx
	ax = 0xB<16>
	__syscall(0x31<8>)
	v23 = Mem0[es:di + 6<16>:byte] & 0xBF<8>
	Mem0[es:di + 6<16>:byte] = v23
	SZO = cond(Mem0[es:di + 6<16>:byte])
	C = false
	ax = 0xC<16>
	__syscall(0x31<8>)
	bx = ds
	di = sp
	es = bx
	ax = 0xB<16>
	__syscall(0x31<8>)
	v24 = Mem0[es:di + 6<16>:byte] & 0xBF<8>
	Mem0[es:di + 6<16>:byte] = v24
	SZO = cond(Mem0[es:di + 6<16>:byte])
	C = false
	ax = 0xC<16>
	__syscall(0x31<8>)
	sp = sp + 8<16>
	SCZO = cond(sp)
	si = 0x6D1D<16>
	ax = 0xA00<16>
	__syscall(0x31<8>)
	ax = 0x305<16>
	__syscall(0x31<8>)
	Mem0[ds:0x6D2E<16>:word16] = cx
	Mem0[ds:0x6D30<16>:word16] = bx
	Mem0[ds:0x6D34<16>:word32] = edi
	Mem0[ds:0x6D38<16>:word16] = si
	Mem0[ds:0x6D32<16>:word16] = ax
	ax = 0x306<16>
	__syscall(0x31<8>)
	branch Test(UGE,C) l09BD_6EF7
	// succ:  l09BD_6EF4 l09BD_6EF7
l09BD_6EF4:
	goto l09BD_713B
	// succ:  l09BD_713B
l09BD_6EF7:
	Mem0[ds:0x6D3A<16>:word16] = cx
	Mem0[ds:0x6D3C<16>:word16] = bx
	Mem0[ds:0x6D3E<16>:word32] = edi
	Mem0[ds:0x6D42<16>:word16] = si
	bl = 0x21<8>
	ax = 0x204<16>
	__syscall(0x31<8>)
	Mem0[ds:0x6D46<16>:word32] = edx
	Mem0[ds:0x6D4A<16>:word16] = cx
	Mem0[ss:0xC40<16>:word16] = cx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = 0xC0<16>
	call fn09BD_75E1 (retsize: 4;)
	Mem0[ds:0xC24<16>:word16] = cs
	Mem0[ds:0xAF8<16>:word16] = cs
	Mem0[ds:0xC26<16>:word16] = ss
	__sti()
	Mem0[ds:0x2C<16>:word16] = ss
	Mem0[ds:0x18<16>:word16] = cs
	Mem0[ds:0x1C<16>:word16] = cs
	Mem0[ds:0x22<16>:word16] = 0x7344<16>
	Mem0[ds:0x24<16>:word16] = cs
	Mem0[ds:0xC<16>:word16] = ss
	Mem0[ds:0x3C<16>:word16] = ss
	Mem0[ds:0x998<16>:word16] = ss
	Mem0[ds:0x44<16>:word16] = ss
	ax = 0x203<16>
	bl = 0x11<8>
	cx = cs
	dx = 0x6D4C<16>
	// succ:  l09BD_6F65
l09BD_6F65:
	__syscall(0x31<8>)
	dx = dx + 4<16>
	SCZO = cond(dx)
	bl = bl - 1<8>
	SZO = cond(bl)
	SCZO = cond(bl - 6<8>)
	branch Test(UGE,C) l09BD_6F65
	// succ:  l09BD_6F71 l09BD_6F65
l09BD_6F71:
	bl = 0xD<8>
	dx = 0x6A9B<16>
	__syscall(0x31<8>)
	dx = 0x71D4<16>
	cx = cs
	bl = 3<8>
	ax = 0x205<16>
	__syscall(0x31<8>)
	dx = 0x730B<16>
	bl = 1<8>
	__syscall(0x31<8>)
	dx = 0x71D8<16>
	bl = 0<8>
	__syscall(0x31<8>)
	dx = 0x7560<16>
	bl = 0x23<8>
	__syscall(0x31<8>)
	SCZO = cond(Mem0[0x9BD<16>:0x6D2B<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_6FA6
	// succ:  l09BD_6FA1 l09BD_6FA6
l09BD_6FA1:
	ax = 0x1682<16>
	msdos_multiplex(ah, al)
	// succ:  l09BD_6FA6
l09BD_6FA6:
	ax = 3<16>
	__syscall(0x31<8>)
	Mem0[ds:0xC46<16>:word16] = ax
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	// succ:  l09BD_6FB0
l09BD_6FB0:
	cx = cx + 1<16>
	SZO = cond(cx)
	ax = ax >>u 1<16>
	SCZO = cond(ax)
	branch Test(UGE,C) l09BD_6FB0
	// succ:  l09BD_6FB5 l09BD_6FB0
l09BD_6FB5:
	Mem0[ds:0xC44<16>:word16] = cx
	cx = 6<16>
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	__syscall(0x31<8>)
	branch Test(UGE,C) l09BD_6FC5
	// succ:  l09BD_6FC2 l09BD_6FC5
l09BD_6FC2:
	goto l09BD_713B
	// succ:  l09BD_713B
l09BD_6FC5:
	Mem0[ds:0xC2C<16>:word16] = ax
	v36 = bx
	bx = ax
	ax = v36
	ax = 8<16>
	cx = 0xFFFF<16>
	dx = cx
	__syscall(0x31<8>)
	branch Test(ULT,C) l09BD_6FC2
	// succ:  l09BD_6FD5 l09BD_6FC2
l09BD_6FD5:
	bx = bx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(bx)
	Mem0[ds:0xC36<16>:word16] = bx
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	__syscall(0x31<8>)
	branch Test(ULT,C) l09BD_6FC2
	// succ:  l09BD_6FE3 l09BD_6FC2
l09BD_6FE3:
	bx = bx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(bx)
	Mem0[ds:0xC3C<16>:word16] = bx
	__syscall(0x31<8>)
	branch Test(ULT,C) l09BD_6FC2
	// succ:  l09BD_6FEF l09BD_6FC2
l09BD_6FEF:
	sp = sp - 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	di = sp
	bx = bx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(bx)
	Mem0[ds:0xC3A<16>:word16] = bx
	Mem0[ds:0xAF4<16>:word16] = bx
	Mem0[ds:0xA00<16>:word16] = bx
	Mem0[ds:0xA08<16>:word16] = bx
	ax = 0xB<16>
	__syscall(0x31<8>)
	call fn09BD_1F19 (retsize: 2;)
	ax = ax - 1<16>
	SZO = cond(ax)
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = Mem0[ds:0xA10<16>:word16]
	cx = 0x10<16>
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v38 = dx
	dx = ax
	ax = v38
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	di = sp
	ax = 0xC<16>
	__syscall(0x31<8>)
	ds = bx
	Mem0[ds:0x54E0<16>:word16] = ss
	ax = cs
	Mem0[ds:0x3E63<16>:word16] = ax
	Mem0[ds:0x403<16>:word16] = bx
	Mem0[ds:0x401<16>:word16] = 0x54F2<16>
	Mem0[ds:0x400<16>:byte] = 0xEA<8>
	si = 0x7A0<16>
	// succ:  l09BD_7043
l09BD_7043:
	Mem0[ds:si + 2<16>:word16] = bx
	Mem0[ds:si + 6<16>:word16] = bx
	si = si + 8<16>
	SCZO = cond(si)
	SCZO = cond(Mem0[ds:si:word16] - 0<16>)
	branch Test(NE,Z) l09BD_7043
	// succ:  l09BD_7051 l09BD_7043
l09BD_7051:
	cx = __lar(ax)
	Z = true
	cx = cx >>u 8<16>
	SCZO = cond(cx)
	ax = 9<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	__syscall(0x31<8>)
	cx = ds
	bx = 0x10<16>
	ax = 0x205<16>
	// succ:  l09BD_7065
l09BD_7065:
	dx = bx
	dx = dx << 2<16>
	SCZO = cond(dx)
	dx = dx + 0<16>
	SCZO = cond(dx)
	__syscall(0x31<8>)
	branch Test(UGE,C) l09BD_7075
	// succ:  l09BD_7072 l09BD_7075
l09BD_7072:
	goto l09BD_713B
	// succ:  l09BD_713B
l09BD_7075:
	bl = bl + 1<8>
	SZO = cond(bl)
	SCZO = cond(bl - 0x1B<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_707C l09BD_7075
l09BD_707C:
	SCZO = cond(bl - 0x1C<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_7081 l09BD_7075
l09BD_7081:
	SCZO = cond(bl - 0x23<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_7086 l09BD_7075
l09BD_7086:
	SCZO = cond(bl - 0x24<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_708B l09BD_7075
l09BD_708B:
	SCZO = cond(bl - 0x2F<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_7090 l09BD_7075
l09BD_7090:
	SCZO = cond(bl - 0x16<8>)
	branch Test(EQ,Z) l09BD_7075
	// succ:  l09BD_7095 l09BD_7075
l09BD_7095:
	SCZO = cond(bl - 0x2E<8>)
	branch Test(ULE,CZ) l09BD_7065
	// succ:  l09BD_709A l09BD_7065
l09BD_709A:
	dx = 0xC9E<16>
	bl = 0x21<8>
	__syscall(0x31<8>)
	branch Test(ULT,C) l09BD_7072
	// succ:  l09BD_70A3 l09BD_7072
l09BD_70A3:
	dx = 0x1A62<16>
	bl = 0x10<8>
	__syscall(0x31<8>)
	dx = 0x556<16>
	bl = 0x75<8>
	__syscall(0x31<8>)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 0x1FFF<16>
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = Mem0[ds:0xC32<16>:word16]
	cx = 0x10<16>
	dx_ax = cx *u ax
	SCZO = cond(dx_ax)
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v40 = dx
	dx = ax
	ax = v40
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	bx = bx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(bx)
	Mem0[ds:0xC32<16>:word16] = bx
	Mem0[ds:0xAA2<16>:word16] = bx
	di = sp
	ax = 0xC<16>
	__syscall(0x31<8>)
	bx = bx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(bx)
	Mem0[ds:0xA9C<16>:word16] = bx
	ax = 8<16>
	cx = cx ^ cx
	SZO = cond(cx)
	C = false
	dx = 0xFFFF<16>
	__syscall(0x31<8>)
	ax = ax + 1<16>
	SZO = cond(ax)
	cx = cs
	cx = __lar(cx)
	Z = true
	cx = cx >>u 8<16>
	SCZO = cond(cx)
	__syscall(0x31<8>)
	sp = sp + 8<16>
	SCZO = cond(sp)
	call fn09BD_73F9 (retsize: 2;)
	dl = 0<8>
	v42 = Mem0[ds:0x980<16>:byte]
	Mem0[ds:0x980<16>:byte] = dl
	dl = v42
	bx = 0x40<16>
	ah = 0x48<8>
	C = msdos_allocate_memory_block(bx)
	branch Test(UGE,C) l09BD_710D
	// succ:  l09BD_710A l09BD_710D
l09BD_710A:
	goto l09BD_713B
	// succ:  l09BD_713B
l09BD_710D:
	Mem0[ds:0xC4A<16>:word16] = ax
	Mem0[ds:0x980<16>:byte] = dl
	es = ax
	di = di ^ di
	SZO = cond(di)
	C = false
	call fn09BD_756C (retsize: 4;)
	esi = Mem0[0x9BD<16>:0x6DF4<16>:word32]
	edi = Mem0[0x9BD<16>:0x6DF8<16>:word32]
	edx = Mem0[0x9BD<16>:0x6DFC<16>:word32]
	Mem0[ds:0xAA4<16>:word16] = 0x557D<16>
	Mem0[ds:0xAA6<16>:word16] = 0x5554<16>
	return
	// succ:  fn09BD_6E00_exit
l09BD_713B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x20<16>
	call fn09BD_229D (retsize: 2;)
	bx = sp
	ax = Mem0[ds:bx + 2<16>:word16]
	es = Mem0[ds:0xC32<16>:selector]
	bx = ax
	bx = bx >>u 3<16>
	SCZO = cond(bx)
	v17 = Mem0[es:bx:byte] | 0x80<8>
	Mem0[es:bx:byte] = v17
	SZO = cond(Mem0[es:bx:byte])
	C = false
	v18 = bx
	bx = ax
	ax = v18
	al = Mem0[ds:0x980<16>:byte]
	SCZO = cond(al - 3<8>)
	branch Test(UGE,C) l09BD_716E
	// succ:  l09BD_715A l09BD_716E
l09BD_715A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	Mem0[ds:0x980<16>:byte] = 2<8>
	es = bx
	dh = 3<8>
	ah = 0xFF<8>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	__syscall(0x21<8>)
	bx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:0x980<16>:byte] = al
	// succ:  l09BD_716E
l09BD_716E:
	SCZO = cond(bx - Mem0[ds:0xC3A<16>:word16])
	branch Test(NE,Z) l09BD_717C
	// succ:  l09BD_7174 l09BD_717C
l09BD_7174:
	ax = 0xA<16>
	__syscall(0x31<8>)
	Mem0[ds:0xC22<16>:word16] = ax
	// succ:  l09BD_717C
l09BD_717C:
	ax = 6<16>
	__syscall(0x31<8>)
	v35 = dx
	dx = ax
	ax = v35
	dx = cx
	return
	// succ:  fn09BD_6E00_exit
fn09BD_6E00_exit:


// fn09BD_7270
// Return size: 4
define fn09BD_7270
fn09BD_7270_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_7270
	// succ:  l09BD_7270
l09BD_726B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x1F<16>
	call fn09BD_229D (retsize: 2;)
	// succ:  l09BD_7270
l09BD_7270:
	sp = sp - 0x54<16>
	SCZO = cond(sp)
	bp = sp
	Mem0[ds:0xF50<16>:word16] = sp
	sp = sp - 0x80<16>
	SCZO = cond(sp)
	call fn09BD_2D3E (retsize: 2;)
	call fn09BD_396B (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x810<16>
	call fn0800_0B12 (retsize: 4;)
	v7 = cx
	cx = ax
	ax = v7
	branch cx == 0<16> l09BD_72FD
	// succ:  l09BD_728E l09BD_72FD
l09BD_728E:
	call fn09BD_242E (retsize: 2;)
	ax = ax + 0x800<16>
	SCZO = cond(ax)
	al = al & 0xFE<8>
	SZO = cond(al)
	C = false
	Mem0[ds:0xC48<16>:word16] = ax
	SCZO = cond(Mem0[ds:0xC42<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_72AE
	// succ:  l09BD_72A0 l09BD_72AE
l09BD_72A0:
	ax = 0xBF02<16>
	si = si ^ si
	SZO = cond(si)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	call fn09BD_0EF4 (retsize: 2;)
	si = si | dx
	SZO = cond(si)
	C = false
	branch Test(NE,Z) l09BD_726B
	// succ:  l09BD_72AE l09BD_726B
l09BD_72AE:
	ah = 0x35<8>
	al = Mem0[ds:0x34<16>:byte]
	es_bx = msdos_get_interrupt_vector(al)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0x12C4<16>:word16] = bx
	Mem0[ds:0x12C6<16>:word16] = es
	dx = 0x7253<16>
	ah = 0x25<8>
	msdos_set_interrupt_vector(al, ds_dx)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	Mem0[ds:0xAC2<16>:word16] = 0x7302<16>
	call fn09BD_6E00 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	call fn09BD_4B1D (retsize: 2;)
	call fn09BD_2D77 (retsize: 2;)
	es = Mem0[ss:bp + 2<16>:selector]
	di = Mem0[ss:bp + 0xE<16>:word16]
	ax = Mem0[ss:bp + 0x1E<16>:word16]
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = Mem0[ss:bp + 0x22<16>:word16]
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	ax = Mem0[ss:bp + 0x26<16>:word16]
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	bx = Mem0[ss:bp + 4<16>:word16]
	ax = es
	ss = ax
	sp = di - 6<16>
	Mem0[ds:0xF50<16>:word16] = bp
	ds = bx
	es = bx
	SCZO = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	return
	// succ:  fn09BD_7270_exit
l09BD_72FD:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0xD<16>
	call fn09BD_229D (retsize: 2;)
	call fn09BD_13AD (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ah = 0x4C<8>
	msdos_terminate(al)
fn09BD_7270_exit:


// fn09BD_73F9
// Return size: 2
define fn09BD_73F9
fn09BD_73F9_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_73F9
l09BD_73F9:
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = esi
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = edi
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	edi = edi ^ edi
	SZO = cond(edi)
	C = false
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	di = 0x7310<16>
	es = Mem0[ds:0xC30<16>:selector]
	si = 0x742A<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cs
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 0x303<16>
	__syscall(0x31<8>)
	ax = 0<16>
	branch Test(ULT,C) l09BD_7424
	// succ:  l09BD_741A l09BD_7424
l09BD_741A:
	di = 0xF6E<16>
	al = 0xEA<8>
	Mem0[es:di:byte] = al
	di = di + 1<i16>
	v15 = dx
	dx = ax
	ax = v15
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	v17 = cx
	cx = ax
	ax = v17
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	// succ:  l09BD_7424
l09BD_7424:
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	edi = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	esi = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	return
	// succ:  fn09BD_73F9_exit
fn09BD_73F9_exit:


// fn09BD_74FE
// Return size: 2
define fn09BD_74FE
fn09BD_74FE_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_74FE
l09BD_74FE:
	ax = 0x1600<16>
	msdos_multiplex(ah, al)
	SZO = cond(al & 0x7F<8>)
	C = false
	branch Test(EQ,Z) l09BD_755A
	// succ:  l09BD_7507 l09BD_755A
l09BD_7507:
	SCZO = cond(al - 3<8>)
	branch Test(NE,Z) l09BD_755A
	// succ:  l09BD_750B l09BD_755A
l09BD_750B:
	SCZO = cond(ah - 0xA<8>)
	branch Test(UGE,C) l09BD_755A
	// succ:  l09BD_7510 l09BD_755A
l09BD_7510:
	ax = 0x4300<16>
	msdos_multiplex(ah, al)
	SCZO = cond(al - 0x80<8>)
	branch Test(NE,Z) l09BD_755B
	// succ:  l09BD_7519 l09BD_755B
l09BD_7519:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	ax = 0x4310<16>
	msdos_multiplex(ah, al)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	bp = sp
	ah = 9<8>
	dx = 0x40<16>
	call Mem0[ss:bp + 0<16>:ptr32] (retsize: 4;)
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_755B
	// succ:  l09BD_752F l09BD_755B
l09BD_752F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 1<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	si = sp
	ah = 0xB<8>
	call Mem0[ss:bp + 0<16>:ptr32] (retsize: 4;)
	ax = ax - 1<16>
	SZO = cond(ax)
	branch Test(NE,Z) l09BD_755B
	// succ:  l09BD_7542 l09BD_755B
l09BD_7542:
	ax = 0x1681<16>
	msdos_multiplex(ah, al)
	Mem0[0x9BD<16>:0x6D2B<16>:byte] = al
	ah = 0xB<8>
	call Mem0[ss:bp + 0<16>:ptr32] (retsize: 4;)
	ah = 0xA<8>
	call Mem0[ss:bp + 0<16>:ptr32] (retsize: 4;)
	sp = sp + 0x14<16>
	SCZO = cond(sp)
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l09BD_755A
l09BD_755A:
	return
	// succ:  fn09BD_74FE_exit
l09BD_755B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x21<16>
	call fn09BD_229D (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	ds = Mem0[0x9BD<16>:0x207E<16>:selector]
	v17 = Mem0[ds:0xC43<16>:byte] + 1<8>
	Mem0[ds:0xC43<16>:byte] = v17
	SZO = cond(v17)
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	SCZO = Mem0[ss:sp:word16]
	sp = sp + 2<16>
	return
	// succ:  fn09BD_74FE_exit
fn09BD_74FE_exit:


// fn09BD_756C
// Return size: 4
define fn09BD_756C
fn09BD_756C_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_756C
l09BD_756C:
	dx = cs
	dx = dx & 7<16>
	SZO = cond(dx)
	C = false
	dx = dx | 8<16>
	SZO = cond(dx)
	C = false
	goto l09BD_7599
	// succ:  l09BD_7599
l09BD_7576:
	bl = bl + bl
	SCZO = cond(bl)
	ax = __lar(dx)
	Z = true
	// succ:  l09BD_757D
l09BD_757D:
	branch Test(NE,Z) l09BD_758B
	// succ:  l09BD_7581 l09BD_758B
l09BD_7581:
	SZO = cond(ah & 0x93<8>)
	C = false
	branch Test(EQ,Z) l09BD_758B
	// succ:  l09BD_7588 l09BD_758B
l09BD_7588:
	bl = bl | 1<8>
	SZO = cond(bl)
	C = false
	// succ:  l09BD_758B
l09BD_758B:
	dx = dx + Mem0[ds:0xC46<16>:word16]
	SCZO = cond(dx)
	branch Test(OV,O) l09BD_75A0
	// succ:  l09BD_7593 l09BD_75A0
l09BD_7593:
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_7576
	// succ:  l09BD_7595 l09BD_7576
l09BD_7595:
	Mem0[es:di:byte] = bl
	di = di + 1<16>
	SZO = cond(di)
	// succ:  l09BD_7599
l09BD_7599:
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	cx = 8<16>
	goto l09BD_7576
	// succ:  l09BD_7576
l09BD_75A0:
	return
	// succ:  fn09BD_756C_exit
fn09BD_756C_exit:


// fn09BD_75E1
// Return size: 4
define fn09BD_75E1
fn09BD_75E1_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_75E1
l09BD_75E1:
	ax = 0x204<16>
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	// succ:  l09BD_75E6
l09BD_75E6:
	__syscall(0x31<8>)
	Mem0[es:di:word32] = edx
	Mem0[es:di + 4<16>:word16] = cx
	di = di + 6<16>
	SCZO = cond(di)
	bx = bx + 1<16>
	SZO = cond(bx)
	SCZO = cond(bx - 0xFF<16>)
	branch Test(ULE,CZ) l09BD_75E6
	// succ:  l09BD_75FA l09BD_75E6
l09BD_75FA:
	ax = 0x202<16>
	bl = bl ^ bl
	SZO = cond(bl)
	C = false
	// succ:  l09BD_75FF
l09BD_75FF:
	__syscall(0x31<8>)
	Mem0[es:di:word32] = edx
	Mem0[es:di + 4<16>:word16] = cx
	di = di + 6<16>
	SCZO = cond(di)
	bl = bl + 1<8>
	SZO = cond(bl)
	SCZO = cond(bl - 0x1F<8>)
	branch Test(ULE,CZ) l09BD_75FF
	// succ:  l09BD_7613 l09BD_75FF
l09BD_7613:
	return
	// succ:  fn09BD_75E1_exit
fn09BD_75E1_exit:


// fn09BD_7686
// Return size: 2
define fn09BD_7686
fn09BD_7686_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7686
l09BD_7686:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	si = 0x19C<16>
	di = Mem0[ds:si:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	cx = Mem0[ds:si + 2<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	SCZO = cond(di - Mem0[ss:0x56<16>:word16])
	branch Test(NE,Z) l09BD_76AA
	// succ:  l09BD_769C l09BD_76AA
l09BD_769C:
	SCZO = cond(cx - Mem0[ss:0x58<16>:word16])
	branch Test(NE,Z) l09BD_76AA
	// succ:  l09BD_76A3 l09BD_76AA
l09BD_76A3:
	Mem0[ds:si:word16] = 0x772B<16>
	Mem0[ds:si + 2<16>:word16] = cs
	// succ:  l09BD_76AA
l09BD_76AA:
	__syscall(0x67<8>)
	Mem0[ds:si + 2<16>:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[ds:si:word16] = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_7686_exit
fn09BD_7686_exit:


// fn09BD_76B6
// Return size: 2
define fn09BD_76B6
fn09BD_76B6_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_76B6
l09BD_76B6:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	call fn09BD_696B (retsize: 2;)
	ax = 0x3567<16>
	es_bx = msdos_get_interrupt_vector(al)
	cx = es
	SCZO = cond(cx - Mem0[ds:0x58<16>:word16])
	branch Test(EQ,Z) l09BD_7731
	// succ:  l09BD_76C8 l09BD_7731
l09BD_76C8:
	SCZO = cond(Mem0[es:0xB<16>:word16] - 0x4D4D<16>)
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_76D1 l09BD_7731
l09BD_76D1:
	SCZO = cond(Mem0[es:0xE<16>:word16] - 0x5858<16>)
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_76DA l09BD_7731
l09BD_76DA:
	SCZO = cond(Mem0[es:0xA<16>:byte] - 0x45<8>)
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_76E2 l09BD_7731
l09BD_76E2:
	SCZO = cond(Mem0[es:0xD<16>:byte] - 0x58<8>)
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_76EA l09BD_7731
l09BD_76EA:
	SCZO = cond(Mem0[es:0x11<16>:byte] - 0x30<8>)
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_76F2 l09BD_7731
l09BD_76F2:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(NE,Z) l09BD_772C
	// succ:  l09BD_76F9 l09BD_772C
l09BD_76F9:
	SZO = cond(Mem0[ds:0x14<16>:byte] & 2<8>)
	C = false
	branch Test(NE,Z) l09BD_772C
	// succ:  l09BD_7700 l09BD_772C
l09BD_7700:
	ax = 0xDE00<16>
	__syscall(0x67<8>)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(EQ,Z) l09BD_772C
	// succ:  l09BD_7709 l09BD_772C
l09BD_7709:
	ah = 0x43<8>
	bx = 1<16>
	ah = ems_get_handle_and_allocate_memory(bx, out dx)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l09BD_7731
	// succ:  l09BD_7714 l09BD_7731
l09BD_7714:
	Mem0[0x9BD<16>:0x2AC5<16>:word16] = dx
	goto l09BD_7731
	// succ:  l09BD_7731
l09BD_771B:
	call fn09BD_66B4 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_2AC7 (retsize: 2;)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	branch cx == 0<16> l09BD_7728
	// succ:  l09BD_7727 l09BD_7728
l09BD_7727:
	ax = ax - 1<16>
	SZO = cond(ax)
	// succ:  l09BD_7728
l09BD_7728:
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_76B6_exit
l09BD_772C:
	call fn09BD_66B4 (retsize: 2;)
	branch Test(EQ,Z) l09BD_771B
	// succ:  l09BD_7731 l09BD_771B
l09BD_7731:
	ax = 0xDE00<16>
	call fn09BD_7686 (retsize: 2;)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l09BD_771B
	// succ:  l09BD_773B l09BD_771B
l09BD_773B:
	ax = 0xDE0A<16>
	__syscall(0x67<8>)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l09BD_771B
	// succ:  l09BD_7744 l09BD_771B
l09BD_7744:
	Mem0[ds:0x50<16>:byte] = bl
	Mem0[ds:0x51<16>:byte] = cl
	Mem0[ds:0x2E<16>:byte] = 0xB<8>
	call fn09BD_30C4 (retsize: 2;)
	call fn09BD_3829 (retsize: 2;)
	SCZO = cond(Mem0[ds:0xDEC<16>:word16] - 0x602<16>)
	branch Test(ULT,C) l09BD_7771
	// succ:  l09BD_775F l09BD_7771
l09BD_775F:
	Mem0[ds:0xDEE<16>:word16] = 4<16>
	Mem0[ds:0xDF0<16>:word16] = 0xFC00<16>
	Mem0[ds:0xDF2<16>:word16] = 0x801<16>
	// succ:  l09BD_7771
l09BD_7771:
	al = Mem0[ds:0x47<16>:byte]
	al = al & 0x80<8>
	SZO = cond(al)
	C = false
	al = al | Mem0[ds:0xA16<16>:byte]
	SZO = cond(al)
	C = false
	ah = Mem0[ds:0x15<16>:byte]
	ah = ah & 0x20<8>
	SZO = cond(ah)
	C = false
	al = al | ah
	SZO = cond(al)
	C = false
	Mem0[0x9BD<16>:0x7685<16>:byte] = al
	si = si ^ si
	SZO = cond(si)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ax = 0xBF02<16>
	SZO = cond(Mem0[ds:0x14<16>:byte] & 0x10<8>)
	C = false
	branch Test(EQ,Z) l09BD_7797
	// succ:  l09BD_7795 l09BD_7797
l09BD_7795:
	al = 0xDC<8>
	// succ:  l09BD_7797
l09BD_7797:
	call fn09BD_0EF4 (retsize: 2;)
	dx = dx | dx
	SZO = cond(dx)
	C = false
	branch Test(EQ,Z) l09BD_77F5
	// succ:  l09BD_779E l09BD_77F5
l09BD_779E:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ds = dx
	di = 0x98<16>
	SCZO = cond(Mem0[ds:si:word32] - 0x40000<32>)
	Mem0[ss:0xDFF<16>:byte] = CONVERT(Test(UGT,CZ), bool, int8)
	branch Test(ULE,CZ) l09BD_77C4
	// succ:  l09BD_77B4 l09BD_77C4
l09BD_77B4:
	SZO = cond(Mem0[ss:0x15<16>:byte] & 0x10<8>)
	C = false
	branch Test(NE,Z) l09BD_77C4
	// succ:  l09BD_77BC l09BD_77C4
l09BD_77BC:
	SCZO = cond(Mem0[ss:0xA16<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_77F5
	// succ:  l09BD_77C4 l09BD_77F5
l09BD_77C4:
	cx = 0xC<16>
	// succ:  l09BD_77C7
l09BD_77C7:
	branch cx == 0<16> l09BD_77C9
	// succ:  l09BD_77C7_1 l09BD_77C9
l09BD_77C7_1:
	v22 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v22
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_77C7
	// succ:  l09BD_77C7
l09BD_77C9:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = es
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	eax = Mem0[ds:0x98<16>:word32]
	eax = eax >>u 6<32>
	SCZO = cond(eax)
	Mem0[ds:0xECA<16>:word16] = ax
	eax = Mem0[ds:0x9C<16>:word32]
	eax = eax >>u 6<32>
	SCZO = cond(eax)
	ax = ax - Mem0[ds:0xECA<16>:word16]
	SCZO = cond(ax)
	Mem0[ds:0xECE<16>:word16] = ax
	SCZO = cond(dx - Mem0[ds:0xA2<16>:word16])
	branch Test(NE,Z) l09BD_77F2
	// succ:  l09BD_77EB l09BD_77F2
l09BD_77EB:
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(NE,Z) l09BD_7841
	// succ:  l09BD_77F2 l09BD_7841
l09BD_77F2:
	// succ:  l09BD_77F2_thunk_fn09BD_7875
l09BD_77F2_thunk_fn09BD_7875:
	call fn09BD_7875 (retsize: 0;)
	return
	// succ:  fn09BD_76B6_exit
l09BD_77F5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	call fn09BD_7B03 (retsize: 2;)
	dx = bx
	SCZO = cond(dx - 4<16>)
	branch Test(ULT,C) l09BD_780C
	// succ:  l09BD_7801 l09BD_780C
l09BD_7801:
	al = Mem0[0x9BD<16>:0x7685<16>:byte]
	Mem0[ds:0xDFF<16>:byte] = al
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(NE,Z) l09BD_7823
	// succ:  l09BD_780C l09BD_7823
l09BD_780C:
	ax = 0x3000<16>
	SCZO = cond(Mem0[ds:0xECC<16>:word16] - ax)
	branch Test(ULT,C) l09BD_7818
	// succ:  l09BD_7815 l09BD_7818
l09BD_7815:
	Mem0[ds:0xECC<16>:word16] = ax
	// succ:  l09BD_7818
l09BD_7818:
	SCZO = cond(dx - 0x300<16>)
	branch Test(ULE,CZ) l09BD_7823
	// succ:  l09BD_781E l09BD_7823
l09BD_781E:
	dx = 0x3000<16>
	goto l09BD_7829
	// succ:  l09BD_7829
l09BD_7823:
	dx = dx << 4<16>
	SCZO = cond(dx)
	call fn09BD_7B1F (retsize: 2;)
	// succ:  l09BD_7829
l09BD_7829:
	Mem0[ds:0xECE<16>:word16] = dx
	dx = dx + 0x2FFF<16>
	SCZO = cond(dx)
	branch Test(UGE,C) l09BD_783A
	// succ:  l09BD_7833 l09BD_783A
l09BD_7833:
	dx = 0xEF00<16>
	Mem0[ds:0xECE<16>:word16] = dx
	// succ:  l09BD_783A
l09BD_783A:
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_7849
	// succ:  l09BD_7841 l09BD_7849
l09BD_7841:
	dx = 0x2000<16>
	Mem0[ds:0xDFF<16>:byte] = 1<8>
	// succ:  l09BD_7849
l09BD_7849:
	dx = dx & 0xF000<16>
	SZO = cond(dx)
	C = false
	Mem0[ds:0xE00<16>:byte] = dh
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	ax = ds
	ax = ax << 4<16>
	SCZO = cond(ax)
	ax = ax + Mem0[ds:0xCDC<16>:word16]
	SCZO = cond(ax)
	ah = ah & 0xF<8>
	SZO = cond(ah)
	C = false
	ax = -ax
	SCZO = cond(ax)
	C = ax == 0<16>
	ah = ah + 0x10<8>
	SCZO = cond(ah)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	ax = ax + dx
	SCZO = cond(ax)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn0800_0B12 (retsize: 4;)
	call fn09BD_65A3 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(ax - 0xFFFF<16>)
	branch Test(NE,Z) l09BD_787A
	// succ:  l09BD_7873_thunk_fn09BD_7875 l09BD_7873_thunk_fn09BD_7875
l09BD_7873_thunk_fn09BD_7875:
	call fn09BD_7875 (retsize: 0;)
	return
	// succ:  fn09BD_76B6_exit
l09BD_7873_thunk_fn09BD_7875:
	call fn09BD_7875 (retsize: 0;)
	return
	// succ:  fn09BD_76B6_exit
fn09BD_76B6_exit:


// fn09BD_7875
// Return size: 0
define fn09BD_7875
fn09BD_7875_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7875
l09BD_7875:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x17<16>
	call fn09BD_229D (retsize: 2;)
	// succ:  l09BD_787A
l09BD_787A:
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + cx
	SCZO = cond(ax)
	ax = ax >>u 4<16>
	SCZO = cond(ax)
	dx = es
	ax = ax + dx
	SCZO = cond(ax)
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_788F
	// succ:  l09BD_788A l09BD_788F
l09BD_788A:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x18<16>
	call fn09BD_229D (retsize: 2;)
	// succ:  l09BD_788F
l09BD_788F:
	Mem0[ds:0xAA<16>:word16] = ax
	Mem0[ds:0xDF4<16>:word16] = ax
	es = ax
	di = di ^ di
	SZO = cond(di)
	C = false
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_789E
l09BD_789E:
	branch cx == 0<16> l09BD_78A0
	// succ:  l09BD_789E_1 l09BD_78A0
l09BD_789E_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_789E
	// succ:  l09BD_789E
l09BD_78A0:
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_78B9
	// succ:  l09BD_78A7 l09BD_78B9
l09BD_78A7:
	v16 = Mem0[ds:0xA16<16>:byte] | 1<8>
	Mem0[ds:0xA16<16>:byte] = v16
	SZO = cond(Mem0[ds:0xA16<16>:byte])
	C = false
	SZO = cond(Mem0[ds:0x11D2<16>:byte] & 1<8>)
	C = false
	branch Test(NE,Z) l09BD_78B9
	// succ:  l09BD_78B3 l09BD_78B9
l09BD_78B3:
	Mem0[ds:0xECC<16>:word16] = 0xEF00<16>
	// succ:  l09BD_78B9
l09BD_78B9:
	ax = ds
	bx = 0x10<16>
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	v19 = Mem0[ds:0xD34<16>:word16] + ax
	Mem0[ds:0xD34<16>:word16] = v19
	SCZO = cond(v19)
	v20 = Mem0[ds:0xD36<16>:word16] + dx + C
	Mem0[ds:0xD36<16>:word16] = v20
	SCZO = cond(v20)
	v21 = Mem0[ds:0xD3C<16>:word16] + ax
	Mem0[ds:0xD3C<16>:word16] = v21
	SCZO = cond(v21)
	v22 = Mem0[ds:0xD3E<16>:word16] + dx + C
	Mem0[ds:0xD3E<16>:word16] = v22
	SCZO = cond(v22)
	v23 = Mem0[ds:0xD40<16>:word16] + ax
	Mem0[ds:0xD40<16>:word16] = v23
	SCZO = cond(v23)
	v24 = Mem0[ds:0xD42<16>:word16] + dx + C
	Mem0[ds:0xD42<16>:word16] = v24
	SCZO = cond(v24)
	ax = ax + 0xD74<16>
	SCZO = cond(ax)
	dx = dx + 0<16> + C
	SCZO = cond(dx)
	Mem0[ds:0x91A<16>:word16] = ax
	Mem0[ds:0x91C<16>:byte] = dl
	ax = Mem0[ds:0xAA<16>:word16]
	ah = ah + 1<8>
	SZO = cond(ah)
	es = ax
	di = di ^ di
	SZO = cond(di)
	C = false
	si = 0x940<16>
	ax = 0xDE01<16>
	__syscall(0x67<8>)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(EQ,Z) l09BD_7902
	// succ:  l09BD_78F8_thunk_fn09BD_78FA l09BD_78F8_thunk_fn09BD_78FA
l09BD_78F8_thunk_fn09BD_78FA:
	call fn09BD_78FA (retsize: 0;)
	return
	// succ:  fn09BD_7875_exit
l09BD_78F8_thunk_fn09BD_78FA:
	call fn09BD_78FA (retsize: 0;)
	return
	// succ:  fn09BD_7875_exit
fn09BD_7875_exit:


// fn09BD_78FA
// Return size: 0
define fn09BD_78FA
fn09BD_78FA_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_78FA_thunk_fn09BD_7875
	// succ:  l09BD_78FA_thunk_fn09BD_7875
l09BD_78FA:
	call fn09BD_2AC7 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x19<16>
	call fn09BD_229D (retsize: 2;)
	goto l09BD_7902
	// succ:  l09BD_7902
l09BD_78FA_thunk_fn09BD_7875:
	call fn09BD_7875 (retsize: 0;)
	return
	// succ:  fn09BD_78FA_exit
l09BD_7902:
	Mem0[ds:0xD5A<16>:word32] = ebx
	SCZO = cond(di - 0x1000<16>)
	branch Test(UGE,C) l09BD_7910
	// succ:  l09BD_790D l09BD_7910
l09BD_790D:
	di = 0x1000<16>
	// succ:  l09BD_7910
l09BD_7910:
	Mem0[ds:0xECA<16>:word16] = di
	al = Mem0[ds:0xE00<16>:byte]
	al = al | al
	SZO = cond(al)
	C = false
	branch Test(EQ,Z) l09BD_799C
	// succ:  l09BD_791D l09BD_799C
l09BD_791D:
	v13 = di
	di = ax
	ax = v13
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_792B
	// succ:  l09BD_7925 l09BD_792B
l09BD_7925:
	ax = 0x1040<16>
	Mem0[ds:0xECA<16>:word16] = ax
	// succ:  l09BD_792B
l09BD_792B:
	bx = 0x40<16>
	dx_ax = bx *u ax
	SCZO = cond(dx_ax)
	Mem0[ds:0xAC<16>:word16] = ax
	Mem0[ds:0xAE<16>:word16] = dx
	ax = Mem0[ds:0xECE<16>:word16]
	ax = ax + Mem0[ds:0xECA<16>:word16]
	SCZO = cond(ax)
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_794D
	// succ:  l09BD_7945 l09BD_794D
l09BD_7945:
	SCZO = cond(ax - 0x4000<16>)
	branch Test(ULT,C) l09BD_794D
	// succ:  l09BD_794A l09BD_794D
l09BD_794A:
	ax = 0x4000<16>
	// succ:  l09BD_794D
l09BD_794D:
	Mem0[ds:0xECE<16>:word16] = ax
	SZO = cond(Mem0[ds:0x47<16>:byte] & 1<8>)
	C = false
	branch Test(EQ,Z) l09BD_795C
	// succ:  l09BD_7957 l09BD_795C
l09BD_7957:
	ah = 0x88<8>
	call fn09BD_0EF4 (retsize: 2;)
	// succ:  l09BD_795C
l09BD_795C:
	Mem0[ds:0xA8<16>:word16] = ax
	call fn09BD_7B85 (retsize: 2;)
	cl = Mem0[ds:0xE00<16>:byte]
	ch = ch ^ ch
	SZO = cond(ch)
	C = false
	cx = cx >>u 3<16>
	SCZO = cond(cx)
	cx = cx - 1<16>
	SZO = cond(cx)
	cx = cx - 1<16>
	SZO = cond(cx)
	si = es
	ds = si
	si = si - 0x100<16>
	SCZO = cond(si)
	es = si
	si = si >>u 6<16>
	SCZO = cond(si)
	eax = Mem0[ds:si:word32]
	si = si + 4<i16>
	di = di ^ di
	SZO = cond(di)
	C = false
	// succ:  l09BD_797E
l09BD_797E:
	branch cx == 0<16> l09BD_7980
	// succ:  l09BD_797E_1 l09BD_7980
l09BD_797E_1:
	v25 = Mem0[ds:si:word16]
	Mem0[es:di:word16] = v25
	si = si + 2<i16>
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_797E
	// succ:  l09BD_797E
l09BD_7980:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	// succ:  l09BD_7982
l09BD_7982:
	Mem0[ds:0xD38<16>:word32] = eax
	Mem0[ds:0xD90<16>:word32] = eax
	ax = 1<16>
	Mem0[ds:0xAA4<16>:word16] = 0x3CD0<16>
	Mem0[ds:0xAA6<16>:word16] = 0x3D23<16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_78FA_exit
l09BD_799C:
	eax = Mem0[ds:0x98<16>:word32]
	eax = eax >>u 6<32>
	SCZO = cond(eax)
	Mem0[ds:0xECA<16>:word16] = ax
	eax = Mem0[ds:0x9C<16>:word32]
	eax = eax >>u 6<32>
	SCZO = cond(eax)
	Mem0[ds:0xECE<16>:word16] = ax
	cx = Mem0[ds:0xAA<16>:word16]
	si = cx
	si = si >>u 6<16>
	SCZO = cond(si)
	ch = ch + 1<8>
	SZO = cond(ch)
	es = cx
	eax = Mem0[es:si:word32]
	goto l09BD_7982
	// succ:  l09BD_7982
fn09BD_78FA_exit:


// fn09BD_7A57
// Return size: 2
define fn09BD_7A57
fn09BD_7A57_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7A57
l09BD_7A57:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bp
	bp = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	call fn09BD_0290 (retsize: 2;)
	ecx = CONVERT(Mem0[0x9BD<16>:0x79C5<16>:word16], word16, word32)
	branch cx == 0<16> l09BD_7AE1
	// succ:  l09BD_7A68 l09BD_7AE1
l09BD_7A68:
	esi = CONVERT(Mem0[ds:0xAA<16>:word16], word16, word32)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x38<16>
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	esi = esi << 4<32>
	SCZO = cond(esi)
	edi = esi
	edi = edi + 0x1C00<32>
	SCZO = cond(edi)
	edx = Mem0[0x9BD<16>:0x79C7<16>:word32]
	v14 = Mem0[ds:esi:word32]
	Mem0[ds:esi:word32] = edx
	edx = v14
	si = si + 4<16>
	SCZO = cond(si)
	eax = cr3
	cr3 = eax
	eax = Mem0[ds:esi:word32]
	esi = esi + 4<i32>
	ebx = eax
	v18 = Mem0[ds:edi:word32]
	Mem0[ds:edi:word32] = eax
	eax = v18
	Mem0[ds:0x00300000<p32>:word32] = ebx
	Mem0[ds:edi:word32] = eax
	Mem0[ds:esi - 8<32>:word32] = edx
	eax = cr3
	cr3 = eax
	edi = 0x400004<32>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ds
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = cx
	cx = cx - 1<16>
	SZO = cond(cx)
	// succ:  l09BD_7ABE
l09BD_7ABE:
	branch ecx == 0<32> l09BD_7AC2
	// succ:  l09BD_7ABE_1 l09BD_7AC2
l09BD_7ABE_1:
	v22 = Mem0[ds:esi:word32]
	Mem0[es:edi:word32] = v22
	esi = esi + 4<i32>
	edi = edi + 4<i32>
	ecx = ecx - 1<32>
	goto l09BD_7ABE
	// succ:  l09BD_7ABE
l09BD_7AC2:
	cx = bx
	cx = cx << 0xA<16>
	SCZO = cond(cx)
	cx = cx - bx
	SCZO = cond(cx)
	eax = eax ^ eax
	SZO = cond(eax)
	C = false
	// succ:  l09BD_7ACC
l09BD_7ACC:
	branch ecx == 0<32> l09BD_7AD0
	// succ:  l09BD_7ACC_1 l09BD_7AD0
l09BD_7ACC_1:
	Mem0[es:edi:word32] = eax
	edi = edi + 4<i32>
	ecx = ecx - 1<32>
	goto l09BD_7ACC
	// succ:  l09BD_7ACC
l09BD_7AD0:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	cx = Mem0[ds:0xDFA<16>:word16]
	branch cx == 0<16> l09BD_7AE1
	// succ:  l09BD_7AD8 l09BD_7AE1
l09BD_7AD8:
	esi = 0x3FF000<32>
	call fn09BD_7BB8 (retsize: 2;)
	// succ:  l09BD_7AE1
l09BD_7AE1:
	v23 = Mem0[ss:bp + 4<16>:word32]
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = v23
	v24 = Mem0[ds:0x98<16>:word32]
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = v24
	call fn0070_561B (retsize: 4;)
	sp = sp + 8<16>
	SCZO = cond(sp)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_092C (retsize: 2;)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax + 1<16>
	SZO = cond(ax)
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	Mem0[0x9BD<16>:0x79C5<16>:word16] = 0<16>
	bp = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_7A57_exit
fn09BD_7A57_exit:


// fn09BD_7B03
// Return size: 2
define fn09BD_7B03
fn09BD_7B03_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7B03
l09BD_7B03:
	bx = bx ^ bx
	SZO = cond(bx)
	C = false
	dx = dx ^ dx
	SZO = cond(dx)
	C = false
	ah = 0x42<8>
	call fn09BD_7686 (retsize: 2;)
	bx = bx | bx
	SZO = cond(bx)
	C = false
	branch Test(NE,Z) l09BD_7B1E
	// succ:  l09BD_7B12 l09BD_7B1E
l09BD_7B12:
	ax = 0xDE03<16>
	call fn09BD_7686 (retsize: 2;)
	edx = edx >>u 2<32>
	SCZO = cond(edx)
	bx = dx
	// succ:  l09BD_7B1E
l09BD_7B1E:
	return
	// succ:  fn09BD_7B03_exit
fn09BD_7B03_exit:


// fn09BD_7B1F
// Return size: 2
define fn09BD_7B1F
fn09BD_7B1F_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7B1F
l09BD_7B1F:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v6 = Mem0[ds:0xECC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v6
	call fn09BD_7B03 (retsize: 2;)
	si = bx
	di = dx
	call fn09BD_6C64 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	v11 = Mem0[ds:0xECC<16>:word16]
	Mem0[ds:0xECC<16>:word16] = cx
	cx = v11
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_7B7A
	// succ:  l09BD_7B38 l09BD_7B7A
l09BD_7B38:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = cx
	call fn09BD_7B03 (retsize: 2;)
	cx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	SCZO = cond(di - dx)
	v17 = dx
	dx = ax
	ax = v17
	branch Test(NE,Z) l09BD_7B7B
	// succ:  l09BD_7B44 l09BD_7B7B
l09BD_7B44:
	SCZO = cond(si - bx)
	branch Test(NE,Z) l09BD_7B7B
	// succ:  l09BD_7B48 l09BD_7B7B
l09BD_7B48:
	dx = dx + Mem0[ds:0xECE<16>:word16]
	SCZO = cond(dx)
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_7B60
	// succ:  l09BD_7B55 l09BD_7B60
l09BD_7B55:
	SCZO = cond(dx - 0x3000<16>)
	branch Test(ULE,CZ) l09BD_7B60
	// succ:  l09BD_7B5D l09BD_7B60
l09BD_7B5D:
	dx = 0x3000<16>
	// succ:  l09BD_7B60
l09BD_7B60:
	ax = Mem0[ds:0xECA<16>:word16]
	bx = ax
	ax = ax + cx
	SCZO = cond(ax)
	al = al & 0xFC<8>
	SZO = cond(al)
	C = false
	bx = bx + 3<16>
	SCZO = cond(bx)
	bl = bl & 0xFC<8>
	SZO = cond(bl)
	C = false
	ax = ax - bx
	SCZO = cond(ax)
	Mem0[ds:0xECA<16>:word16] = bx
	Mem0[ds:0xDFA<16>:word16] = ax
	ax = ax | ax
	SZO = cond(ax)
	C = false
	// succ:  l09BD_7B7A
l09BD_7B7A:
	return
	// succ:  fn09BD_7B1F_exit
l09BD_7B7B:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	call fn09BD_1DEC (retsize: 2;)
	dx = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_7B1F_exit
fn09BD_7B1F_exit:


// fn09BD_7B85
// Return size: 2
define fn09BD_7B85
fn09BD_7B85_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_7B85
	// succ:  l09BD_7B85
l09BD_7B7A_in_fn09BD_7B85:
	return
	// succ:  fn09BD_7B85_exit
l09BD_7B7A_in_fn09BD_7B85:
	return
	// succ:  fn09BD_7B85_exit
l09BD_7B85:
	eax = CONVERT(Mem0[ds:0xDFA<16>:word16], word16, word32)
	eax = eax << 0xA<32>
	SCZO = cond(eax)
	Mem0[ds:0xAA8<16>:word32] = eax
	branch Test(EQ,Z) l09BD_7B7A_in_fn09BD_7B85
	// succ:  l09BD_7B95 l09BD_7B7A_in_fn09BD_7B85
l09BD_7B95:
	eax = Mem0[ds:0x98<16>:word32]
	Mem0[0x9BD<16>:0x7B81<16>:word32] = eax
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(NE,Z) l09BD_7B7A_in_fn09BD_7B85
	// succ:  l09BD_7BA5 l09BD_7B7A_in_fn09BD_7B85
l09BD_7BA5:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	cx = Mem0[ds:0xAA<16>:word16]
	ch = ch + 1<8>
	SZO = cond(ch)
	es = cx
	esi = esi ^ esi
	SZO = cond(esi)
	C = false
	call fn09BD_7BB8 (retsize: 2;)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_7B85_exit
fn09BD_7B85_exit:


// fn09BD_7BB8
// Return size: 2
define fn09BD_7BB8
fn09BD_7BB8_entry:
	sp = fp
	Top = 0<i8>
	// succ:  l09BD_7BB8
l09BD_7BB8:
	eax = Mem0[0x9BD<16>:0x7B81<16>:word32]
	edi = CONVERT(Mem0[ds:0xECA<16>:word16], word16, word32)
	ebx = 0x1000<32>
	cx = Mem0[ds:0xDFA<16>:word16]
	cx = cx + di
	SCZO = cond(cx)
	eax = eax << 4<32>
	SCZO = cond(eax)
	eax = eax + ebx
	SCZO = cond(eax)
	eax = eax - 1<32>
	SZO = cond(eax)
	ax = ax & 0xF000<16>
	SZO = cond(ax)
	C = false
	ax = ax | 0xC07<16>
	SZO = cond(ax)
	C = false
	// succ:  l09BD_7BDE
l09BD_7BDE:
	SCZO = cond(di - cx)
	branch Test(UGE,C) l09BD_7BF0
	// succ:  l09BD_7BE2 l09BD_7BF0
l09BD_7BE2:
	Mem0[es:esi + edi:word32] = eax
	di = di + 4<16>
	SCZO = cond(di)
	eax = eax + ebx
	SCZO = cond(eax)
	goto l09BD_7BDE
	// succ:  l09BD_7BDE
l09BD_7BF0:
	edi = edi << 6<32>
	SCZO = cond(edi)
	Mem0[ds:0xAC<16>:word32] = edi
	return
	// succ:  fn09BD_7BB8_exit
fn09BD_7BB8_exit:


// fn09BD_7C31
// Return size: 2
define fn09BD_7C31
fn09BD_7C31_entry:
	sp = fp
	Top = 0<i8>
	goto l09BD_7C31
	// succ:  l09BD_7C31
l09BD_79CB:
	ax = 0xBFDE<16>
	bx = 5<16>
	call fn09BD_0EF4 (retsize: 2;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_79F9
	// succ:  l09BD_79D8 l09BD_79F9
l09BD_79D8:
	es = Mem0[ss:0xAA<16>:selector]
	di = 4<16>
	eax = Mem0[es:di - 4<16>:word32]
	Mem0[0x9BD<16>:0x79C7<16>:word32] = eax
	// succ:  l09BD_79EA
l09BD_79EA:
	branch cx == 0<16> l09BD_79ED
	// succ:  l09BD_79EA_1 l09BD_79ED
l09BD_79EA_1:
	v15 = Mem0[ds:si:word32]
	Mem0[es:di:word32] = v15
	si = si + 4<i16>
	di = di + 4<i16>
	cx = cx - 1<16>
	goto l09BD_79EA
	// succ:  l09BD_79EA
l09BD_79ED:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	ds = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	ax = 0xBFDE<16>
	bx = 0xB<16>
	call fn09BD_0EF4 (retsize: 2;)
	return
	// succ:  fn09BD_7C31_exit
l09BD_79F9:
	Mem0[0x9BD<16>:0x79C5<16>:word16] = cx
	cx = cx << 2<16>
	SCZO = cond(cx)
	cx = cx + di
	SCZO = cond(cx)
	ecx = CONVERT(cx, word16, word32)
	ax = es
	eax = CONVERT(ax, word16, word32)
	eax = eax << 4<32>
	SCZO = cond(eax)
	edi = CONVERT(di, word16, word32)
	edi = edi + eax
	SCZO = cond(edi)
	ecx = ecx + eax
	SCZO = cond(ecx)
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = ecx
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = edi
	call fn09BD_0290 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x38<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	edi = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	ebx = Mem0[ss:sp:word32]
	sp = sp + 4<i16>
	// succ:  l09BD_7A29
l09BD_7A29:
	call fn0070_55B0 (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_7A44
	// succ:  l09BD_7A32 l09BD_7A44
l09BD_7A32:
	SCZO = cond(edi - ebx)
	branch Test(ULT,C) l09BD_7A29
	// succ:  l09BD_7A37 l09BD_7A29
l09BD_7A37:
	branch Test(EQ,Z) l09BD_7A44
	// succ:  l09BD_7A39 l09BD_7A44
l09BD_7A39:
	edi = edi - 4<32>
	SCZO = cond(edi)
	Mem0[es:edi:byte] = 0<8>
	goto l09BD_7A32
	// succ:  l09BD_7A32
l09BD_7A44:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ax
	call fn09BD_092C (retsize: 2;)
	ax = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_7A4B_thunk_fn09BD_78FA
	goto l09BD_7A4F
	// succ:  l09BD_7A4F l09BD_7A4B_thunk_fn09BD_78FA
l09BD_7A4B_thunk_fn09BD_78FA:
	call fn09BD_78FA (retsize: 0;)
	return
	// succ:  fn09BD_7C31_exit
l09BD_7A4F:
	cx = Mem0[0x9BD<16>:0x79C5<16>:word16]
	goto l09BD_79CB
	// succ:  l09BD_79CB
l09BD_7BFA:
	Mem0[0x9BD<16>:0x79C5<16>:word16] = cx
	es = Mem0[ds:0xAA<16>:selector]
	di = 4<16>
	eax = Mem0[es:di - 4<16>:word32]
	Mem0[0x9BD<16>:0x79C7<16>:word32] = eax
	SCZO = cond(Mem0[ds:0xE00<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_7C30
	// succ:  l09BD_7C17 l09BD_7C30
l09BD_7C17:
	ax = 0xDE04<16>
	__syscall(0x67<8>)
	ah = ah | ah
	SZO = cond(ah)
	C = false
	branch Test(NE,Z) l09BD_7C1E_thunk_fn09BD_7875
	goto l09BD_7C22
	// succ:  l09BD_7C22 l09BD_7C1E_thunk_fn09BD_7875
l09BD_7C1E_thunk_fn09BD_7875:
	call fn09BD_7875 (retsize: 0;)
	return
	// succ:  fn09BD_7C31_exit
l09BD_7C22:
	v18 = Mem0[ds:0xDF6<16>:word16] + 1<16>
	Mem0[ds:0xDF6<16>:word16] = v18
	SZO = cond(v18)
	dx = dx | 0x807<16>
	SZO = cond(dx)
	C = false
	v20 = edx
	edx = eax
	eax = v20
	Mem0[es:di:word32] = eax
	di = di + 4<i16>
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_7C17
	// succ:  l09BD_7C30 l09BD_7C17
l09BD_7C30:
	return
	// succ:  fn09BD_7C31_exit
l09BD_7C31:
	SCZO = cond(Mem0[ds:0xE00<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_7C30
	// succ:  l09BD_7C38 l09BD_7C30
l09BD_7C38:
	call fn09BD_199A (retsize: 2;)
	call fn09BD_016C (retsize: 2;)
	SCZO = cond(Mem0[ds:0xDFF<16>:byte] - 0<8>)
	branch Test(EQ,Z) l09BD_7C5B
	// succ:  l09BD_7C45 l09BD_7C5B
l09BD_7C45:
	cx = Mem0[ds:0xECE<16>:word16]
	cx = cx - 0x1000<16>
	SCZO = cond(cx)
	cx = cx >>u 0xC<16>
	SCZO = cond(cx)
	cx = cx + 1<16>
	SZO = cond(cx)
	SZO = cond(Mem0[ds:0x47<16>:byte] & 0x80<8>)
	C = false
	branch Test(EQ,Z) l09BD_7BFA
	// succ:  l09BD_7C58 l09BD_7BFA
l09BD_7C58:
	goto l09BD_79CB
	// succ:  l09BD_79CB
l09BD_7C5B:
	cx = Mem0[ds:0xDFA<16>:word16]
	branch cx == 0<16> l09BD_7C30
	// succ:  l09BD_7C61 l09BD_7C30
l09BD_7C61:
	SCZO = cond(Mem0[ds:0xADC<16>:word16] - 0<16>)
	branch Test(EQ,Z) l09BD_7C30
	// succ:  l09BD_7C68 l09BD_7C30
l09BD_7C68:
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = si
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = di
	eax = CONVERT(Mem0[ds:0xECA<16>:word16], word16, word32)
	eax = eax << 0xA<32>
	SCZO = cond(eax)
	edx = Mem0[ds:0x98<16>:word32]
	edx = edx << 4<32>
	SCZO = cond(edx)
	edx = edx - eax
	SCZO = cond(edx)
	edx = -edx
	SCZO = cond(edx)
	C = edx == 0<32>
	dh = dh & 0xF<8>
	SZO = cond(dh)
	C = false
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = eax
	ax = ax | 0xEEE<16>
	SZO = cond(ax)
	C = false
	sp = sp - 4<i16>
	Mem0[ss:sp:word32] = eax
	bx = sp
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = dx
	v26 = Mem0[ds:0xADC<16>:word16]
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = v26
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = ss
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = bx
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0<16>
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 4<16>
	si = sp
	edi = 0x1000<32>
	cx = cx >>u 2<16>
	SCZO = cond(cx)
	// succ:  l09BD_7CA9
l09BD_7CA9:
	ah = 0xB<8>
	call Mem0[ds:0xAEC<16>:ptr32] (retsize: 4;)
	ax = ax | ax
	SZO = cond(ax)
	C = false
	branch Test(EQ,Z) l09BD_7CF0
	// succ:  l09BD_7CB3 l09BD_7CF0
l09BD_7CB3:
	v27 = Mem0[ds:bx:word32] + edi
	Mem0[ds:bx:word32] = v27
	SCZO = cond(v27)
	v28 = Mem0[ds:si + 0xC<16>:word32] + edi
	Mem0[ds:si + 0xC<16>:word32] = v28
	SCZO = cond(v28)
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_7CA9
	// succ:  l09BD_7CBC l09BD_7CA9
l09BD_7CBC:
	call fn09BD_0290 (retsize: 2;)
	sp = sp - 2<i16>
	Mem0[ss:sp:word16] = 0x38<16>
	es = Mem0[ss:sp:selector]
	sp = sp + 2<i16>
	bx = sp
	ebx = Mem0[ds:bx + 0x14<16>:word32]
	eax = ebx
	ax = ax | 0xEEE<16>
	SZO = cond(ax)
	C = false
	cx = Mem0[ds:0xDFA<16>:word16]
	cx = cx >>u 2<16>
	SCZO = cond(cx)
	// succ:  l09BD_7CD5
l09BD_7CD5:
	SCZO = cond(eax - Mem0[es:ebx:word32])
	branch Test(NE,Z) l09BD_7CED
	// succ:  l09BD_7CDC l09BD_7CED
l09BD_7CDC:
	ebx = ebx + edi
	SCZO = cond(ebx)
	eax = eax + edi
	SCZO = cond(eax)
	cx = cx - 1<16>
	branch cx != 0<16> l09BD_7CD5
	// succ:  l09BD_7CE4 l09BD_7CD5
l09BD_7CE4:
	call fn09BD_092C (retsize: 2;)
	// succ:  l09BD_7CE7
l09BD_7CE7:
	sp = sp + 0x18<16>
	SCZO = cond(sp)
	di = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	si = Mem0[ss:sp:word16]
	sp = sp + 2<i16>
	return
	// succ:  fn09BD_7C31_exit
l09BD_7CED:
	call fn09BD_092C (retsize: 2;)
	// succ:  l09BD_7CF0
l09BD_7CF0:
	cx = Mem0[ds:0xDFA<16>:word16]
	v29 = Mem0[ds:0xECA<16>:word16] + cx
	Mem0[ds:0xECA<16>:word16] = v29
	SCZO = cond(v29)
	ax = Mem0[ds:0xAA<16>:word16]
	ah = ah + 2<8>
	SCZO = cond(ah)
	es = ax
	ax = ax ^ ax
	SZO = cond(ax)
	C = false
	di = di ^ di
	SZO = cond(di)
	C = false
	cx = cx >>u 1<16>
	SCZO = cond(cx)
	// succ:  l09BD_7D06
l09BD_7D06:
	branch cx == 0<16> l09BD_7D08
	// succ:  l09BD_7D06_1 l09BD_7D08
l09BD_7D06_1:
	Mem0[es:di:word16] = ax
	di = di + 2<i16>
	cx = cx - 1<16>
	goto l09BD_7D06
	// succ:  l09BD_7D06
l09BD_7D08:
	call fn09BD_1DEC (retsize: 2;)
	goto l09BD_7CE7
	// succ:  l09BD_7CE7
fn09BD_7C31_exit:


